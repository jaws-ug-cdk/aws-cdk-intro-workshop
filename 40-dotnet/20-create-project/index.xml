<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>New Project on AWS Cloud Development Kit (AWS CDK) Workshop</title><link>https://cdkworkshop.com/40-dotnet/20-create-project.html</link><description>Recent content in New Project on AWS Cloud Development Kit (AWS CDK) Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://cdkworkshop.com/40-dotnet/20-create-project/index.xml" rel="self" type="application/rss+xml"/><item><title>cdk init</title><link>https://cdkworkshop.com/40-dotnet/20-create-project/100-cdk-init.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/20-create-project/100-cdk-init.html</guid><description>Create project directory Create an empty directory on your system:
mkdir cdk-workshop &amp;amp;&amp;amp; cd cdk-workshop cdk init We will use cdk init to create a new C# CDK project:
cdk init sample-app --language csharp Output should look like this (you can safely ignore warnings about initialization of a git repository, this probably means you don&amp;rsquo;t have git installed, which is fine for this workshop):
Applying project template sample-app for csharp Project &amp;#39;CdkWorkshop/CdkWorkshop.</description></item><item><title>Project structure</title><link>https://cdkworkshop.com/40-dotnet/20-create-project/300-structure.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/20-create-project/300-structure.html</guid><description>Open your IDE Now&amp;rsquo;s a good time to open the project in your favorite IDE and explore.
If you use VSCode, you can just type code . within the project directory.
You may see a notification saying Required assets to build and debug are missing from 'YOURPROJECT'. Add them?
This can be ignored for our purposes.
Explore your project directory You&amp;rsquo;ll see something like this:
src/CdkWorkshop/Program.cs is the entrypoint for the CDK application it will load the stack defined in src/CdkWorkshop/CdkWorkshopStack.</description></item><item><title>cdk synth</title><link>https://cdkworkshop.com/40-dotnet/20-create-project/400-synth.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/20-create-project/400-synth.html</guid><description>Synthesize a template from your app AWS CDK apps are effectively only a definition of your infrastructure using code. When CDK apps are executed, they produce (or &amp;ldquo;synthesize&amp;rdquo;, in CDK parlance) an AWS CloudFormation template for each stack defined in your application.
To synthesize a CDK app, use the cdk synth command. Let&amp;rsquo;s check out the template synthesized from the sample app:
The CDK CLI requires you to be in the same directory as your cdk.</description></item><item><title>cdk deploy</title><link>https://cdkworkshop.com/40-dotnet/20-create-project/500-deploy.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/20-create-project/500-deploy.html</guid><description>Okay, we&amp;rsquo;ve got a CloudFormation template. What&amp;rsquo;s next? Let&amp;rsquo;s deploy it into our account!
Bootstrapping an environment The first time you deploy an AWS CDK app into an environment (account/region), you&amp;rsquo;ll need to install a &amp;ldquo;bootstrap stack&amp;rdquo;. This stack includes resources that are needed for the toolkit&amp;rsquo;s operation. For example, the stack includes an S3 bucket that is used to store templates and assets during the deployment process.
You can use the cdk bootstrap command to install the bootstrap stack into an environment:</description></item></channel></rss>