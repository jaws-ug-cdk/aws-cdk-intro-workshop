<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Using construct libraries on AWS Cloud Development Kit (AWS CDK) Workshop</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer.html</link><description>Recent content in Using construct libraries on AWS Cloud Development Kit (AWS CDK) Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/index.xml" rel="self" type="application/rss+xml"/><item><title>Learning about the Table Viewer construct</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/100-discovery.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/100-discovery.html</guid><description>Reading documentation Browse to the DynamoTableViewer page on github and read the module documentation.
As mentioned in the README page of this library, it is not intended for production use. Namely because it will expose contents from your DynamoDB table to anyone without authentication.</description></item><item><title>Installing the library</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/200-install.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/200-install.html</guid><description>Install Package Before you can use the table viewer in your application, you&amp;rsquo;ll need to install the Nuget package:
dotnet add package Cdklabs.DynamoTableViewer --version 0.2.4 Output should look similar to this:
info : Adding PackageReference for package &amp;#39;Eladb.DynamoTableViewer&amp;#39; into project &amp;#39;~/cdk-workshop/src/CdkWorkshop/CdkWorkshop.csproj&amp;#39;. info : Restoring packages for ~/cdk-workshop/src/CdkWorkshop/CdkWorkshop.csproj... info : GET https://api.nuget.org/v3-flatcontainer/cdklabs.dynamotableviewer/index.json info : OK https://api.nuget.org/v3-flatcontainer/cdklabs.dynamotableviewer/index.json 240ms info : GET https://api.nuget.org/v3-flatcontainer/cdklabs.dynamotableviewer/0.2.4/cdklabs.dynamotableviewer.0.2.4.nupkg info : OK https://api.nuget.org/v3-flatcontainer/cdklabs.dynamotableviewer/0.2.4/cdklabs.dynamotableviewer.0.2.4.nupkg 241ms info : Installing Cdklabs.DynamoTableViewer 0.2.4. info : Package &amp;#39;Cdklabs.</description></item><item><title>Add the table viewer to your app</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/300-add.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/300-add.html</guid><description>Add a table viewer to your stack Add the following highlighted lines to src/CdkWorkshop/CdkWorkshopStack.cs to add a TableViewer construct to your stack:
using Amazon.CDK; using Amazon.CDK.AWS.APIGateway; using Amazon.CDK.AWS.Lambda; using Cdklabs.DynamoTableViewer; using Construct; namespace CdkWorkshop { public class CdkWorkshopStack : Stack { public CdkWorkshopStack(Construct scope, string id, IStackProps props = null) : base(scope, id, props) { // Defines a new lambda resource var hello = new Function(this, &amp;#34;HelloHandler&amp;#34;, new FunctionProps { Runtime = Runtime.</description></item><item><title>Exposing our hit counter table</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/400-expose-table.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/400-expose-table.html</guid><description>Add a table property to our hit counter Edit src/CdkWorkshop/HitCounter.cs and modify it so that table is exposed as a public property called MyTable.
using Amazon.CDK; using Amazon.CDK.AWS.DynamoDB; using Amazon.CDK.AWS.Lambda; using Constructs; using System.Collections.Generic; namespace CdkWorkshop { public class HitCounterProps { // The function for which we want to count url hits public IFunction Downstream { get; set; } } public class HitCounter : Construct { public readonly Function Handler; public readonly Table MyTable; public HitCounter(Construct scope, string id, HitCounterProps props) : base(scope, id) { var table = new Table(this, &amp;#34;Hits&amp;#34;, new TableProps { PartitionKey = new Attribute { Name = &amp;#34;path&amp;#34;, Type = AttributeType.</description></item><item><title>Deploying our app</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/500-deploy.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/500-deploy.html</guid><description>cdk diff Before we deploy, let&amp;rsquo;s take a look at what will happen when we deploy our app (this is just the Resources section of the output):
$ cdk diff Resources [+] AWS::IAM::Role ViewHitCounter/Rendered/ServiceRole ViewHitCounterRenderedServiceRole254DB4EA [+] AWS::IAM::Policy ViewHitCounter/Rendered/ServiceRole/DefaultPolicy ViewHitCounterRenderedServiceRoleDefaultPolicy9ADB8C83 [+] AWS::Lambda::Function ViewHitCounter/Rendered ViewHitCounterRendered9C783E45 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.ANY.. ViewHitCounterRenderedApiPermissionANY72263B1A [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.Test.ANY.. ViewHitCounterRenderedApiPermissionTestANYA4794B81 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.ANY..{proxy+} ViewHitCounterRenderedApiPermissionANYproxy42B9E676 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.Test.ANY..{proxy+} ViewHitCounterRenderedApiPermissionTestANYproxy104CA88E [+] AWS::ApiGateway::RestApi ViewHitCounter/ViewerEndpoint ViewHitCounterViewerEndpoint5A0EF326 [+] AWS::ApiGateway::Deployment ViewHitCounter/ViewerEndpoint/Deployment ViewHitCounterViewerEndpointDeployment1CE7C5768689ca8f54dfa4f161d3df0ebffcdcff [+] AWS::ApiGateway::Stage ViewHitCounter/ViewerEndpoint/DeploymentStage.prod ViewHitCounterViewerEndpointDeploymentStageprodF3901FC7 [+] AWS::IAM::Role ViewHitCounter/ViewerEndpoint/CloudWatchRole ViewHitCounterViewerEndpointCloudWatchRole87B94D6A [+] AWS::ApiGateway::Account ViewHitCounter/ViewerEndpoint/Account ViewHitCounterViewerEndpointAccount0B75E76A [+] AWS::ApiGateway::Resource ViewHitCounter/ViewerEndpoint/{proxy+} ViewHitCounterViewerEndpointproxy2F4C239F [+] AWS::ApiGateway::Method ViewHitCounter/ViewerEndpoint/{proxy+}/ANY ViewHitCounterViewerEndpointproxyANYFF4B8F5B [+] AWS::ApiGateway::Method ViewHitCounter/ViewerEndpoint/ANY ViewHitCounterViewerEndpointANY66F2285B You&amp;rsquo;ll notice that the table viewer adds another API Gateway endpoint, a Lambda function, permissions, outputs, all sorts of goodies.</description></item><item><title>Extra credit</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/600-extra-credit.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/600-extra-credit.html</guid><description>Sort hits by descending order You&amp;rsquo;ll notice that the hits in the table are not sorted. Figure out how to configure the table viewer to sort the table by &amp;ldquo;hits&amp;rdquo; in descending order (top path is first).</description></item></channel></rss>