<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Writing constructs on AWS Cloud Development Kit (AWS CDK) Workshop</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter.html</link><description>Recent content in Writing constructs on AWS Cloud Development Kit (AWS CDK) Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/index.xml" rel="self" type="application/rss+xml"/><item><title>Define the HitCounter API</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/100-api.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/100-api.html</guid><description>Create a new file for our hit counter construct Create a new file under src/CdkWorkshop called HitCounter.cs with the following content:
using Amazon.CDK; using Amazon.CDK.AWS.Lambda; using Constructs; namespace CdkWorkshop { public class HitCounterProps { // The function for which we want to count url hits public IFunction Downstream { get; set; } } public class HitCounter : Construct { public HitCounter(Construct scope, string id, HitCounterProps props) : base(scope, id) { // TODO } } } Save the file.</description></item><item><title>Hit counter handler</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/200-handler.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/200-handler.html</guid><description>Hit counter Lambda handler Okay, now let&amp;rsquo;s write the Lambda handler code for our hit counter.
Create the file lambda/hitcounter.js:
const { DynamoDB, Lambda } = require(&amp;#39;aws-sdk&amp;#39;); exports.handler = async function(event) { console.log(&amp;#34;request:&amp;#34;, JSON.stringify(event, undefined, 2)); // create AWS SDK clients const dynamo = new DynamoDB(); const lambda = new Lambda(); // update dynamo entry for &amp;#34;path&amp;#34; with hits++ await dynamo.updateItem({ TableName: process.env.HITS_TABLE_NAME, Key: { path: { S: event.path } }, UpdateExpression: &amp;#39;ADD hits :incr&amp;#39;, ExpressionAttributeValues: { &amp;#39;:incr&amp;#39;: { N: &amp;#39;1&amp;#39; } } }).</description></item><item><title>Define resources</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/300-resources.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/300-resources.html</guid><description>Add resources to the hit counter construct Now, let&amp;rsquo;s define the AWS Lambda function and the DynamoDB table in our HitCounter construct.
Now, go back to src/CdkWorkshop/HitCounter.cs and add the following highlighted code:
using Amazon.CDK; using Amazon.CDK.AWS.DynamoDB; using Amazon.CDK.AWS.Lambda; using Constructs; using System.Collections.Generic; namespace CdkWorkshop { public class HitCounterProps { // The function for which we want to count url hits public IFunction Downstream { get; set; } } public class HitCounter : Construct { public Function Handler { get; } public HitCounter(Construct scope, string id, HitCounterProps props) : base(scope, id) { var table = new Table(this, &amp;#34;Hits&amp;#34;, new TableProps { PartitionKey = new Attribute { Name = &amp;#34;path&amp;#34;, Type = AttributeType.</description></item><item><title>Use the hit counter</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/400-use.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/400-use.html</guid><description>Add a hit counter to our stack Okay, our hit counter is ready. Let&amp;rsquo;s use it in our app. Open src/CdkWorkshop/CdkWorkshopStack.cs and add the following highlighted code:
using Amazon.CDK; using Amazon.CDK.AWS.APIGateway; using Amazon.CDK.AWS.Lambda; using Constructs; namespace CdkWorkshop { public class CdkWorkshopStack : Stack { public CdkWorkshopStack(Construct scope, string id, IStackProps props = null) : base(scope, id, props) { // Defines a new lambda resource var hello = new Function(this, &amp;#34;HelloHandler&amp;#34;, new FunctionProps { Runtime = Runtime.</description></item><item><title>CloudWatch Logs</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/500-logs.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/500-logs.html</guid><description>Viewing CloudWatch logs for our Lambda function The first thing to do is to go and look at the logs of our hit counter AWS Lambda function.
There are many tools that help you do that like SAM CLI and awslogs. In this workshop, we&amp;rsquo;ll show you how to find your logs through the AWS console.
Open the AWS Lambda console (make sure you are connected to the correct region).</description></item><item><title>Granting permissions</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/600-permissions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/600-permissions.html</guid><description>Allow Lambda to read/write our DynamoDB table Let&amp;rsquo;s give our Lambda&amp;rsquo;s execution role permissions to read/write from our table.
Go back to src/CdkWorkshop/HitCounter.cs and add the following highlighted lines:
using Amazon.CDK; using Amazon.CDK.AWS.Lambda; using Amazon.CDK.AWS.DynamoDB; using Constructs; using System.Collections.Generic; namespace CdkWorkshop { public class HitCounterProps { // The function for which we want to count url hits public IFunction Downstream { get; set; } } public class HitCounter : Construct { public IFunction Handler { get; }; public HitCounter(Construct scope, string id, HitCounterProps props) : base(scope, id) { var table = new Table(this, &amp;#34;Hits&amp;#34;, new TableProps { PartitionKey = new Attribute { Name = &amp;#34;path&amp;#34;, Type = AttributeType.</description></item><item><title>Test the hit counter</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/700-test.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/700-test.html</guid><description>Issue a few test requests Let&amp;rsquo;s issue a few requests and see if our hit counter works. You can also use your web browser to do that:
curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world Open DynamoDB console Go to the DynamoDB console.
Make sure you are in the region where you created the table.
Select Tables in the navigation pane and select the table that starts with CdkWorkShopStack-HelloHitCounterHits.</description></item></channel></rss>