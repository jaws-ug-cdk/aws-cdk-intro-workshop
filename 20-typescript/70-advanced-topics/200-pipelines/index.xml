<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CDK Pipelines on AWS Cloud Development Kit (AWS CDK) Workshop</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines.html</link><description>Recent content in CDK Pipelines on AWS Cloud Development Kit (AWS CDK) Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Started with Pipelines</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/1000-setting-up.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/1000-setting-up.html</guid><description>Note: This segment of the workshop assumes you have completed the previous sections of the workshop. If you have not, and just want to follow this segment, or you are returning to try this workshop, you can use the code here that represents the last state of the project after adding the tests.
Create Pipeline Stack The first step is to create the stack that will contain our pipeline. Since this is separate from our actual &amp;ldquo;production&amp;rdquo; application, we want this to be entirely self-contained.</description></item><item><title>Create Repository</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/2000-create-repo.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/2000-create-repo.html</guid><description>Create Repo in Pipeline Stack The first step in any good CD pipeline is source control. Here we will create a CodeCommit repository to contain our project code.
Edit the file lib/pipeline-stack.ts as follows.
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as codecommit from &amp;#39;aws-cdk-lib/aws-codecommit&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export class WorkshopPipelineStack extends cdk.Stack { constructor(scope: Construct, id: string, props?: cdk.StackProps) { super(scope, id, props); // Creates a CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; new codecommit.</description></item><item><title>Create New Pipeline</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/3000-new-pipeline.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/3000-new-pipeline.html</guid><description>Define an Empty Pipeline Now we are ready to define the basics of the pipeline.
Return to the file lib/pipeline-stack.ts and edit as follows:
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as codecommit from &amp;#39;aws-cdk-lib/aws-codecommit&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; import {CodeBuildStep, CodePipeline, CodePipelineSource} from &amp;#34;aws-cdk-lib/pipelines&amp;#34;; export class WorkshopPipelineStack extends cdk.Stack { constructor(scope: Construct, id: string, props?: cdk.StackProps) { super(scope, id, props); // This creates a new CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; const repo = new codecommit.</description></item><item><title>Add Application to Pipeline</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/4000-build-stage.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/4000-build-stage.html</guid><description>Create Stage At this point, you have a fully operating CDK pipeline that will automatically update itself on every commit, BUT at the moment, that is all it does. We need to add a stage to the pipeline that will deploy our application.
Create a new file in lib called pipeline-stage.ts with the code below:
import { CdkWorkshopStack } from &amp;#39;./cdk-workshop-stack&amp;#39;; import { Stage, StageProps } from &amp;#39;aws-cdk-lib&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export class WorkshopPipelineStage extends Stage { constructor(scope: Construct, id: string, props?</description></item><item><title>Polish Pipeline</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/5000-test-actions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/5000-test-actions.html</guid><description>Get Endpoints Stepping back, we can see a problem now that our app is being deployed by our pipeline. There is no easy way to find the endpoints of our application (the TableViewer and APIGateway endpoints), so we can&amp;rsquo;t call it! Let&amp;rsquo;s add a little bit of code to expose these more obviously.
First edit lib/cdk-workshop-stack.ts to get these values and expose them as properties of our stack:
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as lambda from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import * as apigw from &amp;#39;aws-cdk-lib/aws-apigateway&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; import { HitCounter } from &amp;#39;.</description></item><item><title>Cleanup</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/6000-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/6000-cleanup.html</guid><description>To clean up the stacks from this workshop, navigate to the Cloudformation Console, select your stacks, and hit &amp;ldquo;Delete&amp;rdquo;. This may take some time.</description></item></channel></rss>