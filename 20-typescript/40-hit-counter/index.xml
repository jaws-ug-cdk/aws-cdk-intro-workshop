<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>コンストラクトの作成 on AWS Cloud Development Kit (AWS CDK) Workshop</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter.html</link><description>Recent content in コンストラクトの作成 on AWS Cloud Development Kit (AWS CDK) Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/index.xml" rel="self" type="application/rss+xml"/><item><title>HitCounter APIの定義</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/100-api.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/100-api.html</guid><description>HitCounterコンストラクト用のファイルの作成 libフォルダ配下に次のようなhitcounter.tsファイルを作成します。
import { IFunction } from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export interface HitCounterProps { /** the function for which we want to count url hits **/ downstream: IFunction; } export class HitCounter extends Construct { constructor(scope: Construct, id: string, props: HitCounterProps) { super(scope, id); // TODO } } ファイルを保存すると、エラーが発生しますが心配いりません。 この後すぐに props プロパティを追加します。
コードの解説 HitCounterという名前のコンストラクトクラスを新しく定義しています。 今までどおり、scope, id, props のコンストラクター引数を設定し、基底クラスである Construct に伝搬させます。 propsは、IFunction型のdownstream というプロパティを含む、HitCounterProps型の引数です。 前の章で作成したLambda関数をここに接続して、HitCountが機能するようにします。 次に、HitCounterのハンドラーコードを記述します。</description></item><item><title>HitCounterハンドラー</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/200-handler.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/200-handler.html</guid><description>HitCounter Lambda ハンドラー HitCounterのLambdaハンドラーコードを記述しましょう。
lambda/hitcounter.tsを作成し、次のコードを追記してください。
import { DynamoDB, Lambda } from &amp;#39;aws-sdk&amp;#39;; export const handler: AWSLambda.APIGatewayProxyHandler = async (event) =&amp;gt; { console.log(&amp;#39;request:&amp;#39;, JSON.stringify(event, undefined, 2)); // create AWS SDK clients const dynamo = new DynamoDB(); const lambda = new Lambda(); // update dynamo entry for &amp;#34;path&amp;#34; with hits++ await dynamo .updateItem({ TableName: process.env.HITS_TABLE_NAME!, Key: { path: { S: event.path } }, UpdateExpression: &amp;#39;ADD hits :incr&amp;#39;, ExpressionAttributeValues: { &amp;#39;:incr&amp;#39;: { N: &amp;#39;1&amp;#39; } }, }) .</description></item><item><title>リソースの定義</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/300-resources.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/300-resources.html</guid><description>HitCounterコンストラクトにリソースを追加する 次に、Lambda関数とDynamoDBテーブルをHitCounterコンストラクトに定義します。
lib/hitcounter.ts に戻って、以下のコードを追記しましょう。
import { AttributeType, Table } from &amp;#39;aws-cdk-lib/aws-dynamodb&amp;#39;; import { IFunction, Runtime } from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import { NodejsFunction } from &amp;#39;aws-cdk-lib/aws-lambda-nodejs&amp;#39;; import { RemovalPolicy } from &amp;#39;aws-cdk-lib&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export interface HitCounterProps { /** the function for which we want to count url hits **/ downstream: IFunction; } export class HitCounter extends Construct { /** allows accessing the counter function */ public readonly handler: IFunction; constructor(scope: Construct, id: string, props: HitCounterProps) { super(scope, id); const table = new Table(this, &amp;#39;Hits&amp;#39;, { partitionKey: { name: &amp;#39;path&amp;#39;, type: AttributeType.</description></item><item><title>HitCounterの使用</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/400-use.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/400-use.html</guid><description>スタックにHitCounterを追加する HitCounterの準備ができましたのでアプリに実装していきましょう。 lib/cdk-workshop-stack.tsを開き、次の強調表示されたコードを追加します。
import { Stack, StackProps } from &amp;#39;aws-cdk-lib&amp;#39;; import { LambdaRestApi } from &amp;#39;aws-cdk-lib/aws-apigateway&amp;#39;; import { Runtime } from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import { NodejsFunction } from &amp;#39;aws-cdk-lib/aws-lambda-nodejs&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; import { HitCounter } from &amp;#39;./hitcounter&amp;#39;; export class CdkWorkshopStack extends Stack { constructor(scope: Construct, id: string, props?: StackProps) { super(scope, id, props); // AWS Lambdaリソースを定義 const hello = new NodejsFunction(this, &amp;#39;HelloHandler&amp;#39;, { runtime: Runtime.NODEJS_16_X, entry: &amp;#39;lambda/hello.ts&amp;#39;, }); const helloWithCounter = new HitCounter(this, &amp;#39;HelloHitCounter&amp;#39;, { downstream: hello, }); // &amp;#34;hello&amp;#34; 関数をバックに持つAPI Gateway REST APIリソースを定義 new LambdaRestApi(this, &amp;#39;Endpoint&amp;#39;, { handler: helloWithCounter.</description></item><item><title>HitCounterのテスト</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/700-test.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/700-test.html</guid><description>テスト呼び出し いくつかのリクエストを実行して、HitCounterが機能するかどうかを確認しましょう。curlコマンド、またはWebブラウザから確認ができます。
curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world もし、5XXエラーとなる場合は、Lambdaのコンソール画面からHitCounterのログを確認してみてください。 問題点がある場合は問い合わせをお願いします。
DynamoDBコンソールを開く DynamoDBコンソールに移動します。
テーブルを作成したリージョンにいることを確認してください。手順どおりであれば東京リージョンにいることを確認しましょう。
ナビゲーションペインから「テーブル」を選択し、CdkWorkShopStack-HelloHitCounterHitsで始まるテーブルを選択してください。
テーブルを開き、「テーブルアイテムの探索」を選択します。
各パスで取得したヒット数を確認します。
新しいパスでAPIを叩き、アイテムビューを更新してください。 hitsカウントが1の新しいアイテムが表示されます。
Good job! HitCounterは便利だということがご理解いただけたと思います。 基本的に、誰でもAPI Gatewayのプロキシバックエンドとして機能するLambda関数にアタッチでき、このAPIのカウントを記録できます。
HitCounterはTypeScriptクラスであるため、npmモジュールをパッケージ化して、 JavaScriptパッケージマネージャーであるnpmjs.orgに公開できます。 公開後は誰でもnpm install でインストールでき、CDKアプリに追加できます。
現時点で用意しているハンズオンはコンテンツは以上です。おつかれさまでした。 cleanup sectionを参考に、リソースの削除を忘れないようにしましょう。</description></item></channel></rss>