<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>コンストラクトの作成 on AWS Cloud Development Kit (AWS CDK) Workshop</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter.html</link><description>Recent content in コンストラクトの作成 on AWS Cloud Development Kit (AWS CDK) Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/index.xml" rel="self" type="application/rss+xml"/><item><title>HitCounter APIの定義</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/100-api.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/100-api.html</guid><description>HitCounterコンストラクト用のファイルの作成 libフォルダ配下に次のようなhitcounter.tsファイルを作成します。
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as lambda from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export interface HitCounterProps { /** the function for which we want to count url hits **/ downstream: lambda.IFunction; } export class HitCounter extends Construct { constructor(scope: Construct, id: string, props: HitCounterProps) { super(scope, id); // TODO } } ファイルを保存すると、エラーが発生しますが心配いりません。 この後すぐに props プロパティを追加します。
コードの解説 HitCounterという名前のコンストラクトクラスを新しく定義しています。 今までどおり、scope, id, props のコンストラクター引数を設定し、基底クラスである cdk.Construct に伝搬させます。 propsは、lambda.</description></item><item><title>HitCounterハンドラー</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/200-handler.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/200-handler.html</guid><description>HitCounter Lambda ハンドラー HitCounterのLambdaハンドラーコードを記述しましょう。
lambda/hitcounter.jsを作成し、次のコードを追記してください。
const { DynamoDB, Lambda } = require(&amp;#39;aws-sdk&amp;#39;); exports.handler = async function(event) { console.log(&amp;#34;request:&amp;#34;, JSON.stringify(event, undefined, 2)); // create AWS SDK clients const dynamo = new DynamoDB(); const lambda = new Lambda(); // update dynamo entry for &amp;#34;path&amp;#34; with hits++ await dynamo.updateItem({ TableName: process.env.HITS_TABLE_NAME, Key: { path: { S: event.path } }, UpdateExpression: &amp;#39;ADD hits :incr&amp;#39;, ExpressionAttributeValues: { &amp;#39;:incr&amp;#39;: { N: &amp;#39;1&amp;#39; } } }).promise(); // call downstream function and capture response const resp = await lambda.</description></item><item><title>リソースの定義</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/300-resources.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/300-resources.html</guid><description>HitCounterコンストラクトにリソースを追加する 次に、Lambda関数とDynamoDBテーブルをHitCounterコンストラクトに定義します。
lib/hitcounter.ts に戻って、以下のコードを追記しましょう。
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as lambda from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import * as dynamodb from &amp;#39;aws-cdk-lib/aws-dynamodb&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export interface HitCounterProps { /** the function for which we want to count url hits **/ downstream: lambda.IFunction; } export class HitCounter extends Construct { /** allows accessing the counter function */ public readonly handler: lambda.Function; constructor(scope: Construct, id: string, props: HitCounterProps) { super(scope, id); const table = new dynamodb.</description></item><item><title>HitCounterの使用</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/400-use.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/400-use.html</guid><description>スタックにHitCounterを追加する HitCounterの準備ができましたのでアプリに実装していきましょう。 lib/cdk-workshop-stack.tsを開き、次の強調表示されたコードを追加します。
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as lambda from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import * as apigw from &amp;#39;aws-cdk-lib/aws-apigateway&amp;#39;; import { HitCounter } from &amp;#39;./hitcounter&amp;#39;; export class CdkWorkshopStack extends cdk.Stack { constructor(scope: cdk.App, id: string, props?: cdk.StackProps) { super(scope, id, props); const hello = new lambda.Function(this, &amp;#39;HelloHandler&amp;#39;, { runtime: lambda.Runtime.NODEJS_16_X, code: lambda.Code.fromAsset(&amp;#39;lambda&amp;#39;), handler: &amp;#39;hello.handler&amp;#39; }); const helloWithCounter = new HitCounter(this, &amp;#39;HelloHitCounter&amp;#39;, { downstream: hello }); // defines an API Gateway REST API resource backed by our &amp;#34;hello&amp;#34; function.</description></item><item><title>CloudWatch Logs</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/500-logs.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/500-logs.html</guid><description>Lambda関数のCloudWatchログを表示する まず始めに、Lambda関数に実装されているHitCounterのログを確認します。
SAM CLI やawslogs など、 これを行うのに役立つ多くのツールがあります。 このワークショップでは、AWSコンソールからログを見つける方法を紹介します。
AWS Lambdaコンソールを開きます （東京リージョンに接続されていることを確認してください）。
HitCounter Lambda関数をクリックします（名前にはCdkWorkshopStack-HelloHitCounterという文字列が含まれています)
モニタリング をクリックします。
CloudWatchのログを表示 をクリックします。これにより、AWS CloudWatchコンソールが開きます。
最新のロググループを選択します。
文字列「errorMessage」を含む最新のメッセージを探します。次のようなものが表示されるでしょう。
{ &amp;#34;errorType&amp;#34;: &amp;#34;AccessDeniedException&amp;#34;, &amp;#34;errorMessage&amp;#34;: &amp;#34;User: arn:aws:sts::123456789012:assumed-role/CdkWorkshopStack-HelloHitCounterHitCounterHandlerS-1234567890abc/CdkWorkshopStack-HelloHitCounterHitCounterHandlerD-1234567890ab is not authorized to perform: dynamodb:UpdateItem on resource: arn:aws:dynamodb:ap-northeast-1:123456789012:table/CdkWorkshopStack-HelloHitCounterHits7AAEBF80-1234567890123 because no identity-based policy allows the dynamodb:UpdateItem action&amp;#34;, &amp;#34;code&amp;#34;: &amp;#34;AccessDeniedException&amp;#34;, &amp;#34;message&amp;#34;: &amp;#34;User: arn:aws:sts::123456789012:assumed-role/CdkWorkshopStack-HelloHitCounterHitCounterHandlerS-1234567890abc/CdkWorkshopStack-HelloHitCounterHitCounterHandlerD-1234567890ab is not authorized to perform: dynamodb:UpdateItem on resource: arn:aws:dynamodb:ap-northeast-1:123456789012:table/CdkWorkshopStack-HelloHitCounterHits7AAEBF80-1234567890123 because no identity-based policy allows the dynamodb:UpdateItem action&amp;#34;, &amp;#34;time&amp;#34;: &amp;#34;2022-09-23T14:20:32.823Z&amp;#34;, &amp;#34;requestId&amp;#34;: &amp;#34;V46RBHC7KCRS2NRKP47NFLVQJBVV4KQNSO5AEMVJF66Q9ASUAAJG&amp;#34;, &amp;#34;statusCode&amp;#34;: 400, &amp;#34;retryable&amp;#34;: false, &amp;#34;retryDelay&amp;#34;: 30.</description></item><item><title>パーミッションの付与</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/600-permissions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/600-permissions.html</guid><description>LambdaがDynamoDBテーブルを読み書きできるようにする Lambdaの実行ロールに、DynamoDBテーブルの読み取り/書き込み権限を与えましょう。
hitcounter.tsに戻り、次の強調表示された行を追加します。
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as lambda from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import * as dynamodb from &amp;#39;aws-cdk-lib/aws-dynamodb&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export interface HitCounterProps { /** the function for which we want to count url hits **/ downstream: lambda.IFunction; } export class HitCounter extends Construct { /** allows accessing the counter function */ public readonly handler: lambda.Function; constructor(scope: Construct, id: string, props: HitCounterProps) { super(scope, id); const table = new dynamodb.</description></item><item><title>HitCounterのテスト</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/700-test.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/700-test.html</guid><description>テスト呼び出し いくつかのリクエストを実行して、HitCounterが機能するかどうかを確認しましょう。curlコマンド、またはWebブラウザから確認ができます。
curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world DynamoDBコンソールを開く DynamoDBコンソールに移動します。
テーブルを作成したリージョンにいることを確認してください。手順どおりであれば東京リージョンにいることを確認しましょう。
ナビゲーションペインから「テーブル」を選択し、CdkWorkShopStack-HelloHitCounterHitsで始まるテーブルを選択してください。
テーブルを開き、「テーブルアイテムの探索」を選択します。
各パスで取得したヒット数を確認します。
新しいパスでAPIを叩き、アイテムビューを更新してください。 hitsカウントが1の新しいアイテムが表示されます。
Good job! HitCounterは大変便利だということがご理解いただけたと思います。 基本的に、誰でもAPI Gatewayのプロキシバックエンドとして機能するLambda関数にアタッチでき、このAPIのカウントを記録できます。
HitCounterはシンプルなJavaScriptクラスであるため、npmモジュールをパッケージ化して、 JavaScriptパッケージマネージャーであるnpmjs.orgに公開できます。 公開後は誰でもnpm install でインストールでき、CDKアプリに追加できます。
現時点で用意しているハンズオンはコンテンツは以上です。おつかれさまでした。</description></item></channel></rss>