<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hello, CDK! on AWS Cloud Development Kit (AWS CDK) Workshop</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk.html</link><description>Recent content in Hello, CDK! on AWS Cloud Development Kit (AWS CDK) Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/index.xml" rel="self" type="application/rss+xml"/><item><title>サンプルコードの削除</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/100-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/100-cleanup.html</guid><description>Delete the sample code from your stack The project created by cdk init sample-app includes an SQS queue, and an SNS topic. We&amp;rsquo;re not going to use them in our project, so remove them from your the CdkWorkshopStack constructor.
Open lib/cdk-workshop-stack.ts and clean it up. Eventually it should look like this:
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; export class CdkWorkshopStack extends cdk.Stack { constructor(scope: cdk.App, id: string, props?: cdk.StackProps) { super(scope, id, props); // nothing here!</description></item><item><title>Hello Lambda</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/200-lambda.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/200-lambda.html</guid><description>Lambda handler code We&amp;rsquo;ll start with the AWS Lambda handler code.
Create a directory lambda in the root of your project tree (next to bin and lib). TS CDK projects created with cdk init ignore all .js files by default. To track these files with git, add !lambda/*.js to your .gitignore file. This ensures that your Lambda assets are discoverable during the Pipelines section of this tutorial. Add a file called lambda/hello.</description></item><item><title>CDK Watch</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/300-cdk-watch.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/300-cdk-watch.html</guid><description>より高速なデプロイ このセクションはワークショップを完了するために必要ではありませんが、 cdk deploy --hotswap と cdk watch がどのようにデプロイを高速化するのか見てみましょう。
lambdaが動作するようになりましたね！ しかし、もしlambdaのコードを微調整して正しく動作させたい場合はどうしたらよいでしょうか？ 例えば、lambda関数を「Hello, CDK」ではなく「Good Morning, CDK!」と応答させることに決めたとしましょう。
今のところ、スタックを更新するために使えるツールは cdk deploy しかないように思えます。 しかし、cdk deployには時間がかかります。 CloudFormationスタックをデプロイして、lambdaディレクトリをbootstrapバケットにアップロードしなければならないからです。 lambdaのコードを変更するだけならCloudFormationスタックを更新する必要はないので、cdk deployの部分は無駄な労力となります。
本当に必要なのは、lambdaコードの更新だけなのです。 それだけを行うための他のメカニズムがあれば最高なのですが&amp;hellip;。
cdk deploy にかかる時間を測ってみる まず、cdk deployを実行するのにかかる時間を計ってみましょう。 これは、CloudFormationのフルデプロイにどれくらい時間がかかるかの基準値になります。 そのために、lambda/hello.js 内のコードを変更します。
exports.handler = async function(event) { console.log(&amp;#34;request:&amp;#34;, JSON.stringify(event, undefined, 2)); return { statusCode: 200, headers: { &amp;#34;Content-Type&amp;#34;: &amp;#34;text/plain&amp;#34; }, body: `Good Morning, CDK! You&amp;#39;ve hit ${event.path}\n` }; }; 変更が cdk deploy を実行してみましょう。
cdk deploy 出力は次のようになります。
✨ Synthesis time: 6s CdkWorkshopStack: deploying.</description></item><item><title>API Gateway</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/400-apigw.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/400-apigw.html</guid><description>次のステップでは、API Gatewayを関数の前に追加していきます。 API GatewayはパブリックHTTPエンドポイントを公開します。このエンドポイントは、インターネット上の誰もが curlやウェブブラウザのようなHTTPクライアントでヒットできます。
API Gatewayのルートには、 Lambda proxy integrationを利用します。 つまり、どのURLパスへのリクエストも、直接Lambda関数にプロキシされ、関数からのレスポンスがユーザーに返されることになります。
LambdaRestApi コンストラクトを追加する lib/cdk-workshop-stack.ts に戻り、APIエンドポイントを定義してLambda関数に関連付けましょう。
import { Stack, StackProps } from &amp;#39;aws-cdk-lib&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; import * as lambda from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39; import * as apigw from &amp;#39;aws-cdk-lib/aws-apigateway&amp;#39;; export class CdkWorkshopStack extends Stack { constructor(scope: Construct, id: string, props?: StackProps) { super(scope, id, props); // defines an AWS Lambda resource const hello = new lambda.Function(this, &amp;#39;HelloHandler&amp;#39;, { runtime: lambda.</description></item></channel></rss>