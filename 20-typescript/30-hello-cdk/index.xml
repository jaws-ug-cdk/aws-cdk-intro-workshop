<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hello, CDK! on AWS Cloud Development Kit (AWS CDK) Workshop</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk.html</link><description>Recent content in Hello, CDK! on AWS Cloud Development Kit (AWS CDK) Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/index.xml" rel="self" type="application/rss+xml"/><item><title>Cleanup sample</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/100-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/100-cleanup.html</guid><description>Delete the sample code from your stack The project created by cdk init sample-app includes an SQS queue, and an SNS topic. We&amp;rsquo;re not going to use them in our project, so remove them from your the CdkWorkshopStack constructor.
Open lib/cdk-workshop-stack.ts and clean it up. Eventually it should look like this:
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; export class CdkWorkshopStack extends cdk.Stack { constructor(scope: cdk.App, id: string, props?: cdk.StackProps) { super(scope, id, props); // nothing here!</description></item><item><title>Hello Lambda</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/200-lambda.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/200-lambda.html</guid><description>Lambda handler code We&amp;rsquo;ll start with the AWS Lambda handler code.
Create a directory lambda in the root of your project tree (next to bin and lib). TS CDK projects created with cdk init ignore all .js files by default. To track these files with git, add !lambda/*.js to your .gitignore file. This ensures that your Lambda assets are discoverable during the Pipelines section of this tutorial. Add a file called lambda/hello.</description></item><item><title>CDK Watch</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/300-cdk-watch.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/300-cdk-watch.html</guid><description>Faster personal deployments This section is not necessary to complete the workshop, but we recommend that you take the time to see how cdk deploy --hotswap and cdk watch can speed up your personal deployments.
It&amp;rsquo;s great that we have a working lambda! But what if we want to tweak the lambda code to get it just right? Let&amp;rsquo;s say that we have now decided that we want our lambda function to respond with &amp;quot;Good Morning, CDK!</description></item><item><title>API Gateway</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/400-apigw.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/400-apigw.html</guid><description>Next step is to add an API Gateway in front of our function. API Gateway will expose a public HTTP endpoint that anyone on the internet can hit with an HTTP client such as curl or a web browser.
We will use Lambda proxy integration mounted to the root of the API. This means that any request to any URL path will be proxied directly to our Lambda function, and the response from the function will be returned back to the user.</description></item></channel></rss>