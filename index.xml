<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AWS CDK Intro Workshop on AWS Cloud Development Kit (AWS CDK) Workshop</title><link>https://cdkworkshop.com/</link><description>Recent content in AWS CDK Intro Workshop on AWS Cloud Development Kit (AWS CDK) Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://cdkworkshop.com/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS CLI</title><link>https://cdkworkshop.com/15-prerequisites/100-awscli.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/15-prerequisites/100-awscli.html</guid><description>The AWS CLI allows you to interact with AWS services from a terminal session. Make sure you have the latest version of the AWS CLI installed on your system.
Windows: MSI installer Linux, macOS or Unix: Bundled installer See the AWS Command Line Interface installation page for more details.</description></item><item><title>cdk init</title><link>https://cdkworkshop.com/20-typescript/20-create-project/100-cdk-init.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/20-create-project/100-cdk-init.html</guid><description>Create project directory Create an empty directory on your system:
mkdir cdk-workshop &amp;amp;&amp;amp; cd cdk-workshop cdk init We will use cdk init to create a new TypeScript CDK project:
cdk init sample-app --language typescript Output should look like this (you can safely ignore warnings about initialization of a git repository, this probably means you don&amp;rsquo;t have git installed, which is fine for this workshop):
Applying project template app for typescript Initializing a new git repository.</description></item><item><title>cdk init</title><link>https://cdkworkshop.com/30-python/20-create-project/100-cdk-init.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/20-create-project/100-cdk-init.html</guid><description>Create project directory Create an empty directory on your system:
mkdir cdk_workshop &amp;amp;&amp;amp; cd cdk_workshop cdk init We will use cdk init to create a new Python CDK project:
cdk init sample-app --language python Output should look like this (you can safely ignore warnings about initialization of a git repository, this probably means you don&amp;rsquo;t have git installed, which is fine for this workshop):
Applying project template sample-app for python Initializing a new git repository.</description></item><item><title>cdk init</title><link>https://cdkworkshop.com/40-dotnet/20-create-project/100-cdk-init.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/20-create-project/100-cdk-init.html</guid><description>Create project directory Create an empty directory on your system:
mkdir cdk-workshop &amp;amp;&amp;amp; cd cdk-workshop cdk init We will use cdk init to create a new C# CDK project:
cdk init sample-app --language csharp Output should look like this (you can safely ignore warnings about initialization of a git repository, this probably means you don&amp;rsquo;t have git installed, which is fine for this workshop):
Applying project template sample-app for csharp Project &amp;#39;CdkWorkshop/CdkWorkshop.</description></item><item><title>cdk init</title><link>https://cdkworkshop.com/50-java/20-create-project/100-cdk-init.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/20-create-project/100-cdk-init.html</guid><description>Create project directory Create an empty directory on your system:
mkdir cdk-workshop &amp;amp;&amp;amp; cd cdk-workshop cdk init We will use cdk init to create a new Java CDK project:
cdk init sample-app --language java Output should look like this (you can safely ignore warnings about initialization of a git repository, this probably means you don&amp;rsquo;t have git installed, which is fine for this workshop):
Applying project template sample-app for java # Welcome to your CDK Java project!</description></item><item><title>Cleanup sample</title><link>https://cdkworkshop.com/20-typescript/30-hello-cdk/100-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/30-hello-cdk/100-cleanup.html</guid><description>Delete the sample code from your stack The project created by cdk init sample-app includes an SQS queue, and an SNS topic. We&amp;rsquo;re not going to use them in our project, so remove them from your the CdkWorkshopStack constructor.
Open lib/cdk-workshop-stack.ts and clean it up. Eventually it should look like this:
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; export class CdkWorkshopStack extends cdk.Stack { constructor(scope: cdk.App, id: string, props?: cdk.StackProps) { super(scope, id, props); // nothing here!</description></item><item><title>Cleanup sample</title><link>https://cdkworkshop.com/30-python/30-hello-cdk/100-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/30-hello-cdk/100-cleanup.html</guid><description>Delete the sample code from your stack The project created by cdk init sample-app includes an SQS queue and queue policy, an SNS topic and subscription. We&amp;rsquo;re not going to use them in our project, so remove them from the CdkWorkshopStack constructor.
Open cdk_workshop/cdk_workshop_stack.py and clean it up. Eventually it should look like this:
from constructs import Construct from aws_cdk import ( Stack, ) class CdkWorkshopStack(Stack): def __init__(self, scope: Construct, id: str, **kwargs) -&amp;gt; None: super().</description></item><item><title>Cleanup sample</title><link>https://cdkworkshop.com/40-dotnet/30-hello-cdk/100-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/30-hello-cdk/100-cleanup.html</guid><description>Delete the sample code from your stack The project created by cdk init sample-app includes an SQS queue, and an SNS topic. We&amp;rsquo;re not going to use them in our project, so remove them from the CdkWorkshopStack constructor.
Open src/CdkWorkshop/CdkWorkshopStack.cs and clean it up. Eventually it should look like this:
using Amazon.CDK; using Constructs; namespace CdkWorkshop { public class CdkWorkshopStack : Stack { public CdkWorkshopStack(Construct scope, string id, IStackProps props = null) : base(scope, id, props) { // Nothing here!</description></item><item><title>Cleanup sample</title><link>https://cdkworkshop.com/50-java/30-hello-cdk/100-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/30-hello-cdk/100-cleanup.html</guid><description>Delete the sample code from your stack The project created by cdk init sample-app includes an SQS queue, and an SNS topic. We&amp;rsquo;re not going to use them in our project, so remove them from your the CdkWorkshopStack constructor.
Open ~/CdkWorkshopStack.java and clean it up. Eventually it should look like this:
package com.myorg; import software.constructs.Construct; import software.amazon.awscdk.Stack; import software.amazon.awscdk.StackProps; public class CdkWorkshopStack extends Stack { public CdkWorkshopStack(final Construct parent, final String id) { this(parent, id, null); } public CdkWorkshopStack(final Construct parent, final String id, final StackProps props) { super(parent, id, props); // Nothing here!</description></item><item><title>Define the HitCounter API</title><link>https://cdkworkshop.com/20-typescript/40-hit-counter/100-api.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/40-hit-counter/100-api.html</guid><description>Create a new file for our hit counter construct Create a new file under lib called hitcounter.ts with the following content:
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as lambda from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export interface HitCounterProps { /** the function for which we want to count url hits **/ downstream: lambda.IFunction; } export class HitCounter extends Construct { constructor(scope: Construct, id: string, props: HitCounterProps) { super(scope, id); // TODO } } Save the file.</description></item><item><title>Define the HitCounter API</title><link>https://cdkworkshop.com/30-python/40-hit-counter/100-api.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/40-hit-counter/100-api.html</guid><description>Create a new file for our hit counter construct Create a new file under cdk_workshop called hitcounter.py with the following content:
from constructs import Construct from aws_cdk import ( aws_lambda as _lambda, ) class HitCounter(Construct): def __init__(self, scope: Construct, id: str, downstream: _lambda.IFunction, **kwargs): super().__init__(scope, id, **kwargs) # TODO Save the file.
What&amp;rsquo;s going on here? We declared a new construct class called HitCounter. As usual, constructor arguments are scope, id and kwargs, and we propagate them to the cdk.</description></item><item><title>Define the HitCounter API</title><link>https://cdkworkshop.com/40-dotnet/40-hit-counter/100-api.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/40-hit-counter/100-api.html</guid><description>Create a new file for our hit counter construct Create a new file under src/CdkWorkshop called HitCounter.cs with the following content:
using Amazon.CDK; using Amazon.CDK.AWS.Lambda; using Constructs; namespace CdkWorkshop { public class HitCounterProps { // The function for which we want to count url hits public IFunction Downstream { get; set; } } public class HitCounter : Construct { public HitCounter(Construct scope, string id, HitCounterProps props) : base(scope, id) { // TODO } } } Save the file.</description></item><item><title>Define the HitCounter API</title><link>https://cdkworkshop.com/50-java/40-hit-counter/100-api.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/40-hit-counter/100-api.html</guid><description>Create a new file for our hit counter construct Create two new files under src/main/java/com/myorg called HitCounterProps.java with the following content:
package com.myorg; import software.amazon.awscdk.services.lambda.IFunction; public interface HitCounterProps { // Public constructor for the props builder public static Builder builder() { return new Builder(); } // The function for which we want to count url hits IFunction getDownstream(); // The builder for the props interface public static class Builder { private IFunction downstream; public Builder downstream(final IFunction function) { this.</description></item><item><title>Hit counter handler</title><link>https://cdkworkshop.com/20-typescript/40-hit-counter/200-handler.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/40-hit-counter/200-handler.html</guid><description>Hit counter Lambda handler Okay, now let&amp;rsquo;s write the Lambda handler code for our hit counter.
Create the file lambda/hitcounter.js:
const { DynamoDB, Lambda } = require(&amp;#39;aws-sdk&amp;#39;); exports.handler = async function(event) { console.log(&amp;#34;request:&amp;#34;, JSON.stringify(event, undefined, 2)); // create AWS SDK clients const dynamo = new DynamoDB(); const lambda = new Lambda(); // update dynamo entry for &amp;#34;path&amp;#34; with hits++ await dynamo.updateItem({ TableName: process.env.HITS_TABLE_NAME, Key: { path: { S: event.path } }, UpdateExpression: &amp;#39;ADD hits :incr&amp;#39;, ExpressionAttributeValues: { &amp;#39;:incr&amp;#39;: { N: &amp;#39;1&amp;#39; } } }).</description></item><item><title>Hit counter handler</title><link>https://cdkworkshop.com/30-python/40-hit-counter/200-handler.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/40-hit-counter/200-handler.html</guid><description>Hit counter Lambda handler Okay, now let&amp;rsquo;s write the Lambda handler code for our hit counter.
Create the file lambda/hitcount.py:
import json import os import boto3 ddb = boto3.resource(&amp;#39;dynamodb&amp;#39;) table = ddb.Table(os.environ[&amp;#39;HITS_TABLE_NAME&amp;#39;]) _lambda = boto3.client(&amp;#39;lambda&amp;#39;) def handler(event, context): print(&amp;#39;request: {}&amp;#39;.format(json.dumps(event))) table.update_item( Key={&amp;#39;path&amp;#39;: event[&amp;#39;path&amp;#39;]}, UpdateExpression=&amp;#39;ADD hits :incr&amp;#39;, ExpressionAttributeValues={&amp;#39;:incr&amp;#39;: 1} ) resp = _lambda.invoke( FunctionName=os.environ[&amp;#39;DOWNSTREAM_FUNCTION_NAME&amp;#39;], Payload=json.dumps(event), ) body = resp[&amp;#39;Payload&amp;#39;].read() print(&amp;#39;downstream response: {}&amp;#39;.format(body)) return json.loads(body) Discovering resources at runtime You&amp;rsquo;ll notice that this code relies on two environment variables:</description></item><item><title>Hit counter handler</title><link>https://cdkworkshop.com/40-dotnet/40-hit-counter/200-handler.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/40-hit-counter/200-handler.html</guid><description>Hit counter Lambda handler Okay, now let&amp;rsquo;s write the Lambda handler code for our hit counter.
Create the file lambda/hitcounter.js:
const { DynamoDB, Lambda } = require(&amp;#39;aws-sdk&amp;#39;); exports.handler = async function(event) { console.log(&amp;#34;request:&amp;#34;, JSON.stringify(event, undefined, 2)); // create AWS SDK clients const dynamo = new DynamoDB(); const lambda = new Lambda(); // update dynamo entry for &amp;#34;path&amp;#34; with hits++ await dynamo.updateItem({ TableName: process.env.HITS_TABLE_NAME, Key: { path: { S: event.path } }, UpdateExpression: &amp;#39;ADD hits :incr&amp;#39;, ExpressionAttributeValues: { &amp;#39;:incr&amp;#39;: { N: &amp;#39;1&amp;#39; } } }).</description></item><item><title>Hit counter handler</title><link>https://cdkworkshop.com/50-java/40-hit-counter/200-handler.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/40-hit-counter/200-handler.html</guid><description>Hit counter Lambda handler Okay, now let&amp;rsquo;s write the Lambda handler code for our hit counter.
Create the file lambda/hitcounter.js:
const { DynamoDB, Lambda } = require(&amp;#39;aws-sdk&amp;#39;); exports.handler = async function(event) { console.log(&amp;#34;request:&amp;#34;, JSON.stringify(event, undefined, 2)); // create AWS SDK clients const dynamo = new DynamoDB(); const lambda = new Lambda(); // update dynamo entry for &amp;#34;path&amp;#34; with hits++ await dynamo.updateItem({ TableName: process.env.HITS_TABLE_NAME, Key: { path: { S: event.path } }, UpdateExpression: &amp;#39;ADD hits :incr&amp;#39;, ExpressionAttributeValues: { &amp;#39;:incr&amp;#39;: { N: &amp;#39;1&amp;#39; } } }).</description></item><item><title>Learning about the Table Viewer construct</title><link>https://cdkworkshop.com/20-typescript/50-table-viewer/100-discovery.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/50-table-viewer/100-discovery.html</guid><description>Reading documentation Browse to the cdk-dynamo-table-viewer page on npmjs.org and read the module documentation.
As mentioned in the README page of this library, it is not intended for production use. Namely because it will expose contents from your DynamoDB table to anyone without authentication.</description></item><item><title>Learning about the Table Viewer construct</title><link>https://cdkworkshop.com/30-python/50-table-viewer/100-discovery.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/50-table-viewer/100-discovery.html</guid><description>Reading documentation Browse to the cdk-dynamo-table-view page on pypi.org and read the module documentation.
There is some documentation about how to use the table viewer in the README but it is all focused on TypeScript rather than Python. So, we will walk through the process of using a third-party construct in Python.
As mentioned in the README page of this library, it is not intended for production use. Namely because it will expose contents from your DynamoDB table to anyone without authentication.</description></item><item><title>Learning about the Table Viewer construct</title><link>https://cdkworkshop.com/40-dotnet/50-table-viewer/100-discovery.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/50-table-viewer/100-discovery.html</guid><description>Reading documentation Browse to the DynamoTableViewer page on github and read the module documentation.
As mentioned in the README page of this library, it is not intended for production use. Namely because it will expose contents from your DynamoDB table to anyone without authentication.</description></item><item><title>Learning about the Table Viewer construct</title><link>https://cdkworkshop.com/50-java/50-table-viewer/100-discovery.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/50-table-viewer/100-discovery.html</guid><description>Reading documentation Browse to the cdk-dynamo-table-viewer page on Github if you want to read the module documentation.
As mentioned in the README page of this library, it is not intended for production use. Namely because it will expose contents from your DynamoDB table to anyone without authentication.</description></item><item><title>Getting Started with Pipelines</title><link>https://cdkworkshop.com/20-typescript/70-advanced-topics/200-pipelines/1000-setting-up.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/70-advanced-topics/200-pipelines/1000-setting-up.html</guid><description>Note: This segment of the workshop assumes you have completed the previous sections of the workshop. If you have not, and just want to follow this segment, or you are returning to try this workshop, you can use the code here that represents the last state of the project after adding the tests.
Create Pipeline Stack The first step is to create the stack that will contain our pipeline. Since this is separate from our actual &amp;ldquo;production&amp;rdquo; application, we want this to be entirely self-contained.</description></item><item><title>Getting Started with Pipelines</title><link>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/1000-setting-up.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/1000-setting-up.html</guid><description>Note: This segment of the workshop assumes you have completed the previous sections of the workshop. If you have not, and just want to follow this segment, or you are returning to try this workshop, you can use the code here that represents the last state of the project after adding the tests.
Create Pipeline Stack The first step is to create the stack that will contain our pipeline. Since this is separate from our actual &amp;ldquo;production&amp;rdquo; application, we want this to be entirely self-contained.</description></item><item><title>Getting Started with Pipelines</title><link>https://cdkworkshop.com/40-dotnet/70-advanced-topics/100-pipelines/1000-setting-up.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/70-advanced-topics/100-pipelines/1000-setting-up.html</guid><description>Note: This segment of the workshop assumes you have completed the previous sections of the workshop. If you have not, and just want to follow this segment, or you are returning to try this workshop, you can use the code here that represents the last state of the project after adding the tests.
Create Pipeline Stack The first step is to create the stack that will contain our pipeline. Since this is separate from our actual &amp;ldquo;production&amp;rdquo; application, we want this to be entirely self-contained.</description></item><item><title>Getting Started with Pipelines</title><link>https://cdkworkshop.com/50-java/70-advanced-topics/100-pipelines/1000-setting-up.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/70-advanced-topics/100-pipelines/1000-setting-up.html</guid><description>Note: This segment of the workshop assumes you have completed the previous sections of the workshop. If you have not, and just want to follow this segment, or you are returning to try this workshop, you can use the code here that represents the last state of the project after adding the tests.
Create Pipeline Stack The first step is to create the stack that will contain our pipeline. Since this is separate from our actual &amp;ldquo;production&amp;rdquo; application, we want this to be entirely self-contained.</description></item><item><title>Create Repository</title><link>https://cdkworkshop.com/20-typescript/70-advanced-topics/200-pipelines/2000-create-repo.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/70-advanced-topics/200-pipelines/2000-create-repo.html</guid><description>Create Repo in Pipeline Stack The first step in any good CD pipeline is source control. Here we will create a CodeCommit repository to contain our project code.
Edit the file lib/pipeline-stack.ts as follows.
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as codecommit from &amp;#39;aws-cdk-lib/aws-codecommit&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export class WorkshopPipelineStack extends cdk.Stack { constructor(scope: Construct, id: string, props?: cdk.StackProps) { super(scope, id, props); // Creates a CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; new codecommit.</description></item><item><title>Create Repository</title><link>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/2000-create-repo.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/2000-create-repo.html</guid><description>Create Repo in Pipeline Stack The first step in any good CD pipeline is source control. Here we will create a CodeCommit repository to contain our project code.
Edit the file cdk_workshop/pipeline_stack.py as follows.
from constructs import Construct from aws_cdk import ( Stack, aws_codecommit as codecommit, ) class WorkshopPipelineStack(Stack): def __init__(self, scope: Construct, id: str, **kwargs) -&amp;gt; None: super().__init__(scope, id, **kwargs) # Creates a CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; repo = codecommit.</description></item><item><title>Create Repository</title><link>https://cdkworkshop.com/40-dotnet/70-advanced-topics/100-pipelines/2000-create-repo.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/70-advanced-topics/100-pipelines/2000-create-repo.html</guid><description>Create Repo in Pipeline Stack The first step in any good CD pipeline is source control. Here we will create a CodeCommit repository to contain our project code.
Edit the file CdkWorkshop/PipelineStack.cs as follows.
using Amazon.CDK; using Amazon.CDK.AWS.CodeCommit; using Constructs namespace CdkWorkshop { public class WorkshopPipelineStack : Stack { public WorkshopPipelineStack(Construct parent, string id, IStackProps props = null) : base(parent, id, props) { // Creates a CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; var repo = new Repository(this, &amp;#34;WorkshopRepo&amp;#34;, new RepositoryProps { RepositoryName = &amp;#34;WorkshopRepo&amp;#34; }); // Pipeline code goes here } } } Deploy Now we can deploy the app to see our new repo.</description></item><item><title>Create Repository</title><link>https://cdkworkshop.com/50-java/70-advanced-topics/100-pipelines/2000-create-repo.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/70-advanced-topics/100-pipelines/2000-create-repo.html</guid><description>Create Repo in Pipeline Stack The first step in any good CD pipeline is source control. Here we will create a CodeCommit repository to contain our project code.
Edit the file WorkshopPipelineStack.java as follows.
package com.myorg; import software.constructs.Construct; import software.amazon.awscdk.Stack; import software.amazon.awscdk.StackProps; import software.amazon.awscdk.services.codecommit.Repository; public class WorkshopPipelineStack extends Stack { public WorkshopPipelineStack(final Construct parent, final String id) { this(parent, id, null); } public WorkshopPipelineStack(final Construct parent, final String id, final StackProps props) { super(parent, id, props); // This creates a new CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; final Repository repo = Repository.</description></item><item><title>Create New Pipeline</title><link>https://cdkworkshop.com/20-typescript/70-advanced-topics/200-pipelines/3000-new-pipeline.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/70-advanced-topics/200-pipelines/3000-new-pipeline.html</guid><description>Define an Empty Pipeline Now we are ready to define the basics of the pipeline.
Return to the file lib/pipeline-stack.ts and edit as follows:
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as codecommit from &amp;#39;aws-cdk-lib/aws-codecommit&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; import {CodeBuildStep, CodePipeline, CodePipelineSource} from &amp;#34;aws-cdk-lib/pipelines&amp;#34;; export class WorkshopPipelineStack extends cdk.Stack { constructor(scope: Construct, id: string, props?: cdk.StackProps) { super(scope, id, props); // This creates a new CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; const repo = new codecommit.</description></item><item><title>Create New Pipeline</title><link>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/3000-new-pipeline.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/3000-new-pipeline.html</guid><description>Define an Empty Pipeline Now we are ready to define the basics of the pipeline.
Return to the file pipeline_stack.py and edit as follows:
from constructs import Construct from aws_cdk import ( Stack, aws_codecommit as codecommit, pipelines as pipelines, ) class WorkshopPipelineStack(Stack): def __init__(self, scope: Construct, id: str, **kwargs) -&amp;gt; None: super().__init__(scope, id, **kwargs) # Creates a CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; repo = codecommit.Repository( self, &amp;#34;WorkshopRepo&amp;#34;, repository_name=&amp;#34;WorkshopRepo&amp;#34; ) pipeline = pipelines.</description></item><item><title>Create New Pipeline</title><link>https://cdkworkshop.com/40-dotnet/70-advanced-topics/100-pipelines/3000-new-pipeline.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/70-advanced-topics/100-pipelines/3000-new-pipeline.html</guid><description>Define an Empty Pipeline Now we are ready to define the basics of the pipeline.
Return to the file CdkWorkshop/PipelineStack.cs and edit as follows:
using Amazon.CDK; using Amazon.CDK.AWS.CodeCommit; using Amazon.CDK.AWS.CodePipeline; using Amazon.CDK.AWS.CodePipeline.Actions; using Amazon.CDK.Pipelines; using Constructs; namespace CdkWorkshop { public class WorkshopPipelineStack : Stack { public WorkshopPipelineStack(Construct parent, string id, IStackProps props = null) : base(parent, id, props) { // Creates a CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; var repo = new Repository(this, &amp;#34;WorkshopRepo&amp;#34;, new RepositoryProps { RepositoryName = &amp;#34;WorkshopRepo&amp;#34; }); // The basic pipeline declaration.</description></item><item><title>Create New Pipeline</title><link>https://cdkworkshop.com/50-java/70-advanced-topics/100-pipelines/3000-new-pipeline.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/70-advanced-topics/100-pipelines/3000-new-pipeline.html</guid><description>Define an Empty Pipeline Now we are ready to define the basics of the pipeline.
Return to the file WorkshopPipelineStack.java and edit as follows:
package com.myorg; import java.util.List; import java.util.Map; import software.constructs.Construct; import software.amazon.awscdk.Stack; import software.amazon.awscdk.StackProps; import software.amazon.awscdk.pipelines.CodeBuildStep; import software.amazon.awscdk.pipelines.CodePipeline; import software.amazon.awscdk.pipelines.CodePipelineSource; import software.amazon.awscdk.services.codecommit.Repository; import software.amazon.awscdk.services.codepipeline.actions.CodeCommitSourceAction; public class WorkshopPipelineStack extends Stack { public WorkshopPipelineStack(final Construct parent, final String id) { this(parent, id, null); } public WorkshopPipelineStack(final Construct parent, final String id, final StackProps props) { super(parent, id, props); // This creates a new CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; final Repository repo = Repository.</description></item><item><title>Add Application to Pipeline</title><link>https://cdkworkshop.com/20-typescript/70-advanced-topics/200-pipelines/4000-build-stage.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/70-advanced-topics/200-pipelines/4000-build-stage.html</guid><description>Create Stage At this point, you have a fully operating CDK pipeline that will automatically update itself on every commit, BUT at the moment, that is all it does. We need to add a stage to the pipeline that will deploy our application.
Create a new file in lib called pipeline-stage.ts with the code below:
import { CdkWorkshopStack } from &amp;#39;./cdk-workshop-stack&amp;#39;; import { Stage, StageProps } from &amp;#39;aws-cdk-lib&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export class WorkshopPipelineStage extends Stage { constructor(scope: Construct, id: string, props?</description></item><item><title>Add Application to Pipeline</title><link>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/4000-build-stage.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/4000-build-stage.html</guid><description>Create Stage At this point, you have a fully operating CDK pipeline that will automatically update itself on every commit, BUT at the moment, that is all it does. We need to add a stage to the pipeline that will deploy our application.
Create a new file in cdk_workshop called pipeline_stage.py with the code below:
from constructs import Construct from aws_cdk import ( Stage ) from .cdk_workshop_stack import CdkWorkshopStack class WorkshopPipelineStage(Stage): def __init__(self, scope: Construct, id: str, **kwargs): super().</description></item><item><title>Add Application to Pipeline</title><link>https://cdkworkshop.com/40-dotnet/70-advanced-topics/100-pipelines/4000-build-stage.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/70-advanced-topics/100-pipelines/4000-build-stage.html</guid><description>Create Stage At this point, you have a fully operating CDK pipeline that will automatically update itself on every commit, BUT at the moment, that is all it does. We need to add a stage to the pipeline that will deploy our application.
Create a new file in CdkWorkshop called PipelineStage.cs with the code below:
using Amazon.CDK; using Amazon.CDK.Pipelines; using Constructs; namespace CdkWorkshop { public class WorkshopPipelineStage : Stage { public WorkshopPipelineStage(Construct scope, string id, StageProps props = null) : base(scope, id, props) { var service = new CdkWorkshopStack(this, &amp;#34;WebService&amp;#34;); } } } All this does is declare a new Stage (component of a pipeline), and in that stage instantiate our application stack.</description></item><item><title>Add Application to Pipeline</title><link>https://cdkworkshop.com/50-java/70-advanced-topics/100-pipelines/4000-build-stage.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/70-advanced-topics/100-pipelines/4000-build-stage.html</guid><description>Create Stage At this point, you have a fully operating CodePipeline that will automatically update itself on every commit, BUT at the moment, that is all it does. We need to add a stage to the pipeline that will deploy our application.
Create a new file in CdkWorkshop called WorkshopPipelineStage.java with the code below:
package com.myorg; import software.amazon.awscdk.Stage; import software.constructs.Construct; import software.amazon.awscdk.StageProps; public class WorkshopPipelineStage extends Stage { public WorkshopPipelineStage(final Construct scope, final String id) { this(scope, id, null); } public WorkshopPipelineStage(final Construct scope, final String id, final StageProps props) { super(scope, id, props); new CdkWorkshopStack(this, &amp;#34;WebService&amp;#34;); } } All this does is declare a new Stage (component of a pipeline), and in that stage instantiate our application stack.</description></item><item><title>Polish Pipeline</title><link>https://cdkworkshop.com/20-typescript/70-advanced-topics/200-pipelines/5000-test-actions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/70-advanced-topics/200-pipelines/5000-test-actions.html</guid><description>Get Endpoints Stepping back, we can see a problem now that our app is being deployed by our pipeline. There is no easy way to find the endpoints of our application (the TableViewer and APIGateway endpoints), so we can&amp;rsquo;t call it! Let&amp;rsquo;s add a little bit of code to expose these more obviously.
First edit lib/cdk-workshop-stack.ts to get these values and expose them as properties of our stack:
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as lambda from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import * as apigw from &amp;#39;aws-cdk-lib/aws-apigateway&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; import { HitCounter } from &amp;#39;.</description></item><item><title>Polish Pipeline</title><link>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/5000-test-actions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/5000-test-actions.html</guid><description>Get Endpoints Stepping back, we can see a problem now that our app is being deployed by our pipeline. There is no easy way to find the endpoints of our application (the TableViewer and LambdaRestApi endpoints), so we can&amp;rsquo;t call it! Let&amp;rsquo;s add a little bit of code to expose these more obviously.
First edit cdk_workshop/cdk_workshop_stack.py to get these values and expose them as properties of our stack:
from constructs import Construct from aws_cdk import ( Stack, CfnOutput, aws_lambda as _lambda, aws_apigateway as apigw, ) from cdk_dynamo_table_view import TableViewer from .</description></item><item><title>Polish Pipeline</title><link>https://cdkworkshop.com/40-dotnet/70-advanced-topics/100-pipelines/5000-test-actions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/70-advanced-topics/100-pipelines/5000-test-actions.html</guid><description>Get Endpoints Stepping back, we can see a problem now that our app is being deployed by our pipeline. There is no easy way to find the endpoints of our application (the TableViewer and APIGateway endpoints), so we can&amp;rsquo;t call it! Let&amp;rsquo;s add a little bit of code to expose these more obviously.
First edit CdkWorkshop/CdkWorkshopStack.cs to get these values and expose them as properties of our stack:
using Amazon.CDK; using Amazon.</description></item><item><title>Polish Pipeline</title><link>https://cdkworkshop.com/50-java/70-advanced-topics/100-pipelines/5000-test-actions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/70-advanced-topics/100-pipelines/5000-test-actions.html</guid><description>Get Endpoints Stepping back, we can see a problem now that our app is being deployed by our pipeline. There is no easy way to find the endpoints of our application (the TableViewer and APIGateway endpoints), so we can&amp;rsquo;t call it! Let&amp;rsquo;s add a little bit of code to expose these more obviously.
First edit CdkWorkshopStack.java to get these values and expose them as properties of our stack:
package com.myorg; import io.</description></item><item><title>Cleanup</title><link>https://cdkworkshop.com/20-typescript/70-advanced-topics/200-pipelines/6000-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/70-advanced-topics/200-pipelines/6000-cleanup.html</guid><description>To clean up the stacks from this workshop, navigate to the Cloudformation Console, select your stacks, and hit &amp;ldquo;Delete&amp;rdquo;. This may take some time.</description></item><item><title>Cleanup</title><link>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/6000-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/6000-cleanup.html</guid><description>To clean up the stacks from this workshop, navigate to the Cloudformation Console, select your stacks, and hit &amp;ldquo;Delete&amp;rdquo;. This may take some time.</description></item><item><title>Cleanup</title><link>https://cdkworkshop.com/40-dotnet/70-advanced-topics/100-pipelines/6000-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/70-advanced-topics/100-pipelines/6000-cleanup.html</guid><description>To clean up the stacks from this workshop, navigate to the Cloudformation Console, select your stacks, and hit &amp;ldquo;Delete&amp;rdquo;. This may take some time.</description></item><item><title>Cleanup</title><link>https://cdkworkshop.com/50-java/70-advanced-topics/100-pipelines/6000-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/70-advanced-topics/100-pipelines/6000-cleanup.html</guid><description>To clean up the stacks from this workshop, navigate to the Cloudformation Console, select your stacks, and hit &amp;ldquo;Delete&amp;rdquo;. This may take some time.</description></item><item><title>Activating the virtualenv</title><link>https://cdkworkshop.com/30-python/20-create-project/200-virtualenv.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/20-create-project/200-virtualenv.html</guid><description>Activating the Virtualenv The init script we ran in the last step created a bunch of code to help get us started but it also created a virtual environment within our directory. If you haven&amp;rsquo;t used virtualenv before, you can find out more here but the bottom line is that they allow you have a self-contained, isolated environment to run Python and install arbitrary packages without polluting your system Python.</description></item><item><title>Assertion Tests</title><link>https://cdkworkshop.com/20-typescript/70-advanced-topics/100-construct-testing/1000-assertion-test.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/70-advanced-topics/100-construct-testing/1000-assertion-test.html</guid><description>Fine-Grained Assertion Tests Create a test for the DynamoDB table This section assumes that you have created the hit counter construct Our HitCounter construct creates a simple DynamoDB table. Lets create a test that validates that the table is getting created.
If cdk init created a test directory for you, then you should have a cdk-workshop.test.ts file. Delete this file.
If you do not already have a test directory (usually created automatically when you run cdk init), then create a test directory at the same level as bin and lib and then create a file called hitcounter.</description></item><item><title>Assertion Tests</title><link>https://cdkworkshop.com/30-python/70-advanced-topics/100-construct-testing/1000-assertion-test.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/70-advanced-topics/100-construct-testing/1000-assertion-test.html</guid><description>Fine-Grained Assertion Tests Create a test for the DynamoDB table This section assumes that you have created the hit counter construct Our HitCounter construct creates a simple DynamoDB table. Lets create a test that validates that the table is getting created.
If you have create the project with cdk init then you should already have a tests directory. In that case you will need to remove the existing test_cdk_workshop_stack.py file.</description></item><item><title>Assertion Tests</title><link>https://cdkworkshop.com/50-java/70-advanced-topics/100-construct-testing/1000-assertion-test.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/70-advanced-topics/100-construct-testing/1000-assertion-test.html</guid><description>Fine-Grained Assertion Tests Create a test for the DynamoDB table This section assumes that you have created the hit counter construct Our HitCounter construct creates a simple DynamoDB table. Lets create a test that validates that the table is getting created.
Since we removed the src/test directory (usually created automatically when you run cdk init), we need to create a new test directory under src:
mkdir -p src/test/java/com/myorg And then create a file called HitCounterTest.</description></item><item><title>AWS Account and User</title><link>https://cdkworkshop.com/15-prerequisites/200-account.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/15-prerequisites/200-account.html</guid><description>AWS Account for Experimentation To deploy our app, you&amp;rsquo;ll need access to an AWS account. If you already have an account and your system is configured with credentials of an administrator user, you can move to the next step.
If you are using an existing account, either personal or a company account, make sure you understand the implications and policy of provisioning resources into this account.
If you don&amp;rsquo;t have an AWS account, you can create a free account here.</description></item><item><title>Hello Lambda</title><link>https://cdkworkshop.com/20-typescript/30-hello-cdk/200-lambda.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/30-hello-cdk/200-lambda.html</guid><description>Lambda handler code We&amp;rsquo;ll start with the AWS Lambda handler code.
Create a directory lambda in the root of your project tree (next to bin and lib). TS CDK projects created with cdk init ignore all .js files by default. To track these files with git, add !lambda/*.js to your .gitignore file. This ensures that your Lambda assets are discoverable during the Pipelines section of this tutorial. Add a file called lambda/hello.</description></item><item><title>Hello Lambda</title><link>https://cdkworkshop.com/30-python/30-hello-cdk/200-lambda.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/30-hello-cdk/200-lambda.html</guid><description>Lambda handler code We&amp;rsquo;ll start with the AWS Lambda handler code.
Create a directory lambda in the root of your project tree (next to the cdk_workshop directory). Add a file called lambda/hello.py with the following contents: import json def handler(event, context): print(&amp;#39;request: {}&amp;#39;.format(json.dumps(event))) return { &amp;#39;statusCode&amp;#39;: 200, &amp;#39;headers&amp;#39;: { &amp;#39;Content-Type&amp;#39;: &amp;#39;text/plain&amp;#39; }, &amp;#39;body&amp;#39;: &amp;#39;Hello, CDK! You have hit {}\n&amp;#39;.format(event[&amp;#39;path&amp;#39;]) } This is a simple Lambda function which returns the text &amp;ldquo;Hello, CDK!</description></item><item><title>Hello Lambda</title><link>https://cdkworkshop.com/40-dotnet/30-hello-cdk/200-lambda.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/30-hello-cdk/200-lambda.html</guid><description>Lambda handler code We&amp;rsquo;ll start with the AWS Lambda handler code.
Create a directory lambda in the root of your project tree (next to src). Add a file called `lambda/hello.js with the following contents: exports.handler = async function(event) { console.log(&amp;#34;request:&amp;#34;, JSON.stringify(event, undefined, 2)); return { statusCode: 200, headers: { &amp;#34;Content-Type&amp;#34;: &amp;#34;text/plain&amp;#34; }, body: `Hello, CDK! You&amp;#39;ve hit ${event.path}\n` }; }; This is a simple Lambda function which returns the text &amp;ldquo;Hello, CDK!</description></item><item><title>Hello Lambda</title><link>https://cdkworkshop.com/50-java/30-hello-cdk/200-lambda.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/30-hello-cdk/200-lambda.html</guid><description>Lambda handler code We&amp;rsquo;ll start with the AWS Lambda handler code.
Create a directory lambda in the root of your project tree (next to src). Add a file called lambda/hello.js with the following contents: exports.handler = async function(event) { console.log(&amp;#34;request:&amp;#34;, JSON.stringify(event, undefined, 2)); return { statusCode: 200, headers: { &amp;#34;Content-Type&amp;#34;: &amp;#34;text/plain&amp;#34; }, body: `Hello, CDK! You&amp;#39;ve hit ${event.path}\n` }; }; This is a simple Lambda function which returns the text &amp;ldquo;Hello, CDK!</description></item><item><title>Installing the library</title><link>https://cdkworkshop.com/20-typescript/50-table-viewer/200-install.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/50-table-viewer/200-install.html</guid><description>npm install Before you can use the table viewer in your application, you&amp;rsquo;ll need to install the npm module:
npm install cdk-dynamo-table-viewer@0.2.0 Output should look like this:
+ cdk-dynamo-table-viewer@0.2.0 added 1 package from 1 contributor and audited 886517 packages in 6.704s found 0 vulnerabilities Now we are ready to add a viewer to our app.</description></item><item><title>Installing the library</title><link>https://cdkworkshop.com/30-python/50-table-viewer/200-install.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/50-table-viewer/200-install.html</guid><description>pip install Before you can use the table viewer in your application, you&amp;rsquo;ll need to install the python module:
pip install cdk-dynamo-table-view==0.2.0 The last two lines of the output (there&amp;rsquo;s a lot of it) should look like this:
Installing collected packages: cdk-dynamo-table-view Successfully installed cdk-dynamo-table-view-0.2.0 Now we are ready to add a viewer to our app.</description></item><item><title>Installing the library</title><link>https://cdkworkshop.com/40-dotnet/50-table-viewer/200-install.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/50-table-viewer/200-install.html</guid><description>Install Package Before you can use the table viewer in your application, you&amp;rsquo;ll need to install the Nuget package:
dotnet add package Cdklabs.DynamoTableViewer --version 0.2.4 Output should look similar to this:
info : Adding PackageReference for package &amp;#39;Eladb.DynamoTableViewer&amp;#39; into project &amp;#39;~/cdk-workshop/src/CdkWorkshop/CdkWorkshop.csproj&amp;#39;. info : Restoring packages for ~/cdk-workshop/src/CdkWorkshop/CdkWorkshop.csproj... info : GET https://api.nuget.org/v3-flatcontainer/cdklabs.dynamotableviewer/index.json info : OK https://api.nuget.org/v3-flatcontainer/cdklabs.dynamotableviewer/index.json 240ms info : GET https://api.nuget.org/v3-flatcontainer/cdklabs.dynamotableviewer/0.2.4/cdklabs.dynamotableviewer.0.2.4.nupkg info : OK https://api.nuget.org/v3-flatcontainer/cdklabs.dynamotableviewer/0.2.4/cdklabs.dynamotableviewer.0.2.4.nupkg 241ms info : Installing Cdklabs.DynamoTableViewer 0.2.4. info : Package &amp;#39;Cdklabs.</description></item><item><title>Installing the library</title><link>https://cdkworkshop.com/50-java/50-table-viewer/200-install.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/50-table-viewer/200-install.html</guid><description>Add Artifact Before you can use the table viewer in your application, you&amp;rsquo;ll need to add the artifact to your pom.xml file:
... &amp;lt;dependencies&amp;gt; &amp;lt;!-- AWS Cloud Development Kit --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;software.amazon.awscdk&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;aws-cdk-lib&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${cdk.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- Additional Construct Libraries --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.github.cdklabs&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;cdk-dynamo-table-view&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.2.0&amp;lt;/version&amp;gt; &amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt; software.amazon.jsii&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jsii-runtime&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; ... Now we are ready to add a viewer to our app.</description></item><item><title>Add the table viewer to your app</title><link>https://cdkworkshop.com/20-typescript/50-table-viewer/300-add.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/50-table-viewer/300-add.html</guid><description>Add a table viewer to your stack Add the following hightlighted lines to lib/cdk-workshop-stack.ts to add a TableViewer construct to your stack:
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as lambda from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import * as apigw from &amp;#39;aws-cdk-lib/aws-apigateway&amp;#39;; import { HitCounter } from &amp;#39;./hitcounter&amp;#39;; import { TableViewer } from &amp;#39;cdk-dynamo-table-viewer&amp;#39;; export class CdkWorkshopStack extends cdk.Stack { constructor(scope: cdk.App, id: string, props?: cdk.StackProps) { super(scope, id, props); const hello = new lambda.</description></item><item><title>Add the table viewer to your app</title><link>https://cdkworkshop.com/30-python/50-table-viewer/300-add.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/50-table-viewer/300-add.html</guid><description>Add a table viewer to your stack Add the following highlighted lines to cdk_workshop_stack.py to add a TableViewer construct to your stack:
from constructs import Construct from aws_cdk import ( Stack, aws_lambda as _lambda, aws_apigateway as apigw, ) from cdk_dynamo_table_view import TableViewer from .hitcounter import HitCounter class CdkWorkshopStack(Stack): def __init__(self, scope: Construct, id: str, **kwargs) -&amp;gt; None: super().__init__(scope, id, **kwargs) # Defines an AWS Lambda resource hello = _lambda.Function( self, &amp;#39;HelloHandler&amp;#39;, runtime=_lambda.</description></item><item><title>Add the table viewer to your app</title><link>https://cdkworkshop.com/40-dotnet/50-table-viewer/300-add.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/50-table-viewer/300-add.html</guid><description>Add a table viewer to your stack Add the following highlighted lines to src/CdkWorkshop/CdkWorkshopStack.cs to add a TableViewer construct to your stack:
using Amazon.CDK; using Amazon.CDK.AWS.APIGateway; using Amazon.CDK.AWS.Lambda; using Cdklabs.DynamoTableViewer; using Construct; namespace CdkWorkshop { public class CdkWorkshopStack : Stack { public CdkWorkshopStack(Construct scope, string id, IStackProps props = null) : base(scope, id, props) { // Defines a new lambda resource var hello = new Function(this, &amp;#34;HelloHandler&amp;#34;, new FunctionProps { Runtime = Runtime.</description></item><item><title>Add the table viewer to your app</title><link>https://cdkworkshop.com/50-java/50-table-viewer/300-add.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/50-table-viewer/300-add.html</guid><description>Add a table viewer to your stack Add the following hightlighted lines to ~/CdkWorkshopStack.java to add a TableViewer construct to your stack:
package com.myorg; import io.github.cdklabs.dynamotableviewer.TableViewer; import software.constructs.Construct; import software.amazon.awscdk.Stack; import software.amazon.awscdk.StackProps; import software.amazon.awscdk.services.apigateway.LambdaRestApi; import software.amazon.awscdk.services.lambda.Code; import software.amazon.awscdk.services.lambda.Function; import software.amazon.awscdk.services.lambda.Runtime; public class CdkWorkshopStack extends Stack { public CdkWorkshopStack(final Construct parent, final String id) { this(parent, id, null); } public CdkWorkshopStack(final Construct parent, final String id, final StackProps props) { super(parent, id, props); // Defines a new lambda resource final Function hello = Function.</description></item><item><title>CDK Watch</title><link>https://cdkworkshop.com/20-typescript/30-hello-cdk/300-cdk-watch.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/30-hello-cdk/300-cdk-watch.html</guid><description>Faster personal deployments This section is not necessary to complete the workshop, but we recommend that you take the time to see how cdk deploy --hotswap and cdk watch can speed up your personal deployments.
It&amp;rsquo;s great that we have a working lambda! But what if we want to tweak the lambda code to get it just right? Let&amp;rsquo;s say that we have now decided that we want our lambda function to respond with &amp;quot;Good Morning, CDK!</description></item><item><title>CDK Watch</title><link>https://cdkworkshop.com/30-python/30-hello-cdk/300-cdk-watch.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/30-hello-cdk/300-cdk-watch.html</guid><description>Faster personal deployments This section is not necessary to complete the workshop, but we recommend that you take the time to see how cdk deploy --hotswap and cdk watch can speed up your personal deployments.
It&amp;rsquo;s great that we have a working lambda! But what if we want to tweak the lambda code to get it just right? Let&amp;rsquo;s say that we have now decided that we want our lambda function to respond with &amp;quot;Good Morning, CDK!</description></item><item><title>CDK Watch</title><link>https://cdkworkshop.com/40-dotnet/30-hello-cdk/300-cdk-watch.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/30-hello-cdk/300-cdk-watch.html</guid><description>Faster personal deployments This section is not necessary to complete the workshop, but we recommend that you take the time to see how cdk deploy --hotswap and cdk watch can speed up your personal deployments.
It&amp;rsquo;s great that we have a working lambda! But what if we want to tweak the lambda code to get it just right? Let&amp;rsquo;s say that we have now decided that we want our lambda function to respond with &amp;quot;Good Morning, CDK!</description></item><item><title>CDK Watch</title><link>https://cdkworkshop.com/50-java/30-hello-cdk/300-cdk-watch.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/30-hello-cdk/300-cdk-watch.html</guid><description>Faster personal deployments This section is not necessary to complete the workshop, but we recommend that you take the time to see how cdk deploy --hotswap and cdk watch can speed up your personal deployments.
It&amp;rsquo;s great that we have a working lambda! But what if we want to tweak the lambda code to get it just right? Let&amp;rsquo;s say that we have now decided that we want our lambda function to respond with &amp;quot;Good Morning, CDK!</description></item><item><title>Define resources</title><link>https://cdkworkshop.com/20-typescript/40-hit-counter/300-resources.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/40-hit-counter/300-resources.html</guid><description>Add resources to the hit counter construct Now, let&amp;rsquo;s define the AWS Lambda function and the DynamoDB table in our HitCounter construct. Go back to lib/hitcounter.ts and add the following highlighted code:
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as lambda from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import * as dynamodb from &amp;#39;aws-cdk-lib/aws-dynamodb&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export interface HitCounterProps { /** the function for which we want to count url hits **/ downstream: lambda.</description></item><item><title>Define resources</title><link>https://cdkworkshop.com/30-python/40-hit-counter/300-resources.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/40-hit-counter/300-resources.html</guid><description>Add resources to the hit counter construct Now, let&amp;rsquo;s define the AWS Lambda function and the DynamoDB table in our HitCounter construct. Go back to cdkworkshop/hitcounter.py and add the following highlighted code:
from constructs import Construct from aws_cdk import ( aws_lambda as _lambda, aws_dynamodb as ddb, ) class HitCounter(Construct): @property def handler(self): return self._handler def __init__(self, scope: Construct, id: str, downstream: _lambda.IFunction, **kwargs): super().__init__(scope, id, **kwargs) table = ddb.Table( self, &amp;#39;Hits&amp;#39;, partition_key={&amp;#39;name&amp;#39;: &amp;#39;path&amp;#39;, &amp;#39;type&amp;#39;: ddb.</description></item><item><title>Define resources</title><link>https://cdkworkshop.com/40-dotnet/40-hit-counter/300-resources.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/40-hit-counter/300-resources.html</guid><description>Add resources to the hit counter construct Now, let&amp;rsquo;s define the AWS Lambda function and the DynamoDB table in our HitCounter construct.
Now, go back to src/CdkWorkshop/HitCounter.cs and add the following highlighted code:
using Amazon.CDK; using Amazon.CDK.AWS.DynamoDB; using Amazon.CDK.AWS.Lambda; using Constructs; using System.Collections.Generic; namespace CdkWorkshop { public class HitCounterProps { // The function for which we want to count url hits public IFunction Downstream { get; set; } } public class HitCounter : Construct { public Function Handler { get; } public HitCounter(Construct scope, string id, HitCounterProps props) : base(scope, id) { var table = new Table(this, &amp;#34;Hits&amp;#34;, new TableProps { PartitionKey = new Attribute { Name = &amp;#34;path&amp;#34;, Type = AttributeType.</description></item><item><title>Define resources</title><link>https://cdkworkshop.com/50-java/40-hit-counter/300-resources.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/40-hit-counter/300-resources.html</guid><description>Add resources to the hit counter construct Now, let&amp;rsquo;s define the AWS Lambda function and the DynamoDB table in our HitCounter construct.
Now, go back to ~/HitCounter.java and add the following highlighted code:
package com.myorg; import java.util.HashMap; import java.util.Map; import software.constructs.Construct; import software.amazon.awscdk.services.dynamodb.Attribute; import software.amazon.awscdk.services.dynamodb.AttributeType; import software.amazon.awscdk.services.dynamodb.Table; import software.amazon.awscdk.services.lambda.Code; import software.amazon.awscdk.services.lambda.Function; import software.amazon.awscdk.services.lambda.Runtime; public class HitCounter extends Construct { private final Function handler; private final Table table; public HitCounter(final Construct scope, final String id, final HitCounterProps props) { super(scope, id); this.</description></item><item><title>Node.js</title><link>https://cdkworkshop.com/15-prerequisites/300-nodejs.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/15-prerequisites/300-nodejs.html</guid><description>The AWS CDK uses Node.js (&amp;gt;= 10.13.0, except for versions 13.0.0 - 13.6.0). A version in active long-term support (16.x at this writing) is recommended.
To install Node.js visit the node.js website.
Windows: if you have an old version of Node.js installed on your system, it may be required to run the .msi installation as Administrator. If you already have Node.js installed, verify that you have a compatible version:
node --version Output should be &amp;gt;= 10.</description></item><item><title>Project structure</title><link>https://cdkworkshop.com/20-typescript/20-create-project/300-structure.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/20-create-project/300-structure.html</guid><description>Open your IDE Now&amp;rsquo;s a good time to open the project in your favorite IDE and explore.
If you use VSCode, you can just type code . within the project directory.
Explore your project directory You&amp;rsquo;ll see something like this:
lib/cdk-workshop-stack.ts is where your CDK application&amp;rsquo;s main stack is defined. This is the file we&amp;rsquo;ll be spending most of our time in. bin/cdk-workshop.ts is the entrypoint of the CDK application. It will load the stack defined in lib/cdk-workshop-stack.</description></item><item><title>Project structure</title><link>https://cdkworkshop.com/30-python/20-create-project/300-structure.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/20-create-project/300-structure.html</guid><description>Open your IDE Now&amp;rsquo;s a good time to open the project in your favorite IDE and explore.
If you use VSCode, you can just type code . within the project directory.
Explore your project directory You&amp;rsquo;ll see something like this:
.venv - The python virtual envirnment information discussed in the previous section. cdk_workshop — A Python module directory. cdk_workshop.egg-info - Folder that contains build information relevant for the packaging on the project cdk_workshop_stack.</description></item><item><title>Project structure</title><link>https://cdkworkshop.com/40-dotnet/20-create-project/300-structure.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/20-create-project/300-structure.html</guid><description>Open your IDE Now&amp;rsquo;s a good time to open the project in your favorite IDE and explore.
If you use VSCode, you can just type code . within the project directory.
You may see a notification saying Required assets to build and debug are missing from 'YOURPROJECT'. Add them?
This can be ignored for our purposes.
Explore your project directory You&amp;rsquo;ll see something like this:
src/CdkWorkshop/Program.cs is the entrypoint for the CDK application it will load the stack defined in src/CdkWorkshop/CdkWorkshopStack.</description></item><item><title>Project structure</title><link>https://cdkworkshop.com/50-java/20-create-project/300-structure.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/20-create-project/300-structure.html</guid><description>Open your IDE Now&amp;rsquo;s a good time to open the project in your favorite IDE and explore.
If you use VSCode, you can just type code . within the project directory.
Explore your project directory You&amp;rsquo;ll see something like this:
src/main/java/com/myorg/ is the main project directory for Java code in the app, and will be henceforth referred to (to shorten the paths) as ~/ ~/CdkWorkshopApp.java is the entrypoint for the CDK application it will load the stack defined in ~/CdkWorkshopStack.</description></item><item><title>Validation Tests</title><link>https://cdkworkshop.com/20-typescript/70-advanced-topics/100-construct-testing/2000-validation-tests.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/70-advanced-topics/100-construct-testing/2000-validation-tests.html</guid><description>Validation Tests Sometimes we want the inputs to be configurable, but we also want to put constraints on those inputs or validate that the input is valid.
Suppose for the HitCounter construct we want to allow the user to specify the readCapacity on the DynamoDB table, but we also want to ensure the value is within a reasonable range. We can write a test to make sure that the validation logic works: pass in invalid values and see what happens.</description></item><item><title>Validation Tests</title><link>https://cdkworkshop.com/30-python/70-advanced-topics/100-construct-testing/2000-validation-tests.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/70-advanced-topics/100-construct-testing/2000-validation-tests.html</guid><description>Validation Tests Sometimes we want the inputs to be configurable, but we also want to put constraints on those inputs or validate that the input is valid.
Suppose for the HitCounter construct we want to allow the user to specify the read_capacity on the DynamoDB table, but we also want to ensure the value is within a reasonable range. We can write a test to make sure that the validation logic works: pass in invalid values and see what happens.</description></item><item><title>Validation Tests</title><link>https://cdkworkshop.com/50-java/70-advanced-topics/100-construct-testing/2000-validation-tests.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/70-advanced-topics/100-construct-testing/2000-validation-tests.html</guid><description>Validation Tests Sometimes we want the inputs to be configurable, but we also want to put constraints on those inputs or validate that the input is valid.
Suppose for the HitCounter construct we want to allow the user to specify the readCapacity on the DynamoDB table, but we also want to ensure the value is within a reasonable range. We can write a test to make sure that the validation logic works: pass in invalid values and see what happens.</description></item><item><title>API Gateway</title><link>https://cdkworkshop.com/20-typescript/30-hello-cdk/400-apigw.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/30-hello-cdk/400-apigw.html</guid><description>Next step is to add an API Gateway in front of our function. API Gateway will expose a public HTTP endpoint that anyone on the internet can hit with an HTTP client such as curl or a web browser.
We will use Lambda proxy integration mounted to the root of the API. This means that any request to any URL path will be proxied directly to our Lambda function, and the response from the function will be returned back to the user.</description></item><item><title>API Gateway</title><link>https://cdkworkshop.com/30-python/30-hello-cdk/400-apigw.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/30-hello-cdk/400-apigw.html</guid><description>Next step is to add an API Gateway in front of our function. API Gateway will expose a public HTTP endpoint that anyone on the internet can hit with an HTTP client such as curl or a web browser.
We will use Lambda proxy integration mounted to the root of the API. This means that any request to any URL path will be proxied directly to our Lambda function, and the response from the function will be returned back to the user.</description></item><item><title>API Gateway</title><link>https://cdkworkshop.com/40-dotnet/30-hello-cdk/400-apigw.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/30-hello-cdk/400-apigw.html</guid><description>Next step is to add an API Gateway in front of our function. API Gateway will expose a public HTTP endpoint that anyone on the internet can hit with an HTTP client such as curl or a web browser.
We will use Lambda proxy integration mounted to the root of the API. This means that any request to any URL path will be proxied directly to our Lambda function, and the response from the function will be returned back to the user.</description></item><item><title>API Gateway</title><link>https://cdkworkshop.com/50-java/30-hello-cdk/400-apigw.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/30-hello-cdk/400-apigw.html</guid><description>Next step is to add an API Gateway in front of our function. API Gateway will expose a public HTTP endpoint that anyone on the internet can hit with an HTTP client such as curl or a web browser.
We will use Lambda proxy integration mounted to the root of the API. This means that any request to any URL path will be proxied directly to our Lambda function, and the response from the function will be returned back to the user.</description></item><item><title>cdk synth</title><link>https://cdkworkshop.com/20-typescript/20-create-project/400-synth.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/20-create-project/400-synth.html</guid><description>Synthesize a template from your app AWS CDK apps are effectively only a definition of your infrastructure using code. When CDK apps are executed, they produce (or &amp;ldquo;synthesize&amp;rdquo;, in CDK parlance) an AWS CloudFormation template for each stack defined in your application.
To synthesize a CDK app, use the cdk synth command. Let&amp;rsquo;s check out the template synthesized from the sample app:
The CDK CLI requires you to be in the same directory as your cdk.</description></item><item><title>cdk synth</title><link>https://cdkworkshop.com/30-python/20-create-project/400-synth.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/20-create-project/400-synth.html</guid><description>Synthesize a template from your app AWS CDK apps are effectively only a definition of your infrastructure using code. When CDK apps are executed, they produce (or &amp;ldquo;synthesize&amp;rdquo;, in CDK parlance) an AWS CloudFormation template for each stack defined in your application.
To synthesize a CDK app, use the cdk synth command. Let&amp;rsquo;s check out the template synthesized from the sample app.
The CDK CLI requires you to be in the same directory as your cdk.</description></item><item><title>cdk synth</title><link>https://cdkworkshop.com/40-dotnet/20-create-project/400-synth.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/20-create-project/400-synth.html</guid><description>Synthesize a template from your app AWS CDK apps are effectively only a definition of your infrastructure using code. When CDK apps are executed, they produce (or &amp;ldquo;synthesize&amp;rdquo;, in CDK parlance) an AWS CloudFormation template for each stack defined in your application.
To synthesize a CDK app, use the cdk synth command. Let&amp;rsquo;s check out the template synthesized from the sample app:
The CDK CLI requires you to be in the same directory as your cdk.</description></item><item><title>cdk synth</title><link>https://cdkworkshop.com/50-java/20-create-project/400-synth.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/20-create-project/400-synth.html</guid><description>Synthesize a template from your app AWS CDK apps are effectively only a definition of your infrastructure using code. When CDK apps are executed, they produce (or &amp;ldquo;synthesize&amp;rdquo;, in CDK parlance) an AWS CloudFormation template for each stack defined in your application.
To synthesize a CDK app, use the cdk synth command. Let&amp;rsquo;s check out the template synthesized from the sample app:
The CDK CLI requires you to be in the same directory as your cdk.</description></item><item><title>Deploying our app</title><link>https://cdkworkshop.com/50-java/50-table-viewer/400-deploy.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/50-table-viewer/400-deploy.html</guid><description>cdk diff Before we deploy, let&amp;rsquo;s take a look at what will happen when we deploy our app (this is just the Resources section of the output):
$ mvn package ... $ cdk diff Resources [+] AWS::IAM::Role ViewHitCounter/Rendered/ServiceRole ViewHitCounterRenderedServiceRole254DB4EA [+] AWS::IAM::Policy ViewHitCounter/Rendered/ServiceRole/DefaultPolicy ViewHitCounterRenderedServiceRoleDefaultPolicy9ADB8C83 [+] AWS::Lambda::Function ViewHitCounter/Rendered ViewHitCounterRendered9C783E45 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.ANY.. ViewHitCounterRenderedApiPermissionANY72263B1A [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.Test.ANY.. ViewHitCounterRenderedApiPermissionTestANYA4794B81 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.ANY..{proxy+} ViewHitCounterRenderedApiPermissionANYproxy42B9E676 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.Test.ANY..{proxy+} ViewHitCounterRenderedApiPermissionTestANYproxy104CA88E [+] AWS::ApiGateway::RestApi ViewHitCounter/ViewerEndpoint ViewHitCounterViewerEndpoint5A0EF326 [+] AWS::ApiGateway::Deployment ViewHitCounter/ViewerEndpoint/Deployment ViewHitCounterViewerEndpointDeployment1CE7C5768689ca8f54dfa4f161d3df0ebffcdcff [+] AWS::ApiGateway::Stage ViewHitCounter/ViewerEndpoint/DeploymentStage.</description></item><item><title>Exposing our hit counter table</title><link>https://cdkworkshop.com/20-typescript/50-table-viewer/400-expose-table.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/50-table-viewer/400-expose-table.html</guid><description>Add a table property to our hit counter Edit hitcounter.ts and modify it as such table is exposed as a public property.
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as lambda from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import * as dynamodb from &amp;#39;aws-cdk-lib/aws-dynamodb&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export interface HitCounterProps { /** the function for which we want to count url hits **/ downstream: lambda.IFunction; } export class HitCounter extends Construct { /** allows accessing the counter function */ public readonly handler: lambda.</description></item><item><title>Exposing our hit counter table</title><link>https://cdkworkshop.com/30-python/50-table-viewer/400-expose-table.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/50-table-viewer/400-expose-table.html</guid><description>Add a table property to our hit counter Edit hitcounter.py and modify it as such table is exposed as a public property.
from constructs import Construct from aws_cdk import ( aws_lambda as _lambda, aws_dynamodb as ddb, ) class HitCounter(Construct): @property def handler(self): return self._handler @property def table(self): return self._table def __init__(self, scope: Construct, id: str, downstream: _lambda.IFunction, **kwargs): super().__init__(scope, id, **kwargs) self._table = ddb.Table( self, &amp;#39;Hits&amp;#39;, partition_key={&amp;#39;name&amp;#39;: &amp;#39;path&amp;#39;, &amp;#39;type&amp;#39;: ddb.AttributeType.STRING} ) self.</description></item><item><title>Exposing our hit counter table</title><link>https://cdkworkshop.com/40-dotnet/50-table-viewer/400-expose-table.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/50-table-viewer/400-expose-table.html</guid><description>Add a table property to our hit counter Edit src/CdkWorkshop/HitCounter.cs and modify it so that table is exposed as a public property called MyTable.
using Amazon.CDK; using Amazon.CDK.AWS.DynamoDB; using Amazon.CDK.AWS.Lambda; using Constructs; using System.Collections.Generic; namespace CdkWorkshop { public class HitCounterProps { // The function for which we want to count url hits public IFunction Downstream { get; set; } } public class HitCounter : Construct { public readonly Function Handler; public readonly Table MyTable; public HitCounter(Construct scope, string id, HitCounterProps props) : base(scope, id) { var table = new Table(this, &amp;#34;Hits&amp;#34;, new TableProps { PartitionKey = new Attribute { Name = &amp;#34;path&amp;#34;, Type = AttributeType.</description></item><item><title>IDE for your programming language</title><link>https://cdkworkshop.com/15-prerequisites/400-ide.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/15-prerequisites/400-ide.html</guid><description>One of the benefits of the AWS CDK is that you can leverage your favorite development environments and have a rich experience when exploring the hundreds of different services and features of AWS.
We highly recommend to use an IDE that supports code-completion and syntax highlighting for your language of choice:
VSCode (recommended) AWS Cloud9 Atom with the atom-typescript plugin vim with tsuquyomi WebStorm Emacs with the tide mode PyCharm Eclipse</description></item><item><title>Use the hit counter</title><link>https://cdkworkshop.com/20-typescript/40-hit-counter/400-use.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/40-hit-counter/400-use.html</guid><description>Add a hit counter to our stack Okay, our hit counter is ready. Let&amp;rsquo;s use it in our app. Open lib/cdk-workshop-stack.ts and add the following highlighted code:
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as lambda from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import * as apigw from &amp;#39;aws-cdk-lib/aws-apigateway&amp;#39;; import { HitCounter } from &amp;#39;./hitcounter&amp;#39;; export class CdkWorkshopStack extends cdk.Stack { constructor(scope: cdk.App, id: string, props?: cdk.StackProps) { super(scope, id, props); const hello = new lambda.</description></item><item><title>Use the hit counter</title><link>https://cdkworkshop.com/30-python/40-hit-counter/400-use.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/40-hit-counter/400-use.html</guid><description>Add a hit counter to our stack Okay, our hit counter is ready. Let&amp;rsquo;s use it in our app. Open cdk_workshop_stack.py and add the following highlighted code:
from constructs import Construct from aws_cdk import ( Stack, aws_lambda as _lambda, aws_apigateway as apigw, ) from .hitcounter import HitCounter class CdkWorkshopStack(Stack): def __init__(self, scope: Construct, id: str, **kwargs) -&amp;gt; None: super().__init__(scope, id, **kwargs) # Defines an AWS Lambda resource my_lambda = _lambda.Function( self, &amp;#39;HelloHandler&amp;#39;, runtime=_lambda.</description></item><item><title>Use the hit counter</title><link>https://cdkworkshop.com/40-dotnet/40-hit-counter/400-use.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/40-hit-counter/400-use.html</guid><description>Add a hit counter to our stack Okay, our hit counter is ready. Let&amp;rsquo;s use it in our app. Open src/CdkWorkshop/CdkWorkshopStack.cs and add the following highlighted code:
using Amazon.CDK; using Amazon.CDK.AWS.APIGateway; using Amazon.CDK.AWS.Lambda; using Constructs; namespace CdkWorkshop { public class CdkWorkshopStack : Stack { public CdkWorkshopStack(Construct scope, string id, IStackProps props = null) : base(scope, id, props) { // Defines a new lambda resource var hello = new Function(this, &amp;#34;HelloHandler&amp;#34;, new FunctionProps { Runtime = Runtime.</description></item><item><title>Use the hit counter</title><link>https://cdkworkshop.com/50-java/40-hit-counter/400-use.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/40-hit-counter/400-use.html</guid><description>Add a hit counter to our stack Okay, our hit counter is ready. Let&amp;rsquo;s use it in our app. Open ~/CdkWorkshopStack.java and add the following highlighted code:
package com.myorg; import software.constructs.Construct; import software.amazon.awscdk.Stack; import software.amazon.awscdk.StackProps; import software.amazon.awscdk.services.apigateway.LambdaRestApi; import software.amazon.awscdk.services.lambda.Code; import software.amazon.awscdk.services.lambda.Function; import software.amazon.awscdk.services.lambda.Runtime; public class CdkWorkshopStack extends Stack { public CdkWorkshopStack(final Construct parent, final String id) { this(parent, id, null); } public CdkWorkshopStack(final Construct parent, final String id, final StackProps props) { super(parent, id, props); // Defines a new lambda resource final Function hello = Function.</description></item><item><title>AWS CDK Toolkit</title><link>https://cdkworkshop.com/15-prerequisites/500-toolkit.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/15-prerequisites/500-toolkit.html</guid><description>Next, we&amp;rsquo;ll install the AWS CDK Toolkit. The toolkit is a command-line utility which allows you to work with CDK apps.
Open a terminal session and run the following command:
Windows: you&amp;rsquo;ll need to run this as an Administrator POSIX: on some systems you may need to run this with sudo npm install -g aws-cdk You can check the toolkit version:
$ cdk --version 2.0.0 (build 4b6ce31)</description></item><item><title>cdk deploy</title><link>https://cdkworkshop.com/20-typescript/20-create-project/500-deploy.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/20-create-project/500-deploy.html</guid><description>Okay, we&amp;rsquo;ve got a CloudFormation template. What&amp;rsquo;s next? Let&amp;rsquo;s deploy it into our account!
Bootstrapping an environment The first time you deploy an AWS CDK app into an environment (account/region), you can install a &amp;ldquo;bootstrap stack&amp;rdquo;. This stack includes resources that are used in the toolkit&amp;rsquo;s operation. For example, the stack includes an S3 bucket that is used to store templates and assets during the deployment process.
You can use the cdk bootstrap command to install the bootstrap stack into an environment:</description></item><item><title>cdk deploy</title><link>https://cdkworkshop.com/30-python/20-create-project/500-deploy.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/20-create-project/500-deploy.html</guid><description>Okay, we&amp;rsquo;ve got a CloudFormation template. What&amp;rsquo;s next? Let&amp;rsquo;s deploy it into our account!
Bootstrapping an environment The first time you deploy an AWS CDK app into an environment (account/region), you&amp;rsquo;ll need to install a &amp;ldquo;bootstrap stack&amp;rdquo;. This stack includes resources that are needed for the toolkit&amp;rsquo;s operation. For example, the stack includes an S3 bucket that is used to store templates and assets during the deployment process.
You can use the cdk bootstrap command to install the bootstrap stack into an environment:</description></item><item><title>cdk deploy</title><link>https://cdkworkshop.com/40-dotnet/20-create-project/500-deploy.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/20-create-project/500-deploy.html</guid><description>Okay, we&amp;rsquo;ve got a CloudFormation template. What&amp;rsquo;s next? Let&amp;rsquo;s deploy it into our account!
Bootstrapping an environment The first time you deploy an AWS CDK app into an environment (account/region), you&amp;rsquo;ll need to install a &amp;ldquo;bootstrap stack&amp;rdquo;. This stack includes resources that are needed for the toolkit&amp;rsquo;s operation. For example, the stack includes an S3 bucket that is used to store templates and assets during the deployment process.
You can use the cdk bootstrap command to install the bootstrap stack into an environment:</description></item><item><title>cdk deploy</title><link>https://cdkworkshop.com/50-java/20-create-project/500-deploy.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/20-create-project/500-deploy.html</guid><description>Okay, we&amp;rsquo;ve got a CloudFormation template. What&amp;rsquo;s next? Let&amp;rsquo;s deploy it into our account!
Bootstrapping an environment The first time you deploy an AWS CDK app into an environment (account/region), you&amp;rsquo;ll need to install a &amp;ldquo;bootstrap stack&amp;rdquo;. This stack includes resources that are needed for the toolkit&amp;rsquo;s operation. For example, the stack includes an S3 bucket that is used to store templates and assets during the deployment process.
You can use the cdk bootstrap command to install the bootstrap stack into an environment:</description></item><item><title>CloudWatch Logs</title><link>https://cdkworkshop.com/20-typescript/40-hit-counter/500-logs.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/40-hit-counter/500-logs.html</guid><description>Viewing CloudWatch logs for our Lambda function The first thing to do is to go and look at the logs of our hit counter AWS Lambda function.
There are many tools that help you do that like SAM CLI and awslogs. In this workshop, we&amp;rsquo;ll show you how to find your logs through the AWS console.
Open the AWS Lambda console (make sure you are connected to the correct region).</description></item><item><title>CloudWatch Logs</title><link>https://cdkworkshop.com/30-python/40-hit-counter/500-logs.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/40-hit-counter/500-logs.html</guid><description>Viewing CloudWatch logs for our Lambda function The first thing to do is to go and look at the logs of our hit counter AWS Lambda function.
There are many tools that help you do that like SAM CLI and awslogs. In this workshop, we&amp;rsquo;ll show you how to find your logs through the AWS console.
Open the AWS Lambda console (make sure you are connected to the correct region).</description></item><item><title>CloudWatch Logs</title><link>https://cdkworkshop.com/40-dotnet/40-hit-counter/500-logs.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/40-hit-counter/500-logs.html</guid><description>Viewing CloudWatch logs for our Lambda function The first thing to do is to go and look at the logs of our hit counter AWS Lambda function.
There are many tools that help you do that like SAM CLI and awslogs. In this workshop, we&amp;rsquo;ll show you how to find your logs through the AWS console.
Open the AWS Lambda console (make sure you are connected to the correct region).</description></item><item><title>CloudWatch Logs</title><link>https://cdkworkshop.com/50-java/40-hit-counter/500-logs.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/40-hit-counter/500-logs.html</guid><description>Viewing CloudWatch logs for our Lambda function The first thing to do is to go and look at the logs of our hit counter AWS Lambda function.
There are many tools that help you do that like SAM CLI and awslogs. In this workshop, we&amp;rsquo;ll show you how to find your logs through the AWS console.
Open the AWS Lambda console (make sure you are connected to the correct region).</description></item><item><title>Deploying our app</title><link>https://cdkworkshop.com/20-typescript/50-table-viewer/500-deploy.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/50-table-viewer/500-deploy.html</guid><description>cdk diff Before we deploy, let&amp;rsquo;s take a look at what will happen when we deploy our app (this is just the Resources section of the output):
$ cdk diff Resources [+] AWS::IAM::Role ViewHitCounter/Rendered/ServiceRole ViewHitCounterRenderedServiceRole254DB4EA [+] AWS::IAM::Policy ViewHitCounter/Rendered/ServiceRole/DefaultPolicy ViewHitCounterRenderedServiceRoleDefaultPolicy9ADB8C83 [+] AWS::Lambda::Function ViewHitCounter/Rendered ViewHitCounterRendered9C783E45 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.ANY.. ViewHitCounterRenderedApiPermissionANY72263B1A [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.Test.ANY.. ViewHitCounterRenderedApiPermissionTestANYA4794B81 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.ANY..{proxy+} ViewHitCounterRenderedApiPermissionANYproxy42B9E676 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.Test.ANY..{proxy+} ViewHitCounterRenderedApiPermissionTestANYproxy104CA88E [+] AWS::ApiGateway::RestApi ViewHitCounter/ViewerEndpoint ViewHitCounterViewerEndpoint5A0EF326 [+] AWS::ApiGateway::Deployment ViewHitCounter/ViewerEndpoint/Deployment ViewHitCounterViewerEndpointDeployment1CE7C5768689ca8f54dfa4f161d3df0ebffcdcff [+] AWS::ApiGateway::Stage ViewHitCounter/ViewerEndpoint/DeploymentStage.prod ViewHitCounterViewerEndpointDeploymentStageprodF3901FC7 [+] AWS::IAM::Role ViewHitCounter/ViewerEndpoint/CloudWatchRole ViewHitCounterViewerEndpointCloudWatchRole87B94D6A [+] AWS::ApiGateway::Account ViewHitCounter/ViewerEndpoint/Account ViewHitCounterViewerEndpointAccount0B75E76A [+] AWS::ApiGateway::Resource ViewHitCounter/ViewerEndpoint/{proxy+} ViewHitCounterViewerEndpointproxy2F4C239F [+] AWS::ApiGateway::Method ViewHitCounter/ViewerEndpoint/{proxy+}/ANY ViewHitCounterViewerEndpointproxyANYFF4B8F5B [+] AWS::ApiGateway::Method ViewHitCounter/ViewerEndpoint/ANY ViewHitCounterViewerEndpointANY66F2285B You&amp;rsquo;ll notice that the table viewer adds another API Gateway endpoint, a Lambda function, permissions, outputs, all sorts of goodies.</description></item><item><title>Deploying our app</title><link>https://cdkworkshop.com/30-python/50-table-viewer/500-deploy.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/50-table-viewer/500-deploy.html</guid><description>cdk diff Before we deploy, let&amp;rsquo;s take a look at what will happen when we deploy our app (this is just the Resources section of the output):
$ cdk diff Resources [+] AWS::IAM::Role ViewHitCounter/Rendered/ServiceRole ViewHitCounterRenderedServiceRole254DB4EA [+] AWS::IAM::Policy ViewHitCounter/Rendered/ServiceRole/DefaultPolicy ViewHitCounterRenderedServiceRoleDefaultPolicy9ADB8C83 [+] AWS::Lambda::Function ViewHitCounter/Rendered ViewHitCounterRendered9C783E45 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.ANY.. ViewHitCounterRenderedApiPermissionANY72263B1A [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.Test.ANY.. ViewHitCounterRenderedApiPermissionTestANYA4794B81 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.ANY..{proxy+} ViewHitCounterRenderedApiPermissionANYproxy42B9E676 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.Test.ANY..{proxy+} ViewHitCounterRenderedApiPermissionTestANYproxy104CA88E [+] AWS::ApiGateway::RestApi ViewHitCounter/ViewerEndpoint ViewHitCounterViewerEndpoint5A0EF326 [+] AWS::ApiGateway::Deployment ViewHitCounter/ViewerEndpoint/Deployment ViewHitCounterViewerEndpointDeployment1CE7C5761d44312e8424c23ba090a70e0962c36f [+] AWS::ApiGateway::Stage ViewHitCounter/ViewerEndpoint/DeploymentStage.prod ViewHitCounterViewerEndpointDeploymentStageprodF3901FC7 [+] AWS::IAM::Role ViewHitCounter/ViewerEndpoint/CloudWatchRole ViewHitCounterViewerEndpointCloudWatchRole87B94D6A [+] AWS::ApiGateway::Account ViewHitCounter/ViewerEndpoint/Account ViewHitCounterViewerEndpointAccount0B75E76A [+] AWS::ApiGateway::Resource ViewHitCounter/ViewerEndpoint/Default/{proxy+} ViewHitCounterViewerEndpointproxy2F4C239F [+] AWS::ApiGateway::Method ViewHitCounter/ViewerEndpoint/Default/{proxy+}/ANY ViewHitCounterViewerEndpointproxyANYFF4B8F5B [+] AWS::ApiGateway::Method ViewHitCounter/ViewerEndpoint/Default/ANY ViewHitCounterViewerEndpointANY66F2285B You&amp;rsquo;ll notice that the table viewer adds another API Gateway endpoint, a Lambda function, permissions, outputs, all sorts of goodies.</description></item><item><title>Deploying our app</title><link>https://cdkworkshop.com/40-dotnet/50-table-viewer/500-deploy.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/50-table-viewer/500-deploy.html</guid><description>cdk diff Before we deploy, let&amp;rsquo;s take a look at what will happen when we deploy our app (this is just the Resources section of the output):
$ cdk diff Resources [+] AWS::IAM::Role ViewHitCounter/Rendered/ServiceRole ViewHitCounterRenderedServiceRole254DB4EA [+] AWS::IAM::Policy ViewHitCounter/Rendered/ServiceRole/DefaultPolicy ViewHitCounterRenderedServiceRoleDefaultPolicy9ADB8C83 [+] AWS::Lambda::Function ViewHitCounter/Rendered ViewHitCounterRendered9C783E45 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.ANY.. ViewHitCounterRenderedApiPermissionANY72263B1A [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.Test.ANY.. ViewHitCounterRenderedApiPermissionTestANYA4794B81 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.ANY..{proxy+} ViewHitCounterRenderedApiPermissionANYproxy42B9E676 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.Test.ANY..{proxy+} ViewHitCounterRenderedApiPermissionTestANYproxy104CA88E [+] AWS::ApiGateway::RestApi ViewHitCounter/ViewerEndpoint ViewHitCounterViewerEndpoint5A0EF326 [+] AWS::ApiGateway::Deployment ViewHitCounter/ViewerEndpoint/Deployment ViewHitCounterViewerEndpointDeployment1CE7C5768689ca8f54dfa4f161d3df0ebffcdcff [+] AWS::ApiGateway::Stage ViewHitCounter/ViewerEndpoint/DeploymentStage.prod ViewHitCounterViewerEndpointDeploymentStageprodF3901FC7 [+] AWS::IAM::Role ViewHitCounter/ViewerEndpoint/CloudWatchRole ViewHitCounterViewerEndpointCloudWatchRole87B94D6A [+] AWS::ApiGateway::Account ViewHitCounter/ViewerEndpoint/Account ViewHitCounterViewerEndpointAccount0B75E76A [+] AWS::ApiGateway::Resource ViewHitCounter/ViewerEndpoint/{proxy+} ViewHitCounterViewerEndpointproxy2F4C239F [+] AWS::ApiGateway::Method ViewHitCounter/ViewerEndpoint/{proxy+}/ANY ViewHitCounterViewerEndpointproxyANYFF4B8F5B [+] AWS::ApiGateway::Method ViewHitCounter/ViewerEndpoint/ANY ViewHitCounterViewerEndpointANY66F2285B You&amp;rsquo;ll notice that the table viewer adds another API Gateway endpoint, a Lambda function, permissions, outputs, all sorts of goodies.</description></item><item><title>Extra credit</title><link>https://cdkworkshop.com/50-java/50-table-viewer/500-extra-credit.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/50-table-viewer/500-extra-credit.html</guid><description>Sort hits by descending order You&amp;rsquo;ll notice that the hits in the table are not sorted. Figure out how to configure the table viewer to sort the table by &amp;ldquo;hits&amp;rdquo; in descending order (top path is first).</description></item><item><title>Extra credit</title><link>https://cdkworkshop.com/20-typescript/50-table-viewer/600-extra-credit.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/50-table-viewer/600-extra-credit.html</guid><description>Sort hits by descending order You&amp;rsquo;ll notice that the hits in the table are not sorted. Figure out how to configure the table viewer to sort the table by &amp;ldquo;hits&amp;rdquo; in descending order (top path is first).</description></item><item><title>Extra credit</title><link>https://cdkworkshop.com/30-python/50-table-viewer/600-extra-credit.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/50-table-viewer/600-extra-credit.html</guid><description>Sort hits by descending order You&amp;rsquo;ll notice that the hits in the table are not sorted. Figure out how to configure the table viewer to sort the table by &amp;ldquo;hits&amp;rdquo; in descending order (top path is first).</description></item><item><title>Extra credit</title><link>https://cdkworkshop.com/40-dotnet/50-table-viewer/600-extra-credit.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/50-table-viewer/600-extra-credit.html</guid><description>Sort hits by descending order You&amp;rsquo;ll notice that the hits in the table are not sorted. Figure out how to configure the table viewer to sort the table by &amp;ldquo;hits&amp;rdquo; in descending order (top path is first).</description></item><item><title>Granting permissions</title><link>https://cdkworkshop.com/20-typescript/40-hit-counter/600-permissions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/40-hit-counter/600-permissions.html</guid><description>Allow Lambda to read/write our DynamoDB table Let&amp;rsquo;s give our Lambda&amp;rsquo;s execution role permissions to read/write from our table.
Go back to hitcounter.ts and add the following highlighted lines:
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as lambda from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import * as dynamodb from &amp;#39;aws-cdk-lib/aws-dynamodb&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export interface HitCounterProps { /** the function for which we want to count url hits **/ downstream: lambda.</description></item><item><title>Granting permissions</title><link>https://cdkworkshop.com/30-python/40-hit-counter/600-permissions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/40-hit-counter/600-permissions.html</guid><description>Allow Lambda to read/write our DynamoDB table Let&amp;rsquo;s give our Lambda&amp;rsquo;s execution role permissions to read/write from our table.
Go back to hitcounter.py and add the following highlighted line:
from constructs import Construct from aws_cdk import ( aws_lambda as _lambda, aws_dynamodb as ddb, ) class HitCounter(Construct): @property def handler(self): return self._handler def __init__(self, scope: Construct, id: str, downstream: _lambda.IFunction, **kwargs): super().__init__(scope, id, **kwargs) table = ddb.Table( self, &amp;#39;Hits&amp;#39;, partition_key={&amp;#39;name&amp;#39;: &amp;#39;path&amp;#39;, &amp;#39;type&amp;#39;: ddb.</description></item><item><title>Granting permissions</title><link>https://cdkworkshop.com/40-dotnet/40-hit-counter/600-permissions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/40-hit-counter/600-permissions.html</guid><description>Allow Lambda to read/write our DynamoDB table Let&amp;rsquo;s give our Lambda&amp;rsquo;s execution role permissions to read/write from our table.
Go back to src/CdkWorkshop/HitCounter.cs and add the following highlighted lines:
using Amazon.CDK; using Amazon.CDK.AWS.Lambda; using Amazon.CDK.AWS.DynamoDB; using Constructs; using System.Collections.Generic; namespace CdkWorkshop { public class HitCounterProps { // The function for which we want to count url hits public IFunction Downstream { get; set; } } public class HitCounter : Construct { public IFunction Handler { get; }; public HitCounter(Construct scope, string id, HitCounterProps props) : base(scope, id) { var table = new Table(this, &amp;#34;Hits&amp;#34;, new TableProps { PartitionKey = new Attribute { Name = &amp;#34;path&amp;#34;, Type = AttributeType.</description></item><item><title>Granting permissions</title><link>https://cdkworkshop.com/50-java/40-hit-counter/600-permissions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/40-hit-counter/600-permissions.html</guid><description>Allow Lambda to read/write our DynamoDB table Let&amp;rsquo;s give our Lambda&amp;rsquo;s execution role permissions to read/write from our table.
Go back to ~/HitCounter.java and add the following highlighted lines:
package com.myorg; import java.util.HashMap; import java.util.Map; import software.constructs.Construct; import software.amazon.awscdk.services.dynamodb.Attribute; import software.amazon.awscdk.services.dynamodb.AttributeType; import software.amazon.awscdk.services.dynamodb.Table; import software.amazon.awscdk.services.lambda.Code; import software.amazon.awscdk.services.lambda.Function; import software.amazon.awscdk.services.lambda.Runtime; public class HitCounter extends Construct { private final Function handler; private final Table table; public HitCounter(final Construct scope, final String id, final HitCounterProps props) { super(scope, id); this.</description></item><item><title>Python</title><link>https://cdkworkshop.com/15-prerequisites/600-python.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/15-prerequisites/600-python.html</guid><description>If you are planning on using the Python Workshop, you obviously will need to have Python installed. Specifically, you will need version 3.6 or later. You can find information about downloading and installing Python here.
If you use Windows, be sure Python is on your PATH. To see if it is, type python at a command prompt. The easiest way to make sure Python is on your PATH is to tick the Add Python 3.</description></item><item><title>.NET</title><link>https://cdkworkshop.com/15-prerequisites/700-dotnet.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/15-prerequisites/700-dotnet.html</guid><description>If you are planning on using the .NET Workshop, you obviously will need to have the .NET Core SDK installed. Specifically, you will need version 3.1 or later. You can find information about downloading and installing .NET Core SDK here.
We will be using the .NET Core CLI for this project, so if you are not familiar, please take a look at their documentation.</description></item><item><title>Test the hit counter</title><link>https://cdkworkshop.com/20-typescript/40-hit-counter/700-test.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/20-typescript/40-hit-counter/700-test.html</guid><description>Issue a few test requests Let&amp;rsquo;s issue a few requests and see if our hit counter works. You can also use your web browser to do that:
curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world Open DynamoDB console Go to the DynamoDB console.
Make sure you are in the region where you created the table.
Select Tables in the navigation pane and select the table that starts with CdkWorkdShopStack-HelloHitCounterHits.</description></item><item><title>Test the hit counter</title><link>https://cdkworkshop.com/30-python/40-hit-counter/700-test.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/40-hit-counter/700-test.html</guid><description>Issue a few test requests Let&amp;rsquo;s issue a few requests and see if our hit counter works. You can also use your web browser to do that:
curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world Open DynamoDB console Go to the DynamoDB console.
Make sure you are in the region where you created the table.
Select Tables in the navigation pane and select the table that starts with cdkworkshop-HelloHitCounterHits.</description></item><item><title>Test the hit counter</title><link>https://cdkworkshop.com/40-dotnet/40-hit-counter/700-test.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/40-dotnet/40-hit-counter/700-test.html</guid><description>Issue a few test requests Let&amp;rsquo;s issue a few requests and see if our hit counter works. You can also use your web browser to do that:
curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world Open DynamoDB console Go to the DynamoDB console.
Make sure you are in the region where you created the table.
Select Tables in the navigation pane and select the table that starts with CdkWorkShopStack-HelloHitCounterHits.</description></item><item><title>Test the hit counter</title><link>https://cdkworkshop.com/50-java/40-hit-counter/700-test.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/50-java/40-hit-counter/700-test.html</guid><description>Issue a few test requests Let&amp;rsquo;s issue a few requests and see if our hit counter works. You can also use your web browser to do that:
curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world Open DynamoDB console Go to the DynamoDB console.
Make sure you are in the region where you created the table.
Select Tables in the navigation pane and select the table that starts with CdkWorkdShopStack-HelloHitCounterHits.</description></item><item><title>Java</title><link>https://cdkworkshop.com/15-prerequisites/800-java.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/15-prerequisites/800-java.html</guid><description>If you are planning on using the Java Workshop, you obviously will need to have a JDK installed. Specifically, you will need JDK 11 or later. You can find information about downloading and installing the Amazon Corretto 11 distribution here. Other JDK 11 distributions are available if you do not wish to use Amazon Corretto.</description></item></channel></rss>