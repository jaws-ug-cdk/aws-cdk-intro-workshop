<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AWS CDK Intro Workshop on AWS Cloud Development Kit (AWS CDK) Workshop</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/</link><description>Recent content in AWS CDK Intro Workshop on AWS Cloud Development Kit (AWS CDK) Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/index.xml" rel="self" type="application/rss+xml"/><item><title>開発環境(Cloud9)の準備</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/90-cloud9.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/90-cloud9.html</guid><description>CDKを動かす環境である「Cloud9」の構築 AWSのサービスの一つであるAWS Cloud9を用いることで、 CDKを用いた開発に必要なソフトウェアがインストールされた環境とIDEを簡単に手に入れることができます。
前提事項 AWSアカウントを所有していること AdministratorAccessポリシー相当のIAMユーザーもしくはIAMロールで作業可能なこと 作業は東京リージョン(ap-northeast-1)で実施すること（下図参照） Cloud9の作成 AWS Cloud9(以降、Cloud9）インスタンスを作成します。
AWSマネジメントコンソール上部の [サービス] タブより [Cloud9] を選択します。 Cloud9ダッシュボードの左側ナビゲーションメニューから [Account environments] を選択し、[Create environment] ボタンを押します。 Step1 [Name environment] では、次のように各項目を入力後、 [Next step] ボタンを押します。 項目名 値 Name cdk-workshop-playground Description cdk-workshopで利用をするCloud9インスタンス Step2 [Configure settings] では、次のように各項目を入力・選択後、 [Next step] ボタンを押します。 ネットワークVPC及びサブネットはデフォルトのものを選択してください（デフォルトVPCが存在しない場合、インターネットに接続可能なVPCとサブネットを選択してください）。 項目名 値 Environment type Create a new EC2 instance for environment(direct access) Instance type t3.small (2 GiB RAM + 2 vCPU) Platform Amazon Linux2 (recommended) Cost-saving setting After 30 minutes(default) Network(VPC) vpc-xxxxxxx(default) ※インターネットに接続可能なVPC Subnet subnet-xxxxxxx [Review] にて入力内容を確認し、 [Create environment] ボタンを押します。 以下のようにCloud9コンソールが利用可能であることを確認してください。 以上でCloud9の作成完了です。 以降は、CDKのコマンドを実行する際はCloud9の画面下部にあるターミナルから実施をします。</description></item><item><title>cdk init</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/20-create-project/100-cdk-init.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/20-create-project/100-cdk-init.html</guid><description>プロジェクトディレクトリを作成する 空のディレクトリを作成します。
mkdir cdk-workshop &amp;amp;&amp;amp; cd cdk-workshop cdk init cdk initコマンドを実行して、TypeScript製の新しいCDKプロジェクトを作成します。
cdk init sample-app --language typescript 出力は次のようになります。
# Welcome to your CDK TypeScript project You should explore the contents of this project. It demonstrates a CDK app with an instance of a stack (`CdkWorkshopStack`) which contains an Amazon SQS queue that is subscribed to an Amazon SNS topic. The `cdk.json` file tells the CDK Toolkit how to execute your app. ## Useful commands * `npm run build` compile typescript to js * `npm run watch` watch for changes and compile * `npm run test` perform the jest unit tests * `cdk deploy` deploy this stack to your default AWS account/region * `cdk diff` compare deployed stack with current state * `cdk synth` emits the synthesized CloudFormation template Initializing a new git repository.</description></item><item><title>HitCounter APIの定義</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/100-api.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/100-api.html</guid><description>HitCounterコンストラクト用のファイルの作成 libフォルダ配下に次のようなhitcounter.tsファイルを作成します。
import { IFunction } from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export interface HitCounterProps { /** the function for which we want to count url hits **/ downstream: IFunction; } export class HitCounter extends Construct { constructor(scope: Construct, id: string, props: HitCounterProps) { super(scope, id); // TODO } } ファイルを保存すると、エラーが発生しますが心配いりません。 この後すぐに props プロパティを追加します。
コードの解説 HitCounterという名前のコンストラクトクラスを新しく定義しています。 今までどおり、scope, id, props のコンストラクター引数を設定し、基底クラスである Construct に伝搬させます。 propsは、IFunction型のdownstream というプロパティを含む、HitCounterProps型の引数です。 前の章で作成したLambda関数をここに接続して、HitCountが機能するようにします。 次に、HitCounterのハンドラーコードを記述します。</description></item><item><title>HitCounterハンドラー</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/200-handler.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/200-handler.html</guid><description>HitCounter Lambda ハンドラー HitCounterのLambdaハンドラーコードを記述しましょう。
lambda/hitcounter.tsを作成し、次のコードを追記してください。
import { DynamoDB, Lambda } from &amp;#39;aws-sdk&amp;#39;; export const handler: AWSLambda.APIGatewayProxyHandler = async (event) =&amp;gt; { console.log(&amp;#39;request:&amp;#39;, JSON.stringify(event, undefined, 2)); // create AWS SDK clients const dynamo = new DynamoDB(); const lambda = new Lambda(); // update dynamo entry for &amp;#34;path&amp;#34; with hits++ await dynamo .updateItem({ TableName: process.env.HITS_TABLE_NAME!, Key: { path: { S: event.path } }, UpdateExpression: &amp;#39;ADD hits :incr&amp;#39;, ExpressionAttributeValues: { &amp;#39;:incr&amp;#39;: { N: &amp;#39;1&amp;#39; } }, }) .</description></item><item><title>サンプルコードの削除</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/100-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/100-cleanup.html</guid><description>スタックからサンプルコードを削除する cdk init sample-app によって作成されたプロジェクトには、SQSキューとSNSトピックが含まれます。 このプロジェクトではそれらを使用する予定はないので、 CdkWorkshopStack コンストラクタから削除しましょう。
lib/cdk-workshop-stack.ts を開き、削除します。 最終的には次のようになります。
import { Stack, StackProps } from &amp;#39;aws-cdk-lib&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export class CdkWorkshopStack extends Stack { constructor(scope: Construct, id: string, props?: StackProps) { super(scope, id, props); // nothing here! } } cdk diff これでスタックの中身を修正したことになります。 cdk diffを実行することで、スタックの修正によってどのような変更が発生するのかを画面で確認できます。 これは cdk deploy を実行したときに何が起こるかを確認する安全な方法であり、いつでも使える良いプラクティスです。
cdk diff 出力は次のようになります。
Stack CdkWorkshopStack IAM Statement Changes ┌───┬─────────────────────────────────┬────────┬─────────────────┬───────────────────────────┬──────────────────────────────────────────────────┐ │ │ Resource │ Effect │ Action │ Principal │ Condition │ ├───┼─────────────────────────────────┼────────┼─────────────────┼───────────────────────────┼──────────────────────────────────────────────────┤ │ - │ ${CdkWorkshopQueue50D9D426.</description></item><item><title>Getting Started with Pipelines</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/1000-setting-up.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/1000-setting-up.html</guid><description>Note: This segment of the workshop assumes you have completed the previous sections of the workshop. If you have not, and just want to follow this segment, or you are returning to try this workshop, you can use the code here that represents the last state of the project after adding the tests.
Create Pipeline Stack The first step is to create the stack that will contain our pipeline. Since this is separate from our actual &amp;ldquo;production&amp;rdquo; application, we want this to be entirely self-contained.</description></item><item><title>Create Repository</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/2000-create-repo.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/2000-create-repo.html</guid><description>Create Repo in Pipeline Stack The first step in any good CD pipeline is source control. Here we will create a CodeCommit repository to contain our project code.
Edit the file lib/pipeline-stack.ts as follows.
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as codecommit from &amp;#39;aws-cdk-lib/aws-codecommit&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export class WorkshopPipelineStack extends cdk.Stack { constructor(scope: Construct, id: string, props?: cdk.StackProps) { super(scope, id, props); // Creates a CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; new codecommit.</description></item><item><title>Create New Pipeline</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/3000-new-pipeline.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/3000-new-pipeline.html</guid><description>Define an Empty Pipeline Now we are ready to define the basics of the pipeline.
Return to the file lib/pipeline-stack.ts and edit as follows:
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as codecommit from &amp;#39;aws-cdk-lib/aws-codecommit&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; import {CodeBuildStep, CodePipeline, CodePipelineSource} from &amp;#34;aws-cdk-lib/pipelines&amp;#34;; export class WorkshopPipelineStack extends cdk.Stack { constructor(scope: Construct, id: string, props?: cdk.StackProps) { super(scope, id, props); // This creates a new CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; const repo = new codecommit.</description></item><item><title>Add Application to Pipeline</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/4000-build-stage.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/4000-build-stage.html</guid><description>Create Stage At this point, you have a fully operating CDK pipeline that will automatically update itself on every commit, BUT at the moment, that is all it does. We need to add a stage to the pipeline that will deploy our application.
Create a new file in lib called pipeline-stage.ts with the code below:
import { CdkWorkshopStack } from &amp;#39;./cdk-workshop-stack&amp;#39;; import { Stage, StageProps } from &amp;#39;aws-cdk-lib&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export class WorkshopPipelineStage extends Stage { constructor(scope: Construct, id: string, props?</description></item><item><title>Polish Pipeline</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/5000-test-actions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/5000-test-actions.html</guid><description>Get Endpoints Stepping back, we can see a problem now that our app is being deployed by our pipeline. There is no easy way to find the endpoints of our application (the TableViewer and APIGateway endpoints), so we can&amp;rsquo;t call it! Let&amp;rsquo;s add a little bit of code to expose these more obviously.
First edit lib/cdk-workshop-stack.ts to get these values and expose them as properties of our stack:
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as lambda from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import * as apigw from &amp;#39;aws-cdk-lib/aws-apigateway&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; import { HitCounter } from &amp;#39;.</description></item><item><title>Cleanup</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/6000-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/6000-cleanup.html</guid><description>To clean up the stacks from this workshop, navigate to the Cloudformation Console, select your stacks, and hit &amp;ldquo;Delete&amp;rdquo;. This may take some time.</description></item><item><title>Assertion Tests</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/100-construct-testing/1000-assertion-test.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/100-construct-testing/1000-assertion-test.html</guid><description>Fine-Grained Assertion Tests Create a test for the DynamoDB table This section assumes that you have created the hit counter construct Our HitCounter construct creates a simple DynamoDB table. Lets create a test that validates that the table is getting created.
If cdk init created a test directory for you, then you should have a cdk-workshop.test.ts file. Delete this file.
If you do not already have a test directory (usually created automatically when you run cdk init), then create a test directory at the same level as bin and lib and then create a file called hitcounter.</description></item><item><title>Hello Lambda</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/200-lambda.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/200-lambda.html</guid><description>Lambda handler code まずは、Lambda handlerのコードから書いていきます。
次のコマンドでLambdaをTypeScriptで記述しやすくするモジュールをインストールします。 npm install --save-dev esbuild@0 @types/aws-lambda aws-sdk cdk-workshopディレクトリにlambdaディレクトリを作成します。 lambda/hello.tsというファイルを追加し、以下の内容を記述します。 export const handler: AWSLambda.APIGatewayProxyHandler = async (event) =&amp;gt; { console.log(&amp;#34;request:&amp;#34;, JSON.stringify(event, undefined, 2)); return { statusCode: 200, headers: { &amp;#34;Content-Type&amp;#34;: &amp;#34;text/plain&amp;#34; }, body: `Hello, CDK! You&amp;#39;ve hit ${event.path}\n` }; }; これは、「Hello, CDK! You’ve hit [url path]」というテキストを返す単純なLambda関数です。 HTTPステータスコードとHTTPヘッダーが付加されたHTTPレスポンスとしてユーザーに応答するために、API Gatewayを使用します。
このLambda関数はTypeScriptで実装されていますが、実際のLambda上ではJavaScriptに変換されたコードが動作します。 これは、デプロイ時にはCDKがesbuildでJavaScriptにビルドしてくれるためです。 その他の言語での実装についてはAWS Lambdaのドキュメントを参照してください。
コピー＆ペーストは使わずにコードを書いてみましょう このワークショップでは、コピー&amp;amp;ペーストをするのではなく、実際にCDKのコードを入力することを強く推奨します（通常、入力する量は多くありません）。 これにより、CDKの使い方についてより理解していただけます。 IDEがオートコンプリート、インラインドキュメント、およびタイプセーフに対応しているのがご理解いただけるでしょう。
AWS Lambda関数をスタックに追加する importステートメントをlib/cdk-workshop-stack.tsの冒頭に挿入し、lambda.Functionをスタックに追加します。
import { Stack, StackProps } from &amp;#39;aws-cdk-lib&amp;#39;; import { Runtime } from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import { NodejsFunction } from &amp;#39;aws-cdk-lib/aws-lambda-nodejs&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export class CdkWorkshopStack extends Stack { constructor(scope: Construct, id: string, props?</description></item><item><title>Validation Tests</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/100-construct-testing/2000-validation-tests.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/100-construct-testing/2000-validation-tests.html</guid><description>Validation Tests Sometimes we want the inputs to be configurable, but we also want to put constraints on those inputs or validate that the input is valid.
Suppose for the HitCounter construct we want to allow the user to specify the readCapacity on the DynamoDB table, but we also want to ensure the value is within a reasonable range. We can write a test to make sure that the validation logic works: pass in invalid values and see what happens.</description></item><item><title>プロジェクト構造</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/20-create-project/300-structure.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/20-create-project/300-structure.html</guid><description>IDEを開く 使い慣れたIDEでプロジェクトを開いてみましょう。
Cloud9 を使用する場合は、すでにIDEの画面で操作を行っています。
VSCodeを使用する場合は、 code . コマンドをプロジェクトディレクトリ内で実行すれば簡単に開けます。
プロジェクトディレクトリを確認する 以下のようなディレクトリ構成が確認できます。
lib/cdk-workshop-stack.ts CDKアプリケーションのメインスタックが定義されます。 今回のワークショップではこのファイルを主に修正します。 bin/cdk-workshop.ts CDKアプリケーションのエントリポイントです。 lib/cdk-workshop-stack.ts で定義されたスタックをロードします。 package.json npmモジュールのマニフェストです。 アプリの名前、バージョン、依存関係、&amp;ldquo;watch&amp;rdquo; や &amp;ldquo;build&amp;rdquo; 用のビルドスクリプトなどの情報が含まれます（package-lock.json はnpmによって管理されます） cdk.json アプリの実行方法をツールキットに指示させるためのファイルです。 今回の場合は、 &amp;quot;npx ts-node bin/cdk-workshop.ts&amp;quot; です。 tsconfig.json プロジェクトの TypeScript設定 です。 .gitignore, .npmignore Gitとnpm用のファイルです。 ソースコードの管理に含める/除外するファイルと、パッケージマネージャーへの公開用設定が含まれています。 node_modules npmによって管理され、プロジェクトのすべての依存関係が含まれます。 アプリのエントリポイント bin/cdk-workshop.tsを簡単に見てみましょう。
#!/usr/bin/env node import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import { CdkWorkshopStack } from &amp;#39;../lib/cdk-workshop-stack&amp;#39;; const app = new cdk.App(); new CdkWorkshopStack(app, &amp;#39;CdkWorkshopStack&amp;#39;); このコードは、lib/cdk-workshop-stack.tsファイルを開き、 CdkWorkshopStack クラス をロードして初期化するものです。 一度読んだら、もうこのファイルを見る必要はありません。</description></item><item><title>リソースの定義</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/300-resources.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/300-resources.html</guid><description>HitCounterコンストラクトにリソースを追加する 次に、Lambda関数とDynamoDBテーブルをHitCounterコンストラクトに定義します。
lib/hitcounter.ts に戻って、以下のコードを追記しましょう。
import { AttributeType, Table } from &amp;#39;aws-cdk-lib/aws-dynamodb&amp;#39;; import { IFunction, Runtime } from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import { NodejsFunction } from &amp;#39;aws-cdk-lib/aws-lambda-nodejs&amp;#39;; import { RemovalPolicy } from &amp;#39;aws-cdk-lib&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export interface HitCounterProps { /** the function for which we want to count url hits **/ downstream: IFunction; } export class HitCounter extends Construct { /** allows accessing the counter function */ public readonly handler: IFunction; constructor(scope: Construct, id: string, props: HitCounterProps) { super(scope, id); const table = new Table(this, &amp;#39;Hits&amp;#39;, { partitionKey: { name: &amp;#39;path&amp;#39;, type: AttributeType.</description></item><item><title>参考：CDK Watch</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/300-cdk-watch.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/300-cdk-watch.html</guid><description>より高速なデプロイ このセクションはワークショップを完了するために必要ではありませんが、 cdk deploy --hotswap と cdk watch がどのようにデプロイを高速化するのか見てみましょう。
lambdaが動作するようになりましたね！ しかし、もしlambdaのコードを微調整して正しく動作させたい場合はどうしたらよいでしょうか？ 例えば、lambda関数を「Hello, CDK」ではなく「Good Morning, CDK!」と応答させることに決めたとしましょう。
今のところ、スタックを更新するために使えるツールは cdk deploy しかないように思えます。 しかし、cdk deployには時間がかかります。 CloudFormationスタックをデプロイして、lambdaディレクトリをbootstrapバケットにアップロードしなければならないからです。 lambdaのコードを変更するだけならCloudFormationスタックを更新する必要はないので、cdk deployの部分は無駄な労力となります。
本当に必要なのは、lambdaコードの更新だけなのです。 それだけを行うための他のメカニズムがあれば最高なのですが&amp;hellip;。
cdk deploy にかかる時間を測ってみる まず、cdk deployを実行するのにかかる時間を計ってみましょう。 これは、CloudFormationのフルデプロイにどれくらい時間がかかるかの基準値になります。 そのために、lambda/hello.ts 内のコードを変更します。
export const handler: AWSLambda.APIGatewayProxyHandler = async (event) =&amp;gt; { console.log(&amp;#34;request:&amp;#34;, JSON.stringify(event, undefined, 2)); return { statusCode: 200, headers: { &amp;#34;Content-Type&amp;#34;: &amp;#34;text/plain&amp;#34; }, body: `Good Morning, CDK! You&amp;#39;ve hit ${event.path}\n` }; }; 変更が cdk deploy を実行してみましょう。
cdk deploy 出力は次のようになります。</description></item><item><title>API Gateway</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/400-apigw.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/400-apigw.html</guid><description>次のステップでは、Amazon API Gateway（以降、API Gateway）を関数の前に追加していきます。 API GatewayはパブリックHTTPエンドポイントを公開します。このエンドポイントは、インターネット上の誰もが curlやウェブブラウザのようなHTTPクライアントでヒットできます。
API Gatewayのルートには、 Lambda proxy integrationを利用します。 これは、どのURLパスへのリクエストも、直接Lambda関数にプロキシされ、関数からのレスポンスがユーザーに返される動作となります。
LambdaRestApi コンストラクトを追加する lib/cdk-workshop-stack.ts に戻り、APIエンドポイントを定義してLambda関数に関連付けましょう。
import { Stack, StackProps } from &amp;#39;aws-cdk-lib&amp;#39;; import { LambdaRestApi } from &amp;#39;aws-cdk-lib/aws-apigateway&amp;#39;; import { Runtime } from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import { NodejsFunction } from &amp;#39;aws-cdk-lib/aws-lambda-nodejs&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export class CdkWorkshopStack extends Stack { constructor(scope: Construct, id: string, props?: StackProps) { super(scope, id, props); // AWS Lambdaリソースを定義 const hello = new NodejsFunction(this, &amp;#39;HelloHandler&amp;#39;, { runtime: Runtime.</description></item><item><title>cdk synth</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/20-create-project/400-synth.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/20-create-project/400-synth.html</guid><description>アプリからテンプレートを生成する AWS CDKアプリ自体はコードを使用したインフラストラクチャの 定義 にすぎません。 CDKアプリが実行されると、アプリケーションで定義された各スタックのAWS CloudFormationテンプレートが生成（CDKの用語では &amp;quot;synthesize&amp;quot; ）されます。
CDKアプリを生成するには、 cdk synth コマンドを実行してください。 サンプルアプリから生成されたCloudFormationテンプレートを確認してみましょう。
CDK CLI はcdk.jsonファイルが配置されているプロジェクトのルートディレクトリで実行する必要があります。 ディレクトリを移動している場合はプロジェクトのルートディレクトリに戻ってからCDKコマンドを実行してください。
cdk synth 上記コマンドを実行すると、次のCloudFormationテンプレートを出力します。
Resources: CdkWorkshopQueue50D9D426: Type: AWS::SQS::Queue Properties: VisibilityTimeout: 300 UpdateReplacePolicy: Delete DeletionPolicy: Delete Metadata: aws:cdk:path: CdkWorkshopStack/CdkWorkshopQueue/Resource CdkWorkshopQueuePolicyAF2494A5: Type: AWS::SQS::QueuePolicy Properties: PolicyDocument: Statement: - Action: sqs:SendMessage Condition: ArnEquals: aws:SourceArn: Ref: CdkWorkshopTopicD368A42F Effect: Allow Principal: Service: sns.amazonaws.com Resource: Fn::GetAtt: - CdkWorkshopQueue50D9D426 - Arn Version: &amp;#34;2012-10-17&amp;#34; Queues: - Ref: CdkWorkshopQueue50D9D426 Metadata: aws:cdk:path: CdkWorkshopStack/CdkWorkshopQueue/Policy/Resource CdkWorkshopQueueCdkWorkshopStackCdkWorkshopTopicD7BE96438B5AD106: Type: AWS::SNS::Subscription Properties: Protocol: sqs TopicArn: Ref: CdkWorkshopTopicD368A42F Endpoint: Fn::GetAtt: - CdkWorkshopQueue50D9D426 - Arn Metadata: aws:cdk:path: CdkWorkshopStack/CdkWorkshopQueue/CdkWorkshopStackCdkWorkshopTopicD7BE9643/Resource CdkWorkshopTopicD368A42F: Type: AWS::SNS::Topic Metadata: aws:cdk:path: CdkWorkshopStack/CdkWorkshopTopic/Resource CDKMetadata: Type: AWS::CDK::Metadata Properties: Analytics: v2:deflate64:H4sIAAAAAAAA/1WNQQrCMBBFz9J9OhoFxXUvoK17aZMI09akZhJFQu5uk4DgZv7/jwezg/0JeNW/qRZyqmccIHSuFxNb0S3QkyBcvPKKNXddSr5nM6P4/GCZkZFe/c4PJCwuDo1Oxt++mgVFornEmGqryHgr8o/GaInJjEwbqWCkzYsfgB9hW42EWFuvHT4UtCW/VHqIZsEAAAA= Metadata: aws:cdk:path: CdkWorkshopStack/CDKMetadata/Default Condition: CDKMetadataAvailable Conditions: CDKMetadataAvailable: Fn::Or: - Fn::Or: - Fn::Equals: - Ref: AWS::Region - af-south-1 - Fn::Equals: - Ref: AWS::Region - ap-east-1 - Fn::Equals: - Ref: AWS::Region - ap-northeast-1 - Fn::Equals: - Ref: AWS::Region - ap-northeast-2 - Fn::Equals: - Ref: AWS::Region - ap-south-1 - Fn::Equals: - Ref: AWS::Region - ap-southeast-1 - Fn::Equals: - Ref: AWS::Region - ap-southeast-2 - Fn::Equals: - Ref: AWS::Region - ca-central-1 - Fn::Equals: - Ref: AWS::Region - cn-north-1 - Fn::Equals: - Ref: AWS::Region - cn-northwest-1 - Fn::Or: - Fn::Equals: - Ref: AWS::Region - eu-central-1 - Fn::Equals: - Ref: AWS::Region - eu-north-1 - Fn::Equals: - Ref: AWS::Region - eu-south-1 - Fn::Equals: - Ref: AWS::Region - eu-west-1 - Fn::Equals: - Ref: AWS::Region - eu-west-2 - Fn::Equals: - Ref: AWS::Region - eu-west-3 - Fn::Equals: - Ref: AWS::Region - me-south-1 - Fn::Equals: - Ref: AWS::Region - sa-east-1 - Fn::Equals: - Ref: AWS::Region - us-east-1 - Fn::Equals: - Ref: AWS::Region - us-east-2 - Fn::Or: - Fn::Equals: - Ref: AWS::Region - us-west-1 - Fn::Equals: - Ref: AWS::Region - us-west-2 Parameters: BootstrapVersion: Type: AWS::SSM::Parameter::Value&amp;lt;String&amp;gt; Default: /cdk-bootstrap/hnb659fds/version Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store.</description></item><item><title>HitCounterの使用</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/400-use.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/400-use.html</guid><description>スタックにHitCounterを追加する HitCounterの準備ができましたのでアプリに実装していきましょう。 lib/cdk-workshop-stack.tsを開き、次の強調表示されたコードを追加します。
import { Stack, StackProps } from &amp;#39;aws-cdk-lib&amp;#39;; import { LambdaRestApi } from &amp;#39;aws-cdk-lib/aws-apigateway&amp;#39;; import { Runtime } from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import { NodejsFunction } from &amp;#39;aws-cdk-lib/aws-lambda-nodejs&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; import { HitCounter } from &amp;#39;./hitcounter&amp;#39;; export class CdkWorkshopStack extends Stack { constructor(scope: Construct, id: string, props?: StackProps) { super(scope, id, props); // AWS Lambdaリソースを定義 const hello = new NodejsFunction(this, &amp;#39;HelloHandler&amp;#39;, { runtime: Runtime.NODEJS_16_X, entry: &amp;#39;lambda/hello.ts&amp;#39;, }); const helloWithCounter = new HitCounter(this, &amp;#39;HelloHitCounter&amp;#39;, { downstream: hello, }); // &amp;#34;hello&amp;#34; 関数をバックに持つAPI Gateway REST APIリソースを定義 new LambdaRestApi(this, &amp;#39;Endpoint&amp;#39;, { handler: helloWithCounter.</description></item><item><title>cdk deploy</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/20-create-project/500-deploy.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/20-create-project/500-deploy.html</guid><description>CloudFormationテンプレートが作成されました。次は何を行うでしょうか？ AWSへのデプロイをしましょう！
環境の初期構築 AWS CDKアプリを環境（アカウント/リージョン）に初めてデプロイするときは、Bootstrapスタックを構築する必要があります。 このスタックには、ツールキットの操作に必要なリソースが含まれています。 たとえば、スタックにはデプロイプロセスで使われるCloudformationテンプレートとアセットを保存するために使用されるS3バケットが含まれます。
cdk bootstrap コマンドを実行すれば、bootstrapスタックがAWS環境にデプロイされます。
cdk bootstrap 実行すると以下のように表示されます。
⏳ Bootstrapping environment aws://999999999999/us-east-1... ... アクセス拒否エラーとなるときはAWS CLIのクレデンシャル情報が正しく設定されているか、 現在のプロファイルが CloudFormationのcloudformation:CreateChangeSetを実行する権限を持っているか確認してください。
デプロイしましょう！ cdk deploy コマンドを使用することで、CDKアプリをデプロイできます。
cdk deploy 次のような警告が表示されるはずです。
This deployment will make potentially sensitive changes according to your current security approval level (--require-approval broadening). Please confirm you intend to make the following modifications: IAM Statement Changes ┌───┬─────────────────────────┬────────┬─────────────────┬───────────────────────────┬─────────────────────────────────────────────────────────┐ │ │ Resource │ Effect │ Action │ Principal │ Condition │ ├───┼─────────────────────────┼────────┼─────────────────┼───────────────────────────┼─────────────────────────────────────────────────────────┤ │ + │ ${CdkWorkshopQueue.</description></item><item><title>HitCounterのテスト</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/700-test.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/700-test.html</guid><description>テスト呼び出し いくつかのリクエストを実行して、HitCounterが機能するかどうかを確認しましょう。curlコマンド、またはWebブラウザから確認ができます。
curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world もし、5XXエラーとなる場合は、Lambdaのコンソール画面からHitCounterのログを確認してみてください。 問題点がある場合は問い合わせをお願いします。
DynamoDBコンソールを開く DynamoDBコンソールに移動します。
テーブルを作成したリージョンにいることを確認してください。手順どおりであれば東京リージョンにいることを確認しましょう。
ナビゲーションペインから「テーブル」を選択し、CdkWorkShopStack-HelloHitCounterHitsで始まるテーブルを選択してください。
テーブルを開き、「テーブルアイテムの探索」を選択します。
各パスで取得したヒット数を確認します。
新しいパスでAPIを叩き、アイテムビューを更新してください。 hitsカウントが1の新しいアイテムが表示されます。
Good job! HitCounterは便利だということがご理解いただけたと思います。 基本的に、誰でもAPI Gatewayのプロキシバックエンドとして機能するLambda関数にアタッチでき、このAPIのカウントを記録できます。
HitCounterはTypeScriptクラスであるため、npmモジュールをパッケージ化して、 JavaScriptパッケージマネージャーであるnpmjs.orgに公開できます。 公開後は誰でもnpm install でインストールでき、CDKアプリに追加できます。
現時点で用意しているハンズオンはコンテンツは以上です。おつかれさまでした。 cleanup sectionを参考に、リソースの削除を忘れないようにしましょう。</description></item></channel></rss>