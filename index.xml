<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AWS CDK Intro Workshop on AWS Cloud Development Kit (AWS CDK) Workshop</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/</link><description>Recent content in AWS CDK Intro Workshop on AWS Cloud Development Kit (AWS CDK) Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/index.xml" rel="self" type="application/rss+xml"/><item><title>cdk init</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/20-create-project/100-cdk-init.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/20-create-project/100-cdk-init.html</guid><description>プロジェクトディレクトリを作成する 空のディレクトリを作成します。
mkdir cdk-workshop &amp;amp;&amp;amp; cd cdk-workshop cdk init cdk initコマンドを実行して、TypeScript製の新しいCDKプロジェクトを作成します。
cdk init sample-app --language typescript 出力は次のようになります。
# Welcome to your CDK TypeScript project You should explore the contents of this project. It demonstrates a CDK app with an instance of a stack (`CdkWorkshopStack`) which contains an Amazon SQS queue that is subscribed to an Amazon SNS topic. The `cdk.json` file tells the CDK Toolkit how to execute your app. ## Useful commands * `npm run build` compile typescript to js * `npm run watch` watch for changes and compile * `npm run test` perform the jest unit tests * `cdk deploy` deploy this stack to your default AWS account/region * `cdk diff` compare deployed stack with current state * `cdk synth` emits the synthesized CloudFormation template Initializing a new git repository.</description></item><item><title>cdk init</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/20-create-project/100-cdk-init.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/20-create-project/100-cdk-init.html</guid><description>Create project directory Create an empty directory on your system:
mkdir cdk_workshop &amp;amp;&amp;amp; cd cdk_workshop cdk init We will use cdk init to create a new Python CDK project:
cdk init sample-app --language python Output should look like this (you can safely ignore warnings about initialization of a git repository, this probably means you don&amp;rsquo;t have git installed, which is fine for this workshop):
Applying project template sample-app for python Initializing a new git repository.</description></item><item><title>cdk init</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/20-create-project/100-cdk-init.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/20-create-project/100-cdk-init.html</guid><description>Create project directory Create an empty directory on your system:
mkdir cdk-workshop &amp;amp;&amp;amp; cd cdk-workshop cdk init We will use cdk init to create a new C# CDK project:
cdk init sample-app --language csharp Output should look like this (you can safely ignore warnings about initialization of a git repository, this probably means you don&amp;rsquo;t have git installed, which is fine for this workshop):
Applying project template sample-app for csharp Project &amp;#39;CdkWorkshop/CdkWorkshop.</description></item><item><title>cdk init</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/20-create-project/100-cdk-init.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/20-create-project/100-cdk-init.html</guid><description>Create project directory Create an empty directory on your system:
mkdir cdk-workshop &amp;amp;&amp;amp; cd cdk-workshop cdk init We will use cdk init to create a new Java CDK project:
cdk init sample-app --language java Output should look like this (you can safely ignore warnings about initialization of a git repository, this probably means you don&amp;rsquo;t have git installed, which is fine for this workshop):
Applying project template sample-app for java # Welcome to your CDK Java project!</description></item><item><title>Cleanup sample</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/30-hello-cdk/100-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/30-hello-cdk/100-cleanup.html</guid><description>Delete the sample code from your stack The project created by cdk init sample-app includes an SQS queue and queue policy, an SNS topic and subscription. We&amp;rsquo;re not going to use them in our project, so remove them from the CdkWorkshopStack constructor.
Open cdk_workshop/cdk_workshop_stack.py and clean it up. Eventually it should look like this:
from constructs import Construct from aws_cdk import ( Stack, ) class CdkWorkshopStack(Stack): def __init__(self, scope: Construct, id: str, **kwargs) -&amp;gt; None: super().</description></item><item><title>Cleanup sample</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/30-hello-cdk/100-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/30-hello-cdk/100-cleanup.html</guid><description>Delete the sample code from your stack The project created by cdk init sample-app includes an SQS queue, and an SNS topic. We&amp;rsquo;re not going to use them in our project, so remove them from the CdkWorkshopStack constructor.
Open src/CdkWorkshop/CdkWorkshopStack.cs and clean it up. Eventually it should look like this:
using Amazon.CDK; using Constructs; namespace CdkWorkshop { public class CdkWorkshopStack : Stack { public CdkWorkshopStack(Construct scope, string id, IStackProps props = null) : base(scope, id, props) { // Nothing here!</description></item><item><title>Cleanup sample</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/30-hello-cdk/100-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/30-hello-cdk/100-cleanup.html</guid><description>Delete the sample code from your stack The project created by cdk init sample-app includes an SQS queue, and an SNS topic. We&amp;rsquo;re not going to use them in our project, so remove them from your the CdkWorkshopStack constructor.
Open ~/CdkWorkshopStack.java and clean it up. Eventually it should look like this:
package com.myorg; import software.constructs.Construct; import software.amazon.awscdk.Stack; import software.amazon.awscdk.StackProps; public class CdkWorkshopStack extends Stack { public CdkWorkshopStack(final Construct parent, final String id) { this(parent, id, null); } public CdkWorkshopStack(final Construct parent, final String id, final StackProps props) { super(parent, id, props); // Nothing here!</description></item><item><title>Define the HitCounter API</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/100-api.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/100-api.html</guid><description>Create a new file for our hit counter construct Create a new file under cdk_workshop called hitcounter.py with the following content:
from constructs import Construct from aws_cdk import ( aws_lambda as _lambda, ) class HitCounter(Construct): def __init__(self, scope: Construct, id: str, downstream: _lambda.IFunction, **kwargs): super().__init__(scope, id, **kwargs) # TODO Save the file.
What&amp;rsquo;s going on here? We declared a new construct class called HitCounter. As usual, constructor arguments are scope, id and kwargs, and we propagate them to the cdk.</description></item><item><title>Define the HitCounter API</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/100-api.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/100-api.html</guid><description>Create a new file for our hit counter construct Create a new file under src/CdkWorkshop called HitCounter.cs with the following content:
using Amazon.CDK; using Amazon.CDK.AWS.Lambda; using Constructs; namespace CdkWorkshop { public class HitCounterProps { // The function for which we want to count url hits public IFunction Downstream { get; set; } } public class HitCounter : Construct { public HitCounter(Construct scope, string id, HitCounterProps props) : base(scope, id) { // TODO } } } Save the file.</description></item><item><title>Define the HitCounter API</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/40-hit-counter/100-api.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/40-hit-counter/100-api.html</guid><description>Create a new file for our hit counter construct Create two new files under src/main/java/com/myorg called HitCounterProps.java with the following content:
package com.myorg; import software.amazon.awscdk.services.lambda.IFunction; public interface HitCounterProps { // Public constructor for the props builder public static Builder builder() { return new Builder(); } // The function for which we want to count url hits IFunction getDownstream(); // The builder for the props interface public static class Builder { private IFunction downstream; public Builder downstream(final IFunction function) { this.</description></item><item><title>Hit counter handler</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/200-handler.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/200-handler.html</guid><description>Hit counter Lambda handler Okay, now let&amp;rsquo;s write the Lambda handler code for our hit counter.
Create the file lambda/hitcount.py:
import json import os import boto3 ddb = boto3.resource(&amp;#39;dynamodb&amp;#39;) table = ddb.Table(os.environ[&amp;#39;HITS_TABLE_NAME&amp;#39;]) _lambda = boto3.client(&amp;#39;lambda&amp;#39;) def handler(event, context): print(&amp;#39;request: {}&amp;#39;.format(json.dumps(event))) table.update_item( Key={&amp;#39;path&amp;#39;: event[&amp;#39;path&amp;#39;]}, UpdateExpression=&amp;#39;ADD hits :incr&amp;#39;, ExpressionAttributeValues={&amp;#39;:incr&amp;#39;: 1} ) resp = _lambda.invoke( FunctionName=os.environ[&amp;#39;DOWNSTREAM_FUNCTION_NAME&amp;#39;], Payload=json.dumps(event), ) body = resp[&amp;#39;Payload&amp;#39;].read() print(&amp;#39;downstream response: {}&amp;#39;.format(body)) return json.loads(body) Discovering resources at runtime You&amp;rsquo;ll notice that this code relies on two environment variables:</description></item><item><title>Hit counter handler</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/200-handler.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/200-handler.html</guid><description>Hit counter Lambda handler Okay, now let&amp;rsquo;s write the Lambda handler code for our hit counter.
Create the file lambda/hitcounter.js:
const { DynamoDB, Lambda } = require(&amp;#39;aws-sdk&amp;#39;); exports.handler = async function(event) { console.log(&amp;#34;request:&amp;#34;, JSON.stringify(event, undefined, 2)); // create AWS SDK clients const dynamo = new DynamoDB(); const lambda = new Lambda(); // update dynamo entry for &amp;#34;path&amp;#34; with hits++ await dynamo.updateItem({ TableName: process.env.HITS_TABLE_NAME, Key: { path: { S: event.path } }, UpdateExpression: &amp;#39;ADD hits :incr&amp;#39;, ExpressionAttributeValues: { &amp;#39;:incr&amp;#39;: { N: &amp;#39;1&amp;#39; } } }).</description></item><item><title>Hit counter handler</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/40-hit-counter/200-handler.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/40-hit-counter/200-handler.html</guid><description>Hit counter Lambda handler Okay, now let&amp;rsquo;s write the Lambda handler code for our hit counter.
Create the file lambda/hitcounter.js:
const { DynamoDB, Lambda } = require(&amp;#39;aws-sdk&amp;#39;); exports.handler = async function(event) { console.log(&amp;#34;request:&amp;#34;, JSON.stringify(event, undefined, 2)); // create AWS SDK clients const dynamo = new DynamoDB(); const lambda = new Lambda(); // update dynamo entry for &amp;#34;path&amp;#34; with hits++ await dynamo.updateItem({ TableName: process.env.HITS_TABLE_NAME, Key: { path: { S: event.path } }, UpdateExpression: &amp;#39;ADD hits :incr&amp;#39;, ExpressionAttributeValues: { &amp;#39;:incr&amp;#39;: { N: &amp;#39;1&amp;#39; } } }).</description></item><item><title>HitCounter APIの定義</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/100-api.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/100-api.html</guid><description>HitCounterコンストラクト用のファイルの作成 libフォルダ配下に次のようなhitcounter.tsファイルを作成します。
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as lambda from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export interface HitCounterProps { /** the function for which we want to count url hits **/ downstream: lambda.IFunction; } export class HitCounter extends Construct { constructor(scope: Construct, id: string, props: HitCounterProps) { super(scope, id); // TODO } } ファイルを保存すると、エラーが発生しますが心配いりません。 この後すぐに props プロパティを追加します。
コードの解説 HitCounterという名前のコンストラクトクラスを新しく定義しています。 今までどおり、scope, id, props のコンストラクター引数を設定し、基底クラスである cdk.Construct に伝搬させます。 propsは、lambda.</description></item><item><title>HitCounterハンドラー</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/200-handler.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/200-handler.html</guid><description>HitCounter Lambda ハンドラー HitCounterのLambdaハンドラーコードを記述しましょう。
lambda/hitcounter.jsを作成し、次のコードを追記してください。
const { DynamoDB, Lambda } = require(&amp;#39;aws-sdk&amp;#39;); exports.handler = async function(event) { console.log(&amp;#34;request:&amp;#34;, JSON.stringify(event, undefined, 2)); // create AWS SDK clients const dynamo = new DynamoDB(); const lambda = new Lambda(); // update dynamo entry for &amp;#34;path&amp;#34; with hits++ await dynamo.updateItem({ TableName: process.env.HITS_TABLE_NAME, Key: { path: { S: event.path } }, UpdateExpression: &amp;#39;ADD hits :incr&amp;#39;, ExpressionAttributeValues: { &amp;#39;:incr&amp;#39;: { N: &amp;#39;1&amp;#39; } } }).promise(); // call downstream function and capture response const resp = await lambda.</description></item><item><title>Learning about the Table Viewer construct</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/50-table-viewer/100-discovery.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/50-table-viewer/100-discovery.html</guid><description>Reading documentation Browse to the cdk-dynamo-table-view page on pypi.org and read the module documentation.
There is some documentation about how to use the table viewer in the README but it is all focused on TypeScript rather than Python. So, we will walk through the process of using a third-party construct in Python.
As mentioned in the README page of this library, it is not intended for production use. Namely because it will expose contents from your DynamoDB table to anyone without authentication.</description></item><item><title>Learning about the Table Viewer construct</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/100-discovery.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/100-discovery.html</guid><description>Reading documentation Browse to the DynamoTableViewer page on github and read the module documentation.
As mentioned in the README page of this library, it is not intended for production use. Namely because it will expose contents from your DynamoDB table to anyone without authentication.</description></item><item><title>Learning about the Table Viewer construct</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/50-table-viewer/100-discovery.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/50-table-viewer/100-discovery.html</guid><description>Reading documentation Browse to the cdk-dynamo-table-viewer page on Github if you want to read the module documentation.
As mentioned in the README page of this library, it is not intended for production use. Namely because it will expose contents from your DynamoDB table to anyone without authentication.</description></item><item><title>サンプルコードの削除</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/100-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/100-cleanup.html</guid><description>スタックからサンプルコードを削除する cdk init sample-app によって作成されたプロジェクトには、SQSキューとSNSトピックが含まれます。 このプロジェクトではそれらを使用する予定はないので、 CdkWorkshopStack コンストラクタから削除しましょう。
lib/cdk-workshop-stack.ts を開き、削除します。 最終的には次のようになります。
import { Stack, StackProps } from &amp;#39;aws-cdk-lib&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export class CdkWorkshopStack extends Stack { constructor(scope: Construct, id: string, props?: StackProps) { super(scope, id, props); // nothing here! } } cdk diff これでスタックの中身を修正したことになります。 cdk diffを実行することで、スタックの修正によってどのような変更が発生するのかをツールキットで確認できます。 これは cdk deploy を実行したときに何が起こるかを確認する安全な方法であり、いつでも使える良いプラクティスです。
cdk diff 出力は次のようになります。
Stack CdkWorkshopStack IAM Statement Changes ┌───┬─────────────────────────────────┬────────┬─────────────────┬───────────────────────────┬──────────────────────────────────────────────────┐ │ │ Resource │ Effect │ Action │ Principal │ Condition │ ├───┼─────────────────────────────────┼────────┼─────────────────┼───────────────────────────┼──────────────────────────────────────────────────┤ │ - │ ${CdkWorkshopQueue50D9D426.</description></item><item><title>Getting Started with Pipelines</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/1000-setting-up.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/1000-setting-up.html</guid><description>Note: This segment of the workshop assumes you have completed the previous sections of the workshop. If you have not, and just want to follow this segment, or you are returning to try this workshop, you can use the code here that represents the last state of the project after adding the tests.
Create Pipeline Stack The first step is to create the stack that will contain our pipeline. Since this is separate from our actual &amp;ldquo;production&amp;rdquo; application, we want this to be entirely self-contained.</description></item><item><title>Getting Started with Pipelines</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/70-advanced-topics/200-pipelines/1000-setting-up.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/70-advanced-topics/200-pipelines/1000-setting-up.html</guid><description>Note: This segment of the workshop assumes you have completed the previous sections of the workshop. If you have not, and just want to follow this segment, or you are returning to try this workshop, you can use the code here that represents the last state of the project after adding the tests.
Create Pipeline Stack The first step is to create the stack that will contain our pipeline. Since this is separate from our actual &amp;ldquo;production&amp;rdquo; application, we want this to be entirely self-contained.</description></item><item><title>Getting Started with Pipelines</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/70-advanced-topics/100-pipelines/1000-setting-up.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/70-advanced-topics/100-pipelines/1000-setting-up.html</guid><description>Note: This segment of the workshop assumes you have completed the previous sections of the workshop. If you have not, and just want to follow this segment, or you are returning to try this workshop, you can use the code here that represents the last state of the project after adding the tests.
Create Pipeline Stack The first step is to create the stack that will contain our pipeline. Since this is separate from our actual &amp;ldquo;production&amp;rdquo; application, we want this to be entirely self-contained.</description></item><item><title>Getting Started with Pipelines</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/70-advanced-topics/100-pipelines/1000-setting-up.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/70-advanced-topics/100-pipelines/1000-setting-up.html</guid><description>Note: This segment of the workshop assumes you have completed the previous sections of the workshop. If you have not, and just want to follow this segment, or you are returning to try this workshop, you can use the code here that represents the last state of the project after adding the tests.
Create Pipeline Stack The first step is to create the stack that will contain our pipeline. Since this is separate from our actual &amp;ldquo;production&amp;rdquo; application, we want this to be entirely self-contained.</description></item><item><title>Create Repository</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/2000-create-repo.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/2000-create-repo.html</guid><description>Create Repo in Pipeline Stack The first step in any good CD pipeline is source control. Here we will create a CodeCommit repository to contain our project code.
Edit the file lib/pipeline-stack.ts as follows.
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as codecommit from &amp;#39;aws-cdk-lib/aws-codecommit&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export class WorkshopPipelineStack extends cdk.Stack { constructor(scope: Construct, id: string, props?: cdk.StackProps) { super(scope, id, props); // Creates a CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; new codecommit.</description></item><item><title>Create Repository</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/70-advanced-topics/200-pipelines/2000-create-repo.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/70-advanced-topics/200-pipelines/2000-create-repo.html</guid><description>Create Repo in Pipeline Stack The first step in any good CD pipeline is source control. Here we will create a CodeCommit repository to contain our project code.
Edit the file cdk_workshop/pipeline_stack.py as follows.
from constructs import Construct from aws_cdk import ( Stack, aws_codecommit as codecommit, ) class WorkshopPipelineStack(Stack): def __init__(self, scope: Construct, id: str, **kwargs) -&amp;gt; None: super().__init__(scope, id, **kwargs) # Creates a CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; repo = codecommit.</description></item><item><title>Create Repository</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/70-advanced-topics/100-pipelines/2000-create-repo.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/70-advanced-topics/100-pipelines/2000-create-repo.html</guid><description>Create Repo in Pipeline Stack The first step in any good CD pipeline is source control. Here we will create a CodeCommit repository to contain our project code.
Edit the file CdkWorkshop/PipelineStack.cs as follows.
using Amazon.CDK; using Amazon.CDK.AWS.CodeCommit; using Constructs namespace CdkWorkshop { public class WorkshopPipelineStack : Stack { public WorkshopPipelineStack(Construct parent, string id, IStackProps props = null) : base(parent, id, props) { // Creates a CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; var repo = new Repository(this, &amp;#34;WorkshopRepo&amp;#34;, new RepositoryProps { RepositoryName = &amp;#34;WorkshopRepo&amp;#34; }); // Pipeline code goes here } } } Deploy Now we can deploy the app to see our new repo.</description></item><item><title>Create Repository</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/70-advanced-topics/100-pipelines/2000-create-repo.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/70-advanced-topics/100-pipelines/2000-create-repo.html</guid><description>Create Repo in Pipeline Stack The first step in any good CD pipeline is source control. Here we will create a CodeCommit repository to contain our project code.
Edit the file WorkshopPipelineStack.java as follows.
package com.myorg; import software.constructs.Construct; import software.amazon.awscdk.Stack; import software.amazon.awscdk.StackProps; import software.amazon.awscdk.services.codecommit.Repository; public class WorkshopPipelineStack extends Stack { public WorkshopPipelineStack(final Construct parent, final String id) { this(parent, id, null); } public WorkshopPipelineStack(final Construct parent, final String id, final StackProps props) { super(parent, id, props); // This creates a new CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; final Repository repo = Repository.</description></item><item><title>Create New Pipeline</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/3000-new-pipeline.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/3000-new-pipeline.html</guid><description>Define an Empty Pipeline Now we are ready to define the basics of the pipeline.
Return to the file lib/pipeline-stack.ts and edit as follows:
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as codecommit from &amp;#39;aws-cdk-lib/aws-codecommit&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; import {CodeBuildStep, CodePipeline, CodePipelineSource} from &amp;#34;aws-cdk-lib/pipelines&amp;#34;; export class WorkshopPipelineStack extends cdk.Stack { constructor(scope: Construct, id: string, props?: cdk.StackProps) { super(scope, id, props); // This creates a new CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; const repo = new codecommit.</description></item><item><title>Create New Pipeline</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/70-advanced-topics/200-pipelines/3000-new-pipeline.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/70-advanced-topics/200-pipelines/3000-new-pipeline.html</guid><description>Define an Empty Pipeline Now we are ready to define the basics of the pipeline.
Return to the file pipeline_stack.py and edit as follows:
from constructs import Construct from aws_cdk import ( Stack, aws_codecommit as codecommit, pipelines as pipelines, ) class WorkshopPipelineStack(Stack): def __init__(self, scope: Construct, id: str, **kwargs) -&amp;gt; None: super().__init__(scope, id, **kwargs) # Creates a CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; repo = codecommit.Repository( self, &amp;#34;WorkshopRepo&amp;#34;, repository_name=&amp;#34;WorkshopRepo&amp;#34; ) pipeline = pipelines.</description></item><item><title>Create New Pipeline</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/70-advanced-topics/100-pipelines/3000-new-pipeline.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/70-advanced-topics/100-pipelines/3000-new-pipeline.html</guid><description>Define an Empty Pipeline Now we are ready to define the basics of the pipeline.
Return to the file CdkWorkshop/PipelineStack.cs and edit as follows:
using Amazon.CDK; using Amazon.CDK.AWS.CodeCommit; using Amazon.CDK.AWS.CodePipeline; using Amazon.CDK.AWS.CodePipeline.Actions; using Amazon.CDK.Pipelines; using Constructs; namespace CdkWorkshop { public class WorkshopPipelineStack : Stack { public WorkshopPipelineStack(Construct parent, string id, IStackProps props = null) : base(parent, id, props) { // Creates a CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; var repo = new Repository(this, &amp;#34;WorkshopRepo&amp;#34;, new RepositoryProps { RepositoryName = &amp;#34;WorkshopRepo&amp;#34; }); // The basic pipeline declaration.</description></item><item><title>Create New Pipeline</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/70-advanced-topics/100-pipelines/3000-new-pipeline.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/70-advanced-topics/100-pipelines/3000-new-pipeline.html</guid><description>Define an Empty Pipeline Now we are ready to define the basics of the pipeline.
Return to the file WorkshopPipelineStack.java and edit as follows:
package com.myorg; import java.util.List; import java.util.Map; import software.constructs.Construct; import software.amazon.awscdk.Stack; import software.amazon.awscdk.StackProps; import software.amazon.awscdk.pipelines.CodeBuildStep; import software.amazon.awscdk.pipelines.CodePipeline; import software.amazon.awscdk.pipelines.CodePipelineSource; import software.amazon.awscdk.services.codecommit.Repository; import software.amazon.awscdk.services.codepipeline.actions.CodeCommitSourceAction; public class WorkshopPipelineStack extends Stack { public WorkshopPipelineStack(final Construct parent, final String id) { this(parent, id, null); } public WorkshopPipelineStack(final Construct parent, final String id, final StackProps props) { super(parent, id, props); // This creates a new CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; final Repository repo = Repository.</description></item><item><title>Add Application to Pipeline</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/4000-build-stage.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/4000-build-stage.html</guid><description>Create Stage At this point, you have a fully operating CDK pipeline that will automatically update itself on every commit, BUT at the moment, that is all it does. We need to add a stage to the pipeline that will deploy our application.
Create a new file in lib called pipeline-stage.ts with the code below:
import { CdkWorkshopStack } from &amp;#39;./cdk-workshop-stack&amp;#39;; import { Stage, StageProps } from &amp;#39;aws-cdk-lib&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export class WorkshopPipelineStage extends Stage { constructor(scope: Construct, id: string, props?</description></item><item><title>Add Application to Pipeline</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/70-advanced-topics/200-pipelines/4000-build-stage.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/70-advanced-topics/200-pipelines/4000-build-stage.html</guid><description>Create Stage At this point, you have a fully operating CDK pipeline that will automatically update itself on every commit, BUT at the moment, that is all it does. We need to add a stage to the pipeline that will deploy our application.
Create a new file in cdk_workshop called pipeline_stage.py with the code below:
from constructs import Construct from aws_cdk import ( Stage ) from .cdk_workshop_stack import CdkWorkshopStack class WorkshopPipelineStage(Stage): def __init__(self, scope: Construct, id: str, **kwargs): super().</description></item><item><title>Add Application to Pipeline</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/70-advanced-topics/100-pipelines/4000-build-stage.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/70-advanced-topics/100-pipelines/4000-build-stage.html</guid><description>Create Stage At this point, you have a fully operating CDK pipeline that will automatically update itself on every commit, BUT at the moment, that is all it does. We need to add a stage to the pipeline that will deploy our application.
Create a new file in CdkWorkshop called PipelineStage.cs with the code below:
using Amazon.CDK; using Amazon.CDK.Pipelines; using Constructs; namespace CdkWorkshop { public class WorkshopPipelineStage : Stage { public WorkshopPipelineStage(Construct scope, string id, StageProps props = null) : base(scope, id, props) { var service = new CdkWorkshopStack(this, &amp;#34;WebService&amp;#34;); } } } All this does is declare a new Stage (component of a pipeline), and in that stage instantiate our application stack.</description></item><item><title>Add Application to Pipeline</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/70-advanced-topics/100-pipelines/4000-build-stage.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/70-advanced-topics/100-pipelines/4000-build-stage.html</guid><description>Create Stage At this point, you have a fully operating CodePipeline that will automatically update itself on every commit, BUT at the moment, that is all it does. We need to add a stage to the pipeline that will deploy our application.
Create a new file in CdkWorkshop called WorkshopPipelineStage.java with the code below:
package com.myorg; import software.amazon.awscdk.Stage; import software.constructs.Construct; import software.amazon.awscdk.StageProps; public class WorkshopPipelineStage extends Stage { public WorkshopPipelineStage(final Construct scope, final String id) { this(scope, id, null); } public WorkshopPipelineStage(final Construct scope, final String id, final StageProps props) { super(scope, id, props); new CdkWorkshopStack(this, &amp;#34;WebService&amp;#34;); } } All this does is declare a new Stage (component of a pipeline), and in that stage instantiate our application stack.</description></item><item><title>Polish Pipeline</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/5000-test-actions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/5000-test-actions.html</guid><description>Get Endpoints Stepping back, we can see a problem now that our app is being deployed by our pipeline. There is no easy way to find the endpoints of our application (the TableViewer and APIGateway endpoints), so we can&amp;rsquo;t call it! Let&amp;rsquo;s add a little bit of code to expose these more obviously.
First edit lib/cdk-workshop-stack.ts to get these values and expose them as properties of our stack:
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as lambda from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import * as apigw from &amp;#39;aws-cdk-lib/aws-apigateway&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; import { HitCounter } from &amp;#39;.</description></item><item><title>Polish Pipeline</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/70-advanced-topics/200-pipelines/5000-test-actions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/70-advanced-topics/200-pipelines/5000-test-actions.html</guid><description>Get Endpoints Stepping back, we can see a problem now that our app is being deployed by our pipeline. There is no easy way to find the endpoints of our application (the TableViewer and LambdaRestApi endpoints), so we can&amp;rsquo;t call it! Let&amp;rsquo;s add a little bit of code to expose these more obviously.
First edit cdk_workshop/cdk_workshop_stack.py to get these values and expose them as properties of our stack:
from constructs import Construct from aws_cdk import ( Stack, CfnOutput, aws_lambda as _lambda, aws_apigateway as apigw, ) from cdk_dynamo_table_view import TableViewer from .</description></item><item><title>Polish Pipeline</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/70-advanced-topics/100-pipelines/5000-test-actions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/70-advanced-topics/100-pipelines/5000-test-actions.html</guid><description>Get Endpoints Stepping back, we can see a problem now that our app is being deployed by our pipeline. There is no easy way to find the endpoints of our application (the TableViewer and APIGateway endpoints), so we can&amp;rsquo;t call it! Let&amp;rsquo;s add a little bit of code to expose these more obviously.
First edit CdkWorkshop/CdkWorkshopStack.cs to get these values and expose them as properties of our stack:
using Amazon.CDK; using Amazon.</description></item><item><title>Polish Pipeline</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/70-advanced-topics/100-pipelines/5000-test-actions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/70-advanced-topics/100-pipelines/5000-test-actions.html</guid><description>Get Endpoints Stepping back, we can see a problem now that our app is being deployed by our pipeline. There is no easy way to find the endpoints of our application (the TableViewer and APIGateway endpoints), so we can&amp;rsquo;t call it! Let&amp;rsquo;s add a little bit of code to expose these more obviously.
First edit CdkWorkshopStack.java to get these values and expose them as properties of our stack:
package com.myorg; import io.</description></item><item><title>Cleanup</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/6000-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/200-pipelines/6000-cleanup.html</guid><description>To clean up the stacks from this workshop, navigate to the Cloudformation Console, select your stacks, and hit &amp;ldquo;Delete&amp;rdquo;. This may take some time.</description></item><item><title>Cleanup</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/70-advanced-topics/200-pipelines/6000-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/70-advanced-topics/200-pipelines/6000-cleanup.html</guid><description>To clean up the stacks from this workshop, navigate to the Cloudformation Console, select your stacks, and hit &amp;ldquo;Delete&amp;rdquo;. This may take some time.</description></item><item><title>Cleanup</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/70-advanced-topics/100-pipelines/6000-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/70-advanced-topics/100-pipelines/6000-cleanup.html</guid><description>To clean up the stacks from this workshop, navigate to the Cloudformation Console, select your stacks, and hit &amp;ldquo;Delete&amp;rdquo;. This may take some time.</description></item><item><title>Cleanup</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/70-advanced-topics/100-pipelines/6000-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/70-advanced-topics/100-pipelines/6000-cleanup.html</guid><description>To clean up the stacks from this workshop, navigate to the Cloudformation Console, select your stacks, and hit &amp;ldquo;Delete&amp;rdquo;. This may take some time.</description></item><item><title>Activating the virtualenv</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/20-create-project/200-virtualenv.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/20-create-project/200-virtualenv.html</guid><description>Activating the Virtualenv The init script we ran in the last step created a bunch of code to help get us started but it also created a virtual environment within our directory. If you haven&amp;rsquo;t used virtualenv before, you can find out more here but the bottom line is that they allow you have a self-contained, isolated environment to run Python and install arbitrary packages without polluting your system Python.</description></item><item><title>Assertion Tests</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/100-construct-testing/1000-assertion-test.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/100-construct-testing/1000-assertion-test.html</guid><description>Fine-Grained Assertion Tests Create a test for the DynamoDB table This section assumes that you have created the hit counter construct Our HitCounter construct creates a simple DynamoDB table. Lets create a test that validates that the table is getting created.
If cdk init created a test directory for you, then you should have a cdk-workshop.test.ts file. Delete this file.
If you do not already have a test directory (usually created automatically when you run cdk init), then create a test directory at the same level as bin and lib and then create a file called hitcounter.</description></item><item><title>Assertion Tests</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/70-advanced-topics/100-construct-testing/1000-assertion-test.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/70-advanced-topics/100-construct-testing/1000-assertion-test.html</guid><description>Fine-Grained Assertion Tests Create a test for the DynamoDB table This section assumes that you have created the hit counter construct Our HitCounter construct creates a simple DynamoDB table. Lets create a test that validates that the table is getting created.
If you have create the project with cdk init then you should already have a tests directory. In that case you will need to remove the existing test_cdk_workshop_stack.py file.</description></item><item><title>Assertion Tests</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/70-advanced-topics/100-construct-testing/1000-assertion-test.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/70-advanced-topics/100-construct-testing/1000-assertion-test.html</guid><description>Fine-Grained Assertion Tests Create a test for the DynamoDB table This section assumes that you have created the hit counter construct Our HitCounter construct creates a simple DynamoDB table. Lets create a test that validates that the table is getting created.
Since we removed the src/test directory (usually created automatically when you run cdk init), we need to create a new test directory under src:
mkdir -p src/test/java/com/myorg And then create a file called HitCounterTest.</description></item><item><title>Hello Lambda</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/200-lambda.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/200-lambda.html</guid><description>Lambda handler code まずは、Lambda handlerのコードから書いていきます。
cdk-workshopディレクトリにlambdaディレクトリを作成します。 TS CDK プロジェクトを cdk init で作成すると、デフォルトではすべての .js ファイルを無視します。 これらのファイルをgitで追跡するには、 .gitignore ファイルに !lambda/*.js を追記してください。 これにより、このチュートリアルのパイプラインのセクションで、Lambdaアセットを発見することができます。 lambda/hello.jsというファイルを追加し、以下の内容を記述します。 exports.handler = async function(event) { console.log(&amp;#34;request:&amp;#34;, JSON.stringify(event, undefined, 2)); return { statusCode: 200, headers: { &amp;#34;Content-Type&amp;#34;: &amp;#34;text/plain&amp;#34; }, body: `Hello, CDK! You&amp;#39;ve hit ${event.path}\n` }; }; これは、**「Hello, CDK! You’ve hit [url path]」**というテキストを返す単純なLambda関数です。 HTTPステータスコードとHTTPヘッダーが付加されたHTTPレスポンスとしてユーザーに応答するために、API Gatewayを使用します。
このLambda関数はJavaScriptで実装されています。 その他の言語での実装についてはAWS Lambdaのドキュメントを参照してください。
コピー＆ペーストは使わずにコードを書いてみましょう このワークショップでは、コピー&amp;amp;ペーストをするのではなく、実際にCDKのコードを入力することを強く推奨します（通常、入力する量は多くありません）。 これにより、CDKの使い方についてより理解していただけます。 IDEがオートコンプリート、インラインドキュメント、およびタイプセーフに対応しているのがご理解いただけるでしょう。
AWS Lambda関数をスタックに追加する importステートメントをlib/cdk-workshop-stack.tsの冒頭に挿入し、lambda.Functionをスタックに追加します。
import { Stack, StackProps } from &amp;#39;aws-cdk-lib&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; import * as lambda from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39; export class CdkWorkshopStack extends Stack { constructor(scope: Construct, id: string, props?</description></item><item><title>Hello Lambda</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/30-hello-cdk/200-lambda.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/30-hello-cdk/200-lambda.html</guid><description>Lambda handler code We&amp;rsquo;ll start with the AWS Lambda handler code.
Create a directory lambda in the root of your project tree (next to the cdk_workshop directory). Add a file called lambda/hello.py with the following contents: import json def handler(event, context): print(&amp;#39;request: {}&amp;#39;.format(json.dumps(event))) return { &amp;#39;statusCode&amp;#39;: 200, &amp;#39;headers&amp;#39;: { &amp;#39;Content-Type&amp;#39;: &amp;#39;text/plain&amp;#39; }, &amp;#39;body&amp;#39;: &amp;#39;Hello, CDK! You have hit {}\n&amp;#39;.format(event[&amp;#39;path&amp;#39;]) } This is a simple Lambda function which returns the text &amp;ldquo;Hello, CDK!</description></item><item><title>Hello Lambda</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/30-hello-cdk/200-lambda.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/30-hello-cdk/200-lambda.html</guid><description>Lambda handler code We&amp;rsquo;ll start with the AWS Lambda handler code.
Create a directory lambda in the root of your project tree (next to src). Add a file called `lambda/hello.js with the following contents: exports.handler = async function(event) { console.log(&amp;#34;request:&amp;#34;, JSON.stringify(event, undefined, 2)); return { statusCode: 200, headers: { &amp;#34;Content-Type&amp;#34;: &amp;#34;text/plain&amp;#34; }, body: `Hello, CDK! You&amp;#39;ve hit ${event.path}\n` }; }; This is a simple Lambda function which returns the text &amp;ldquo;Hello, CDK!</description></item><item><title>Hello Lambda</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/30-hello-cdk/200-lambda.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/30-hello-cdk/200-lambda.html</guid><description>Lambda handler code We&amp;rsquo;ll start with the AWS Lambda handler code.
Create a directory lambda in the root of your project tree (next to src). Add a file called lambda/hello.js with the following contents: exports.handler = async function(event) { console.log(&amp;#34;request:&amp;#34;, JSON.stringify(event, undefined, 2)); return { statusCode: 200, headers: { &amp;#34;Content-Type&amp;#34;: &amp;#34;text/plain&amp;#34; }, body: `Hello, CDK! You&amp;#39;ve hit ${event.path}\n` }; }; This is a simple Lambda function which returns the text &amp;ldquo;Hello, CDK!</description></item><item><title>Installing the library</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/50-table-viewer/200-install.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/50-table-viewer/200-install.html</guid><description>pip install Before you can use the table viewer in your application, you&amp;rsquo;ll need to install the python module:
pip install cdk-dynamo-table-view==0.2.0 The last two lines of the output (there&amp;rsquo;s a lot of it) should look like this:
Installing collected packages: cdk-dynamo-table-view Successfully installed cdk-dynamo-table-view-0.2.0 Now we are ready to add a viewer to our app.</description></item><item><title>Installing the library</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/200-install.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/200-install.html</guid><description>Install Package Before you can use the table viewer in your application, you&amp;rsquo;ll need to install the Nuget package:
dotnet add package Cdklabs.DynamoTableViewer --version 0.2.4 Output should look similar to this:
info : Adding PackageReference for package &amp;#39;Eladb.DynamoTableViewer&amp;#39; into project &amp;#39;~/cdk-workshop/src/CdkWorkshop/CdkWorkshop.csproj&amp;#39;. info : Restoring packages for ~/cdk-workshop/src/CdkWorkshop/CdkWorkshop.csproj... info : GET https://api.nuget.org/v3-flatcontainer/cdklabs.dynamotableviewer/index.json info : OK https://api.nuget.org/v3-flatcontainer/cdklabs.dynamotableviewer/index.json 240ms info : GET https://api.nuget.org/v3-flatcontainer/cdklabs.dynamotableviewer/0.2.4/cdklabs.dynamotableviewer.0.2.4.nupkg info : OK https://api.nuget.org/v3-flatcontainer/cdklabs.dynamotableviewer/0.2.4/cdklabs.dynamotableviewer.0.2.4.nupkg 241ms info : Installing Cdklabs.DynamoTableViewer 0.2.4. info : Package &amp;#39;Cdklabs.</description></item><item><title>Installing the library</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/50-table-viewer/200-install.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/50-table-viewer/200-install.html</guid><description>Add Artifact Before you can use the table viewer in your application, you&amp;rsquo;ll need to add the artifact to your pom.xml file:
... &amp;lt;dependencies&amp;gt; &amp;lt;!-- AWS Cloud Development Kit --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;software.amazon.awscdk&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;aws-cdk-lib&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${cdk.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- Additional Construct Libraries --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.github.cdklabs&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;cdk-dynamo-table-view&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.2.0&amp;lt;/version&amp;gt; &amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt; software.amazon.jsii&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jsii-runtime&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; ... Now we are ready to add a viewer to our app.</description></item><item><title>Add the table viewer to your app</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/50-table-viewer/300-add.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/50-table-viewer/300-add.html</guid><description>Add a table viewer to your stack Add the following highlighted lines to cdk_workshop_stack.py to add a TableViewer construct to your stack:
from constructs import Construct from aws_cdk import ( Stack, aws_lambda as _lambda, aws_apigateway as apigw, ) from cdk_dynamo_table_view import TableViewer from .hitcounter import HitCounter class CdkWorkshopStack(Stack): def __init__(self, scope: Construct, id: str, **kwargs) -&amp;gt; None: super().__init__(scope, id, **kwargs) # Defines an AWS Lambda resource hello = _lambda.Function( self, &amp;#39;HelloHandler&amp;#39;, runtime=_lambda.</description></item><item><title>Add the table viewer to your app</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/300-add.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/300-add.html</guid><description>Add a table viewer to your stack Add the following highlighted lines to src/CdkWorkshop/CdkWorkshopStack.cs to add a TableViewer construct to your stack:
using Amazon.CDK; using Amazon.CDK.AWS.APIGateway; using Amazon.CDK.AWS.Lambda; using Cdklabs.DynamoTableViewer; using Construct; namespace CdkWorkshop { public class CdkWorkshopStack : Stack { public CdkWorkshopStack(Construct scope, string id, IStackProps props = null) : base(scope, id, props) { // Defines a new lambda resource var hello = new Function(this, &amp;#34;HelloHandler&amp;#34;, new FunctionProps { Runtime = Runtime.</description></item><item><title>Add the table viewer to your app</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/50-table-viewer/300-add.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/50-table-viewer/300-add.html</guid><description>Add a table viewer to your stack Add the following hightlighted lines to ~/CdkWorkshopStack.java to add a TableViewer construct to your stack:
package com.myorg; import io.github.cdklabs.dynamotableviewer.TableViewer; import software.constructs.Construct; import software.amazon.awscdk.Stack; import software.amazon.awscdk.StackProps; import software.amazon.awscdk.services.apigateway.LambdaRestApi; import software.amazon.awscdk.services.lambda.Code; import software.amazon.awscdk.services.lambda.Function; import software.amazon.awscdk.services.lambda.Runtime; public class CdkWorkshopStack extends Stack { public CdkWorkshopStack(final Construct parent, final String id) { this(parent, id, null); } public CdkWorkshopStack(final Construct parent, final String id, final StackProps props) { super(parent, id, props); // Defines a new lambda resource final Function hello = Function.</description></item><item><title>CDK Watch</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/300-cdk-watch.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/300-cdk-watch.html</guid><description>より高速なデプロイ このセクションはワークショップを完了するために必要ではありませんが、 cdk deploy --hotswap と cdk watch がどのようにデプロイを高速化するのか見てみましょう。
lambdaが動作するようになりましたね！ しかし、もしlambdaのコードを微調整して正しく動作させたい場合はどうしたらよいでしょうか？ 例えば、lambda関数を「Hello, CDK」ではなく「Good Morning, CDK!」と応答させることに決めたとしましょう。
今のところ、スタックを更新するために使えるツールは cdk deploy しかないように思えます。 しかし、cdk deployには時間がかかります。 CloudFormationスタックをデプロイして、lambdaディレクトリをbootstrapバケットにアップロードしなければならないからです。 lambdaのコードを変更するだけならCloudFormationスタックを更新する必要はないので、cdk deployの部分は無駄な労力となります。
本当に必要なのは、lambdaコードの更新だけなのです。 それだけを行うための他のメカニズムがあれば最高なのですが&amp;hellip;。
cdk deploy にかかる時間を測ってみる まず、cdk deployを実行するのにかかる時間を計ってみましょう。 これは、CloudFormationのフルデプロイにどれくらい時間がかかるかの基準値になります。 そのために、lambda/hello.js 内のコードを変更します。
exports.handler = async function(event) { console.log(&amp;#34;request:&amp;#34;, JSON.stringify(event, undefined, 2)); return { statusCode: 200, headers: { &amp;#34;Content-Type&amp;#34;: &amp;#34;text/plain&amp;#34; }, body: `Good Morning, CDK! You&amp;#39;ve hit ${event.path}\n` }; }; 変更が cdk deploy を実行してみましょう。
cdk deploy 出力は次のようになります。
✨ Synthesis time: 6s CdkWorkshopStack: deploying.</description></item><item><title>CDK Watch</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/30-hello-cdk/300-cdk-watch.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/30-hello-cdk/300-cdk-watch.html</guid><description>Faster personal deployments This section is not necessary to complete the workshop, but we recommend that you take the time to see how cdk deploy --hotswap and cdk watch can speed up your personal deployments.
It&amp;rsquo;s great that we have a working lambda! But what if we want to tweak the lambda code to get it just right? Let&amp;rsquo;s say that we have now decided that we want our lambda function to respond with &amp;quot;Good Morning, CDK!</description></item><item><title>CDK Watch</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/30-hello-cdk/300-cdk-watch.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/30-hello-cdk/300-cdk-watch.html</guid><description>Faster personal deployments This section is not necessary to complete the workshop, but we recommend that you take the time to see how cdk deploy --hotswap and cdk watch can speed up your personal deployments.
It&amp;rsquo;s great that we have a working lambda! But what if we want to tweak the lambda code to get it just right? Let&amp;rsquo;s say that we have now decided that we want our lambda function to respond with &amp;quot;Good Morning, CDK!</description></item><item><title>CDK Watch</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/30-hello-cdk/300-cdk-watch.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/30-hello-cdk/300-cdk-watch.html</guid><description>Faster personal deployments This section is not necessary to complete the workshop, but we recommend that you take the time to see how cdk deploy --hotswap and cdk watch can speed up your personal deployments.
It&amp;rsquo;s great that we have a working lambda! But what if we want to tweak the lambda code to get it just right? Let&amp;rsquo;s say that we have now decided that we want our lambda function to respond with &amp;quot;Good Morning, CDK!</description></item><item><title>Define resources</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/300-resources.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/300-resources.html</guid><description>Add resources to the hit counter construct Now, let&amp;rsquo;s define the AWS Lambda function and the DynamoDB table in our HitCounter construct. Go back to cdkworkshop/hitcounter.py and add the following highlighted code:
from constructs import Construct from aws_cdk import ( aws_lambda as _lambda, aws_dynamodb as ddb, ) class HitCounter(Construct): @property def handler(self): return self._handler def __init__(self, scope: Construct, id: str, downstream: _lambda.IFunction, **kwargs): super().__init__(scope, id, **kwargs) table = ddb.Table( self, &amp;#39;Hits&amp;#39;, partition_key={&amp;#39;name&amp;#39;: &amp;#39;path&amp;#39;, &amp;#39;type&amp;#39;: ddb.</description></item><item><title>Define resources</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/300-resources.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/300-resources.html</guid><description>Add resources to the hit counter construct Now, let&amp;rsquo;s define the AWS Lambda function and the DynamoDB table in our HitCounter construct.
Now, go back to src/CdkWorkshop/HitCounter.cs and add the following highlighted code:
using Amazon.CDK; using Amazon.CDK.AWS.DynamoDB; using Amazon.CDK.AWS.Lambda; using Constructs; using System.Collections.Generic; namespace CdkWorkshop { public class HitCounterProps { // The function for which we want to count url hits public IFunction Downstream { get; set; } } public class HitCounter : Construct { public Function Handler { get; } public HitCounter(Construct scope, string id, HitCounterProps props) : base(scope, id) { var table = new Table(this, &amp;#34;Hits&amp;#34;, new TableProps { PartitionKey = new Attribute { Name = &amp;#34;path&amp;#34;, Type = AttributeType.</description></item><item><title>Define resources</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/40-hit-counter/300-resources.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/40-hit-counter/300-resources.html</guid><description>Add resources to the hit counter construct Now, let&amp;rsquo;s define the AWS Lambda function and the DynamoDB table in our HitCounter construct.
Now, go back to ~/HitCounter.java and add the following highlighted code:
package com.myorg; import java.util.HashMap; import java.util.Map; import software.constructs.Construct; import software.amazon.awscdk.services.dynamodb.Attribute; import software.amazon.awscdk.services.dynamodb.AttributeType; import software.amazon.awscdk.services.dynamodb.Table; import software.amazon.awscdk.services.lambda.Code; import software.amazon.awscdk.services.lambda.Function; import software.amazon.awscdk.services.lambda.Runtime; public class HitCounter extends Construct { private final Function handler; private final Table table; public HitCounter(final Construct scope, final String id, final HitCounterProps props) { super(scope, id); this.</description></item><item><title>Project structure</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/20-create-project/300-structure.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/20-create-project/300-structure.html</guid><description>Open your IDE Now&amp;rsquo;s a good time to open the project in your favorite IDE and explore.
If you use VSCode, you can just type code . within the project directory.
Explore your project directory You&amp;rsquo;ll see something like this:
.venv - The python virtual envirnment information discussed in the previous section. cdk_workshop — A Python module directory. cdk_workshop.egg-info - Folder that contains build information relevant for the packaging on the project cdk_workshop_stack.</description></item><item><title>Project structure</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/20-create-project/300-structure.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/20-create-project/300-structure.html</guid><description>Open your IDE Now&amp;rsquo;s a good time to open the project in your favorite IDE and explore.
If you use VSCode, you can just type code . within the project directory.
You may see a notification saying Required assets to build and debug are missing from 'YOURPROJECT'. Add them?
This can be ignored for our purposes.
Explore your project directory You&amp;rsquo;ll see something like this:
src/CdkWorkshop/Program.cs is the entrypoint for the CDK application it will load the stack defined in src/CdkWorkshop/CdkWorkshopStack.</description></item><item><title>Project structure</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/20-create-project/300-structure.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/20-create-project/300-structure.html</guid><description>Open your IDE Now&amp;rsquo;s a good time to open the project in your favorite IDE and explore.
If you use VSCode, you can just type code . within the project directory.
Explore your project directory You&amp;rsquo;ll see something like this:
src/main/java/com/myorg/ is the main project directory for Java code in the app, and will be henceforth referred to (to shorten the paths) as ~/ ~/CdkWorkshopApp.java is the entrypoint for the CDK application it will load the stack defined in ~/CdkWorkshopStack.</description></item><item><title>Validation Tests</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/100-construct-testing/2000-validation-tests.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/70-advanced-topics/100-construct-testing/2000-validation-tests.html</guid><description>Validation Tests Sometimes we want the inputs to be configurable, but we also want to put constraints on those inputs or validate that the input is valid.
Suppose for the HitCounter construct we want to allow the user to specify the readCapacity on the DynamoDB table, but we also want to ensure the value is within a reasonable range. We can write a test to make sure that the validation logic works: pass in invalid values and see what happens.</description></item><item><title>Validation Tests</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/70-advanced-topics/100-construct-testing/2000-validation-tests.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/70-advanced-topics/100-construct-testing/2000-validation-tests.html</guid><description>Validation Tests Sometimes we want the inputs to be configurable, but we also want to put constraints on those inputs or validate that the input is valid.
Suppose for the HitCounter construct we want to allow the user to specify the read_capacity on the DynamoDB table, but we also want to ensure the value is within a reasonable range. We can write a test to make sure that the validation logic works: pass in invalid values and see what happens.</description></item><item><title>Validation Tests</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/70-advanced-topics/100-construct-testing/2000-validation-tests.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/70-advanced-topics/100-construct-testing/2000-validation-tests.html</guid><description>Validation Tests Sometimes we want the inputs to be configurable, but we also want to put constraints on those inputs or validate that the input is valid.
Suppose for the HitCounter construct we want to allow the user to specify the readCapacity on the DynamoDB table, but we also want to ensure the value is within a reasonable range. We can write a test to make sure that the validation logic works: pass in invalid values and see what happens.</description></item><item><title>プロジェクト構造</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/20-create-project/300-structure.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/20-create-project/300-structure.html</guid><description>IDEを開く 使い慣れたIDEでプロジェクトを開いてみましょう。
Cloud9 を使用する場合は、すでにIDEの画面で操作を行っています。
VSCodeを使用する場合は、 code . コマンドをプロジェクトディレクトリ内で実行すれば簡単に開けます。
プロジェクトディレクトリを確認する 以下のようなディレクトリ構成が確認できます。
lib/cdk-workshop-stack.ts CDKアプリケーションのメインスタックが定義されます。 今回のワークショップではこのファイルを主に修正します。 bin/cdk-workshop.ts CDKアプリケーションのエントリポイントです。 lib/cdk-workshop-stack.ts で定義されたスタックをロードします。 package.json npmモジュールのマニフェストです。 アプリの名前、バージョン、依存関係、&amp;ldquo;watch&amp;rdquo; や &amp;ldquo;build&amp;rdquo; 用のビルドスクリプトなどの情報が含まれます（package-lock.json はnpmによって管理されます） cdk.json アプリの実行方法をツールキットに指示させるためのファイルです。 今回の場合は、 &amp;quot;npx ts-node bin/cdk-workshop.ts&amp;quot; です。 tsconfig.json プロジェクトの TypeScript設定 です。 .gitignore, .npmignore Gitとnpm用のファイルです。 ソースコードの管理に含める/除外するファイルと、パッケージマネージャーへの公開用設定が含まれています。 node_modules npmによって管理され、プロジェクトのすべての依存関係が含まれます。 アプリのエントリポイント bin/cdk-workshop.tsを簡単に見てみましょう。
#!/usr/bin/env node import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import { CdkWorkshopStack } from &amp;#39;../lib/cdk-workshop-stack&amp;#39;; const app = new cdk.App(); new CdkWorkshopStack(app, &amp;#39;CdkWorkshopStack&amp;#39;); このコードは、lib/cdk-workshop-stack.tsファイルを開き、 CdkWorkshopStack クラス をロードして初期化するものです。 一度読んだら、もうこのファイルを見る必要はありません。</description></item><item><title>リソースの定義</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/300-resources.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/300-resources.html</guid><description>HitCounterコンストラクトにリソースを追加する 次に、Lambda関数とDynamoDBテーブルをHitCounterコンストラクトに定義します。
lib/hitcounter.ts に戻って、以下のコードを追記しましょう。
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as lambda from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import * as dynamodb from &amp;#39;aws-cdk-lib/aws-dynamodb&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export interface HitCounterProps { /** the function for which we want to count url hits **/ downstream: lambda.IFunction; } export class HitCounter extends Construct { /** allows accessing the counter function */ public readonly handler: lambda.Function; constructor(scope: Construct, id: string, props: HitCounterProps) { super(scope, id); const table = new dynamodb.</description></item><item><title>API Gateway</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/400-apigw.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/30-hello-cdk/400-apigw.html</guid><description>次のステップでは、API Gatewayを関数の前に追加していきます。 API GatewayはパブリックHTTPエンドポイントを公開します。このエンドポイントは、インターネット上の誰もが curlやウェブブラウザのようなHTTPクライアントでヒットできます。
API Gatewayのルートには、 Lambda proxy integrationを利用します。 つまり、どのURLパスへのリクエストも、直接Lambda関数にプロキシされ、関数からのレスポンスがユーザーに返されることになります。
LambdaRestApi コンストラクトを追加する lib/cdk-workshop-stack.ts に戻り、APIエンドポイントを定義してLambda関数に関連付けましょう。
import { Stack, StackProps } from &amp;#39;aws-cdk-lib&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; import * as lambda from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39; import * as apigw from &amp;#39;aws-cdk-lib/aws-apigateway&amp;#39;; export class CdkWorkshopStack extends Stack { constructor(scope: Construct, id: string, props?: StackProps) { super(scope, id, props); // defines an AWS Lambda resource const hello = new lambda.Function(this, &amp;#39;HelloHandler&amp;#39;, { runtime: lambda.</description></item><item><title>API Gateway</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/30-hello-cdk/400-apigw.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/30-hello-cdk/400-apigw.html</guid><description>Next step is to add an API Gateway in front of our function. API Gateway will expose a public HTTP endpoint that anyone on the internet can hit with an HTTP client such as curl or a web browser.
We will use Lambda proxy integration mounted to the root of the API. This means that any request to any URL path will be proxied directly to our Lambda function, and the response from the function will be returned back to the user.</description></item><item><title>API Gateway</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/30-hello-cdk/400-apigw.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/30-hello-cdk/400-apigw.html</guid><description>Next step is to add an API Gateway in front of our function. API Gateway will expose a public HTTP endpoint that anyone on the internet can hit with an HTTP client such as curl or a web browser.
We will use Lambda proxy integration mounted to the root of the API. This means that any request to any URL path will be proxied directly to our Lambda function, and the response from the function will be returned back to the user.</description></item><item><title>API Gateway</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/30-hello-cdk/400-apigw.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/30-hello-cdk/400-apigw.html</guid><description>Next step is to add an API Gateway in front of our function. API Gateway will expose a public HTTP endpoint that anyone on the internet can hit with an HTTP client such as curl or a web browser.
We will use Lambda proxy integration mounted to the root of the API. This means that any request to any URL path will be proxied directly to our Lambda function, and the response from the function will be returned back to the user.</description></item><item><title>cdk synth</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/20-create-project/400-synth.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/20-create-project/400-synth.html</guid><description>アプリからテンプレートを生成する AWS CDKアプリ自体はコードを使用したインフラストラクチャの 定義 にすぎません。 CDKアプリが実行されると、アプリケーションで定義された各スタックのAWS CloudFormationテンプレートが生成（CDKの用語では &amp;quot;synthesize&amp;quot; ）されます。
CDKアプリを生成するには、 cdk synth コマンドを実行してください。 サンプルアプリから生成されたCloudFormationテンプレートを確認してみましょう。
CDK CLI はcdk.jsonファイルが配置されているプロジェクトのルートディレクトリで実行する必要があります。 ディレクトリを移動している場合はプロジェクトのルートディレクトリに戻ってからCDKコマンドを実行してください。
cdk synth 上記コマンドを実行すると、次のCloudFormationテンプレートを出力します。
Resources: CdkWorkshopQueue50D9D426: Type: AWS::SQS::Queue Properties: VisibilityTimeout: 300 UpdateReplacePolicy: Delete DeletionPolicy: Delete Metadata: aws:cdk:path: CdkWorkshopStack/CdkWorkshopQueue/Resource CdkWorkshopQueuePolicyAF2494A5: Type: AWS::SQS::QueuePolicy Properties: PolicyDocument: Statement: - Action: sqs:SendMessage Condition: ArnEquals: aws:SourceArn: Ref: CdkWorkshopTopicD368A42F Effect: Allow Principal: Service: sns.amazonaws.com Resource: Fn::GetAtt: - CdkWorkshopQueue50D9D426 - Arn Version: &amp;#34;2012-10-17&amp;#34; Queues: - Ref: CdkWorkshopQueue50D9D426 Metadata: aws:cdk:path: CdkWorkshopStack/CdkWorkshopQueue/Policy/Resource CdkWorkshopQueueCdkWorkshopStackCdkWorkshopTopicD7BE96438B5AD106: Type: AWS::SNS::Subscription Properties: Protocol: sqs TopicArn: Ref: CdkWorkshopTopicD368A42F Endpoint: Fn::GetAtt: - CdkWorkshopQueue50D9D426 - Arn Metadata: aws:cdk:path: CdkWorkshopStack/CdkWorkshopQueue/CdkWorkshopStackCdkWorkshopTopicD7BE9643/Resource CdkWorkshopTopicD368A42F: Type: AWS::SNS::Topic Metadata: aws:cdk:path: CdkWorkshopStack/CdkWorkshopTopic/Resource CDKMetadata: Type: AWS::CDK::Metadata Properties: Analytics: v2:deflate64:H4sIAAAAAAAA/1WNQQrCMBBFz9J9OhoFxXUvoK17aZMI09akZhJFQu5uk4DgZv7/jwezg/0JeNW/qRZyqmccIHSuFxNb0S3QkyBcvPKKNXddSr5nM6P4/GCZkZFe/c4PJCwuDo1Oxt++mgVFornEmGqryHgr8o/GaInJjEwbqWCkzYsfgB9hW42EWFuvHT4UtCW/VHqIZsEAAAA= Metadata: aws:cdk:path: CdkWorkshopStack/CDKMetadata/Default Condition: CDKMetadataAvailable Conditions: CDKMetadataAvailable: Fn::Or: - Fn::Or: - Fn::Equals: - Ref: AWS::Region - af-south-1 - Fn::Equals: - Ref: AWS::Region - ap-east-1 - Fn::Equals: - Ref: AWS::Region - ap-northeast-1 - Fn::Equals: - Ref: AWS::Region - ap-northeast-2 - Fn::Equals: - Ref: AWS::Region - ap-south-1 - Fn::Equals: - Ref: AWS::Region - ap-southeast-1 - Fn::Equals: - Ref: AWS::Region - ap-southeast-2 - Fn::Equals: - Ref: AWS::Region - ca-central-1 - Fn::Equals: - Ref: AWS::Region - cn-north-1 - Fn::Equals: - Ref: AWS::Region - cn-northwest-1 - Fn::Or: - Fn::Equals: - Ref: AWS::Region - eu-central-1 - Fn::Equals: - Ref: AWS::Region - eu-north-1 - Fn::Equals: - Ref: AWS::Region - eu-south-1 - Fn::Equals: - Ref: AWS::Region - eu-west-1 - Fn::Equals: - Ref: AWS::Region - eu-west-2 - Fn::Equals: - Ref: AWS::Region - eu-west-3 - Fn::Equals: - Ref: AWS::Region - me-south-1 - Fn::Equals: - Ref: AWS::Region - sa-east-1 - Fn::Equals: - Ref: AWS::Region - us-east-1 - Fn::Equals: - Ref: AWS::Region - us-east-2 - Fn::Or: - Fn::Equals: - Ref: AWS::Region - us-west-1 - Fn::Equals: - Ref: AWS::Region - us-west-2 Parameters: BootstrapVersion: Type: AWS::SSM::Parameter::Value&amp;lt;String&amp;gt; Default: /cdk-bootstrap/hnb659fds/version Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store.</description></item><item><title>cdk synth</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/20-create-project/400-synth.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/20-create-project/400-synth.html</guid><description>Synthesize a template from your app AWS CDK apps are effectively only a definition of your infrastructure using code. When CDK apps are executed, they produce (or &amp;ldquo;synthesize&amp;rdquo;, in CDK parlance) an AWS CloudFormation template for each stack defined in your application.
To synthesize a CDK app, use the cdk synth command. Let&amp;rsquo;s check out the template synthesized from the sample app.
The CDK CLI requires you to be in the same directory as your cdk.</description></item><item><title>cdk synth</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/20-create-project/400-synth.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/20-create-project/400-synth.html</guid><description>Synthesize a template from your app AWS CDK apps are effectively only a definition of your infrastructure using code. When CDK apps are executed, they produce (or &amp;ldquo;synthesize&amp;rdquo;, in CDK parlance) an AWS CloudFormation template for each stack defined in your application.
To synthesize a CDK app, use the cdk synth command. Let&amp;rsquo;s check out the template synthesized from the sample app:
The CDK CLI requires you to be in the same directory as your cdk.</description></item><item><title>cdk synth</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/20-create-project/400-synth.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/20-create-project/400-synth.html</guid><description>Synthesize a template from your app AWS CDK apps are effectively only a definition of your infrastructure using code. When CDK apps are executed, they produce (or &amp;ldquo;synthesize&amp;rdquo;, in CDK parlance) an AWS CloudFormation template for each stack defined in your application.
To synthesize a CDK app, use the cdk synth command. Let&amp;rsquo;s check out the template synthesized from the sample app:
The CDK CLI requires you to be in the same directory as your cdk.</description></item><item><title>Deploying our app</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/50-table-viewer/400-deploy.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/50-table-viewer/400-deploy.html</guid><description>cdk diff Before we deploy, let&amp;rsquo;s take a look at what will happen when we deploy our app (this is just the Resources section of the output):
$ mvn package ... $ cdk diff Resources [+] AWS::IAM::Role ViewHitCounter/Rendered/ServiceRole ViewHitCounterRenderedServiceRole254DB4EA [+] AWS::IAM::Policy ViewHitCounter/Rendered/ServiceRole/DefaultPolicy ViewHitCounterRenderedServiceRoleDefaultPolicy9ADB8C83 [+] AWS::Lambda::Function ViewHitCounter/Rendered ViewHitCounterRendered9C783E45 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.ANY.. ViewHitCounterRenderedApiPermissionANY72263B1A [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.Test.ANY.. ViewHitCounterRenderedApiPermissionTestANYA4794B81 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.ANY..{proxy+} ViewHitCounterRenderedApiPermissionANYproxy42B9E676 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.Test.ANY..{proxy+} ViewHitCounterRenderedApiPermissionTestANYproxy104CA88E [+] AWS::ApiGateway::RestApi ViewHitCounter/ViewerEndpoint ViewHitCounterViewerEndpoint5A0EF326 [+] AWS::ApiGateway::Deployment ViewHitCounter/ViewerEndpoint/Deployment ViewHitCounterViewerEndpointDeployment1CE7C5768689ca8f54dfa4f161d3df0ebffcdcff [+] AWS::ApiGateway::Stage ViewHitCounter/ViewerEndpoint/DeploymentStage.</description></item><item><title>Exposing our hit counter table</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/50-table-viewer/400-expose-table.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/50-table-viewer/400-expose-table.html</guid><description>Add a table property to our hit counter Edit hitcounter.py and modify it as such table is exposed as a public property.
from constructs import Construct from aws_cdk import ( aws_lambda as _lambda, aws_dynamodb as ddb, ) class HitCounter(Construct): @property def handler(self): return self._handler @property def table(self): return self._table def __init__(self, scope: Construct, id: str, downstream: _lambda.IFunction, **kwargs): super().__init__(scope, id, **kwargs) self._table = ddb.Table( self, &amp;#39;Hits&amp;#39;, partition_key={&amp;#39;name&amp;#39;: &amp;#39;path&amp;#39;, &amp;#39;type&amp;#39;: ddb.AttributeType.STRING} ) self.</description></item><item><title>Exposing our hit counter table</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/400-expose-table.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/400-expose-table.html</guid><description>Add a table property to our hit counter Edit src/CdkWorkshop/HitCounter.cs and modify it so that table is exposed as a public property called MyTable.
using Amazon.CDK; using Amazon.CDK.AWS.DynamoDB; using Amazon.CDK.AWS.Lambda; using Constructs; using System.Collections.Generic; namespace CdkWorkshop { public class HitCounterProps { // The function for which we want to count url hits public IFunction Downstream { get; set; } } public class HitCounter : Construct { public readonly Function Handler; public readonly Table MyTable; public HitCounter(Construct scope, string id, HitCounterProps props) : base(scope, id) { var table = new Table(this, &amp;#34;Hits&amp;#34;, new TableProps { PartitionKey = new Attribute { Name = &amp;#34;path&amp;#34;, Type = AttributeType.</description></item><item><title>HitCounterの使用</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/400-use.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/400-use.html</guid><description>スタックにHitCounterを追加する HitCounterの準備ができましたのでアプリに実装していきましょう。 lib/cdk-workshop-stack.tsを開き、次の強調表示されたコードを追加します。
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as lambda from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import * as apigw from &amp;#39;aws-cdk-lib/aws-apigateway&amp;#39;; import { HitCounter } from &amp;#39;./hitcounter&amp;#39;; export class CdkWorkshopStack extends cdk.Stack { constructor(scope: cdk.App, id: string, props?: cdk.StackProps) { super(scope, id, props); const hello = new lambda.Function(this, &amp;#39;HelloHandler&amp;#39;, { runtime: lambda.Runtime.NODEJS_16_X, code: lambda.Code.fromAsset(&amp;#39;lambda&amp;#39;), handler: &amp;#39;hello.handler&amp;#39; }); const helloWithCounter = new HitCounter(this, &amp;#39;HelloHitCounter&amp;#39;, { downstream: hello }); // defines an API Gateway REST API resource backed by our &amp;#34;hello&amp;#34; function.</description></item><item><title>Use the hit counter</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/400-use.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/400-use.html</guid><description>Add a hit counter to our stack Okay, our hit counter is ready. Let&amp;rsquo;s use it in our app. Open cdk_workshop_stack.py and add the following highlighted code:
from constructs import Construct from aws_cdk import ( Stack, aws_lambda as _lambda, aws_apigateway as apigw, ) from .hitcounter import HitCounter class CdkWorkshopStack(Stack): def __init__(self, scope: Construct, id: str, **kwargs) -&amp;gt; None: super().__init__(scope, id, **kwargs) # Defines an AWS Lambda resource my_lambda = _lambda.Function( self, &amp;#39;HelloHandler&amp;#39;, runtime=_lambda.</description></item><item><title>Use the hit counter</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/400-use.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/400-use.html</guid><description>Add a hit counter to our stack Okay, our hit counter is ready. Let&amp;rsquo;s use it in our app. Open src/CdkWorkshop/CdkWorkshopStack.cs and add the following highlighted code:
using Amazon.CDK; using Amazon.CDK.AWS.APIGateway; using Amazon.CDK.AWS.Lambda; using Constructs; namespace CdkWorkshop { public class CdkWorkshopStack : Stack { public CdkWorkshopStack(Construct scope, string id, IStackProps props = null) : base(scope, id, props) { // Defines a new lambda resource var hello = new Function(this, &amp;#34;HelloHandler&amp;#34;, new FunctionProps { Runtime = Runtime.</description></item><item><title>Use the hit counter</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/40-hit-counter/400-use.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/40-hit-counter/400-use.html</guid><description>Add a hit counter to our stack Okay, our hit counter is ready. Let&amp;rsquo;s use it in our app. Open ~/CdkWorkshopStack.java and add the following highlighted code:
package com.myorg; import software.constructs.Construct; import software.amazon.awscdk.Stack; import software.amazon.awscdk.StackProps; import software.amazon.awscdk.services.apigateway.LambdaRestApi; import software.amazon.awscdk.services.lambda.Code; import software.amazon.awscdk.services.lambda.Function; import software.amazon.awscdk.services.lambda.Runtime; public class CdkWorkshopStack extends Stack { public CdkWorkshopStack(final Construct parent, final String id) { this(parent, id, null); } public CdkWorkshopStack(final Construct parent, final String id, final StackProps props) { super(parent, id, props); // Defines a new lambda resource final Function hello = Function.</description></item><item><title>cdk deploy</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/20-create-project/500-deploy.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/20-create-project/500-deploy.html</guid><description>CloudFormationテンプレートが作成されました。次は何を行うでしょうか？ AWSへのデプロイをしましょう！
環境の初期構築 AWS CDKアプリを環境（アカウント/リージョン）に初めてデプロイするときは、Bootstrapスタックを構築する必要があります。 このスタックには、ツールキットの操作に必要なリソースが含まれています。 たとえば、スタックにはデプロイプロセスで使われるCloudformationテンプレートとアセットを保存するために使用されるS3バケットが含まれます。
cdk bootstrap コマンドを実行すれば、bootstrapスタックがAWS環境にデプロイされます。
cdk bootstrap 実行すると以下のように表示されます。
⏳ Bootstrapping environment aws://999999999999/us-east-1... ... アクセス拒否エラーとなるときはAWS CLIのクレデンシャル情報が正しく設定されているか、 現在のプロファイルが CloudFormationのcloudformation:CreateChangeSetを実行する権限を持っているか確認してください。
デプロイしましょう！ cdk deploy コマンドを使用することで、CDKアプリをデプロイできます。
cdk deploy 次のような警告が表示されるはずです。
This deployment will make potentially sensitive changes according to your current security approval level (--require-approval broadening). Please confirm you intend to make the following modifications: IAM Statement Changes ┌───┬─────────────────────────┬────────┬─────────────────┬───────────────────────────┬─────────────────────────────────────────────────────────┐ │ │ Resource │ Effect │ Action │ Principal │ Condition │ ├───┼─────────────────────────┼────────┼─────────────────┼───────────────────────────┼─────────────────────────────────────────────────────────┤ │ + │ ${CdkWorkshopQueue.</description></item><item><title>cdk deploy</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/20-create-project/500-deploy.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/20-create-project/500-deploy.html</guid><description>Okay, we&amp;rsquo;ve got a CloudFormation template. What&amp;rsquo;s next? Let&amp;rsquo;s deploy it into our account!
Bootstrapping an environment The first time you deploy an AWS CDK app into an environment (account/region), you&amp;rsquo;ll need to install a &amp;ldquo;bootstrap stack&amp;rdquo;. This stack includes resources that are needed for the toolkit&amp;rsquo;s operation. For example, the stack includes an S3 bucket that is used to store templates and assets during the deployment process.
You can use the cdk bootstrap command to install the bootstrap stack into an environment:</description></item><item><title>cdk deploy</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/20-create-project/500-deploy.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/20-create-project/500-deploy.html</guid><description>Okay, we&amp;rsquo;ve got a CloudFormation template. What&amp;rsquo;s next? Let&amp;rsquo;s deploy it into our account!
Bootstrapping an environment The first time you deploy an AWS CDK app into an environment (account/region), you&amp;rsquo;ll need to install a &amp;ldquo;bootstrap stack&amp;rdquo;. This stack includes resources that are needed for the toolkit&amp;rsquo;s operation. For example, the stack includes an S3 bucket that is used to store templates and assets during the deployment process.
You can use the cdk bootstrap command to install the bootstrap stack into an environment:</description></item><item><title>cdk deploy</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/20-create-project/500-deploy.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/20-create-project/500-deploy.html</guid><description>Okay, we&amp;rsquo;ve got a CloudFormation template. What&amp;rsquo;s next? Let&amp;rsquo;s deploy it into our account!
Bootstrapping an environment The first time you deploy an AWS CDK app into an environment (account/region), you&amp;rsquo;ll need to install a &amp;ldquo;bootstrap stack&amp;rdquo;. This stack includes resources that are needed for the toolkit&amp;rsquo;s operation. For example, the stack includes an S3 bucket that is used to store templates and assets during the deployment process.
You can use the cdk bootstrap command to install the bootstrap stack into an environment:</description></item><item><title>CloudWatch Logs</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/500-logs.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/500-logs.html</guid><description>Lambda関数のCloudWatchログを表示する まず始めに、Lambda関数に実装されているHitCounterのログを確認します。
SAM CLI やawslogs など、 これを行うのに役立つ多くのツールがあります。 このワークショップでは、AWSコンソールからログを見つける方法を紹介します。
AWS Lambdaコンソールを開きます （東京リージョンに接続されていることを確認してください）。
HitCounter Lambda関数をクリックします（名前にはCdkWorkshopStack-HelloHitCounterという文字列が含まれています)
モニタリング をクリックします。
CloudWatchのログを表示 をクリックします。これにより、AWS CloudWatchコンソールが開きます。
最新のロググループを選択します。
文字列「errorMessage」を含む最新のメッセージを探します。次のようなものが表示されるでしょう。
{ &amp;#34;errorType&amp;#34;: &amp;#34;AccessDeniedException&amp;#34;, &amp;#34;errorMessage&amp;#34;: &amp;#34;User: arn:aws:sts::123456789012:assumed-role/CdkWorkshopStack-HelloHitCounterHitCounterHandlerS-1234567890abc/CdkWorkshopStack-HelloHitCounterHitCounterHandlerD-1234567890ab is not authorized to perform: dynamodb:UpdateItem on resource: arn:aws:dynamodb:ap-northeast-1:123456789012:table/CdkWorkshopStack-HelloHitCounterHits7AAEBF80-1234567890123 because no identity-based policy allows the dynamodb:UpdateItem action&amp;#34;, &amp;#34;code&amp;#34;: &amp;#34;AccessDeniedException&amp;#34;, &amp;#34;message&amp;#34;: &amp;#34;User: arn:aws:sts::123456789012:assumed-role/CdkWorkshopStack-HelloHitCounterHitCounterHandlerS-1234567890abc/CdkWorkshopStack-HelloHitCounterHitCounterHandlerD-1234567890ab is not authorized to perform: dynamodb:UpdateItem on resource: arn:aws:dynamodb:ap-northeast-1:123456789012:table/CdkWorkshopStack-HelloHitCounterHits7AAEBF80-1234567890123 because no identity-based policy allows the dynamodb:UpdateItem action&amp;#34;, &amp;#34;time&amp;#34;: &amp;#34;2022-09-23T14:20:32.823Z&amp;#34;, &amp;#34;requestId&amp;#34;: &amp;#34;V46RBHC7KCRS2NRKP47NFLVQJBVV4KQNSO5AEMVJF66Q9ASUAAJG&amp;#34;, &amp;#34;statusCode&amp;#34;: 400, &amp;#34;retryable&amp;#34;: false, &amp;#34;retryDelay&amp;#34;: 30.</description></item><item><title>CloudWatch Logs</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/500-logs.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/500-logs.html</guid><description>Viewing CloudWatch logs for our Lambda function The first thing to do is to go and look at the logs of our hit counter AWS Lambda function.
There are many tools that help you do that like SAM CLI and awslogs. In this workshop, we&amp;rsquo;ll show you how to find your logs through the AWS console.
Open the AWS Lambda console (make sure you are connected to the correct region).</description></item><item><title>CloudWatch Logs</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/500-logs.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/500-logs.html</guid><description>Viewing CloudWatch logs for our Lambda function The first thing to do is to go and look at the logs of our hit counter AWS Lambda function.
There are many tools that help you do that like SAM CLI and awslogs. In this workshop, we&amp;rsquo;ll show you how to find your logs through the AWS console.
Open the AWS Lambda console (make sure you are connected to the correct region).</description></item><item><title>CloudWatch Logs</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/40-hit-counter/500-logs.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/40-hit-counter/500-logs.html</guid><description>Viewing CloudWatch logs for our Lambda function The first thing to do is to go and look at the logs of our hit counter AWS Lambda function.
There are many tools that help you do that like SAM CLI and awslogs. In this workshop, we&amp;rsquo;ll show you how to find your logs through the AWS console.
Open the AWS Lambda console (make sure you are connected to the correct region).</description></item><item><title>Deploying our app</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/50-table-viewer/500-deploy.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/50-table-viewer/500-deploy.html</guid><description>cdk diff Before we deploy, let&amp;rsquo;s take a look at what will happen when we deploy our app (this is just the Resources section of the output):
$ cdk diff Resources [+] AWS::IAM::Role ViewHitCounter/Rendered/ServiceRole ViewHitCounterRenderedServiceRole254DB4EA [+] AWS::IAM::Policy ViewHitCounter/Rendered/ServiceRole/DefaultPolicy ViewHitCounterRenderedServiceRoleDefaultPolicy9ADB8C83 [+] AWS::Lambda::Function ViewHitCounter/Rendered ViewHitCounterRendered9C783E45 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.ANY.. ViewHitCounterRenderedApiPermissionANY72263B1A [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.Test.ANY.. ViewHitCounterRenderedApiPermissionTestANYA4794B81 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.ANY..{proxy+} ViewHitCounterRenderedApiPermissionANYproxy42B9E676 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.Test.ANY..{proxy+} ViewHitCounterRenderedApiPermissionTestANYproxy104CA88E [+] AWS::ApiGateway::RestApi ViewHitCounter/ViewerEndpoint ViewHitCounterViewerEndpoint5A0EF326 [+] AWS::ApiGateway::Deployment ViewHitCounter/ViewerEndpoint/Deployment ViewHitCounterViewerEndpointDeployment1CE7C5761d44312e8424c23ba090a70e0962c36f [+] AWS::ApiGateway::Stage ViewHitCounter/ViewerEndpoint/DeploymentStage.prod ViewHitCounterViewerEndpointDeploymentStageprodF3901FC7 [+] AWS::IAM::Role ViewHitCounter/ViewerEndpoint/CloudWatchRole ViewHitCounterViewerEndpointCloudWatchRole87B94D6A [+] AWS::ApiGateway::Account ViewHitCounter/ViewerEndpoint/Account ViewHitCounterViewerEndpointAccount0B75E76A [+] AWS::ApiGateway::Resource ViewHitCounter/ViewerEndpoint/Default/{proxy+} ViewHitCounterViewerEndpointproxy2F4C239F [+] AWS::ApiGateway::Method ViewHitCounter/ViewerEndpoint/Default/{proxy+}/ANY ViewHitCounterViewerEndpointproxyANYFF4B8F5B [+] AWS::ApiGateway::Method ViewHitCounter/ViewerEndpoint/Default/ANY ViewHitCounterViewerEndpointANY66F2285B You&amp;rsquo;ll notice that the table viewer adds another API Gateway endpoint, a Lambda function, permissions, outputs, all sorts of goodies.</description></item><item><title>Deploying our app</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/500-deploy.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/500-deploy.html</guid><description>cdk diff Before we deploy, let&amp;rsquo;s take a look at what will happen when we deploy our app (this is just the Resources section of the output):
$ cdk diff Resources [+] AWS::IAM::Role ViewHitCounter/Rendered/ServiceRole ViewHitCounterRenderedServiceRole254DB4EA [+] AWS::IAM::Policy ViewHitCounter/Rendered/ServiceRole/DefaultPolicy ViewHitCounterRenderedServiceRoleDefaultPolicy9ADB8C83 [+] AWS::Lambda::Function ViewHitCounter/Rendered ViewHitCounterRendered9C783E45 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.ANY.. ViewHitCounterRenderedApiPermissionANY72263B1A [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.Test.ANY.. ViewHitCounterRenderedApiPermissionTestANYA4794B81 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.ANY..{proxy+} ViewHitCounterRenderedApiPermissionANYproxy42B9E676 [+] AWS::Lambda::Permission ViewHitCounter/Rendered/ApiPermission.Test.ANY..{proxy+} ViewHitCounterRenderedApiPermissionTestANYproxy104CA88E [+] AWS::ApiGateway::RestApi ViewHitCounter/ViewerEndpoint ViewHitCounterViewerEndpoint5A0EF326 [+] AWS::ApiGateway::Deployment ViewHitCounter/ViewerEndpoint/Deployment ViewHitCounterViewerEndpointDeployment1CE7C5768689ca8f54dfa4f161d3df0ebffcdcff [+] AWS::ApiGateway::Stage ViewHitCounter/ViewerEndpoint/DeploymentStage.prod ViewHitCounterViewerEndpointDeploymentStageprodF3901FC7 [+] AWS::IAM::Role ViewHitCounter/ViewerEndpoint/CloudWatchRole ViewHitCounterViewerEndpointCloudWatchRole87B94D6A [+] AWS::ApiGateway::Account ViewHitCounter/ViewerEndpoint/Account ViewHitCounterViewerEndpointAccount0B75E76A [+] AWS::ApiGateway::Resource ViewHitCounter/ViewerEndpoint/{proxy+} ViewHitCounterViewerEndpointproxy2F4C239F [+] AWS::ApiGateway::Method ViewHitCounter/ViewerEndpoint/{proxy+}/ANY ViewHitCounterViewerEndpointproxyANYFF4B8F5B [+] AWS::ApiGateway::Method ViewHitCounter/ViewerEndpoint/ANY ViewHitCounterViewerEndpointANY66F2285B You&amp;rsquo;ll notice that the table viewer adds another API Gateway endpoint, a Lambda function, permissions, outputs, all sorts of goodies.</description></item><item><title>Extra credit</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/50-table-viewer/500-extra-credit.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/50-table-viewer/500-extra-credit.html</guid><description>Sort hits by descending order You&amp;rsquo;ll notice that the hits in the table are not sorted. Figure out how to configure the table viewer to sort the table by &amp;ldquo;hits&amp;rdquo; in descending order (top path is first).</description></item><item><title>Extra credit</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/50-table-viewer/600-extra-credit.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/50-table-viewer/600-extra-credit.html</guid><description>Sort hits by descending order You&amp;rsquo;ll notice that the hits in the table are not sorted. Figure out how to configure the table viewer to sort the table by &amp;ldquo;hits&amp;rdquo; in descending order (top path is first).</description></item><item><title>Extra credit</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/600-extra-credit.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/50-table-viewer/600-extra-credit.html</guid><description>Sort hits by descending order You&amp;rsquo;ll notice that the hits in the table are not sorted. Figure out how to configure the table viewer to sort the table by &amp;ldquo;hits&amp;rdquo; in descending order (top path is first).</description></item><item><title>Granting permissions</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/600-permissions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/600-permissions.html</guid><description>Allow Lambda to read/write our DynamoDB table Let&amp;rsquo;s give our Lambda&amp;rsquo;s execution role permissions to read/write from our table.
Go back to hitcounter.py and add the following highlighted line:
from constructs import Construct from aws_cdk import ( aws_lambda as _lambda, aws_dynamodb as ddb, ) class HitCounter(Construct): @property def handler(self): return self._handler def __init__(self, scope: Construct, id: str, downstream: _lambda.IFunction, **kwargs): super().__init__(scope, id, **kwargs) table = ddb.Table( self, &amp;#39;Hits&amp;#39;, partition_key={&amp;#39;name&amp;#39;: &amp;#39;path&amp;#39;, &amp;#39;type&amp;#39;: ddb.</description></item><item><title>Granting permissions</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/600-permissions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/600-permissions.html</guid><description>Allow Lambda to read/write our DynamoDB table Let&amp;rsquo;s give our Lambda&amp;rsquo;s execution role permissions to read/write from our table.
Go back to src/CdkWorkshop/HitCounter.cs and add the following highlighted lines:
using Amazon.CDK; using Amazon.CDK.AWS.Lambda; using Amazon.CDK.AWS.DynamoDB; using Constructs; using System.Collections.Generic; namespace CdkWorkshop { public class HitCounterProps { // The function for which we want to count url hits public IFunction Downstream { get; set; } } public class HitCounter : Construct { public IFunction Handler { get; }; public HitCounter(Construct scope, string id, HitCounterProps props) : base(scope, id) { var table = new Table(this, &amp;#34;Hits&amp;#34;, new TableProps { PartitionKey = new Attribute { Name = &amp;#34;path&amp;#34;, Type = AttributeType.</description></item><item><title>Granting permissions</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/40-hit-counter/600-permissions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/40-hit-counter/600-permissions.html</guid><description>Allow Lambda to read/write our DynamoDB table Let&amp;rsquo;s give our Lambda&amp;rsquo;s execution role permissions to read/write from our table.
Go back to ~/HitCounter.java and add the following highlighted lines:
package com.myorg; import java.util.HashMap; import java.util.Map; import software.constructs.Construct; import software.amazon.awscdk.services.dynamodb.Attribute; import software.amazon.awscdk.services.dynamodb.AttributeType; import software.amazon.awscdk.services.dynamodb.Table; import software.amazon.awscdk.services.lambda.Code; import software.amazon.awscdk.services.lambda.Function; import software.amazon.awscdk.services.lambda.Runtime; public class HitCounter extends Construct { private final Function handler; private final Table table; public HitCounter(final Construct scope, final String id, final HitCounterProps props) { super(scope, id); this.</description></item><item><title>パーミッションの付与</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/600-permissions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/600-permissions.html</guid><description>LambdaがDynamoDBテーブルを読み書きできるようにする Lambdaの実行ロールに、DynamoDBテーブルの読み取り/書き込み権限を与えましょう。
hitcounter.tsに戻り、次の強調表示された行を追加します。
import * as cdk from &amp;#39;aws-cdk-lib&amp;#39;; import * as lambda from &amp;#39;aws-cdk-lib/aws-lambda&amp;#39;; import * as dynamodb from &amp;#39;aws-cdk-lib/aws-dynamodb&amp;#39;; import { Construct } from &amp;#39;constructs&amp;#39;; export interface HitCounterProps { /** the function for which we want to count url hits **/ downstream: lambda.IFunction; } export class HitCounter extends Construct { /** allows accessing the counter function */ public readonly handler: lambda.Function; constructor(scope: Construct, id: string, props: HitCounterProps) { super(scope, id); const table = new dynamodb.</description></item><item><title>HitCounterのテスト</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/700-test.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/20-typescript/40-hit-counter/700-test.html</guid><description>テスト呼び出し いくつかのリクエストを実行して、HitCounterが機能するかどうかを確認しましょう。curlコマンド、またはWebブラウザから確認ができます。
curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world DynamoDBコンソールを開く DynamoDBコンソールに移動します。
テーブルを作成したリージョンにいることを確認してください。手順どおりであれば東京リージョンにいることを確認しましょう。
ナビゲーションペインから「テーブル」を選択し、CdkWorkShopStack-HelloHitCounterHitsで始まるテーブルを選択してください。
テーブルを開き、「テーブルアイテムの探索」を選択します。
各パスで取得したヒット数を確認します。
新しいパスでAPIを叩き、アイテムビューを更新してください。 hitsカウントが1の新しいアイテムが表示されます。
Good job! HitCounterは大変便利だということがご理解いただけたと思います。 基本的に、誰でもAPI Gatewayのプロキシバックエンドとして機能するLambda関数にアタッチでき、このAPIのカウントを記録できます。
HitCounterはシンプルなJavaScriptクラスであるため、npmモジュールをパッケージ化して、 JavaScriptパッケージマネージャーであるnpmjs.orgに公開できます。 公開後は誰でもnpm install でインストールでき、CDKアプリに追加できます。
現時点で用意しているハンズオンはコンテンツは以上です。おつかれさまでした。</description></item><item><title>Test the hit counter</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/700-test.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/700-test.html</guid><description>Issue a few test requests Let&amp;rsquo;s issue a few requests and see if our hit counter works. You can also use your web browser to do that:
curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world Open DynamoDB console Go to the DynamoDB console.
Make sure you are in the region where you created the table.
Select Tables in the navigation pane and select the table that starts with cdkworkshop-HelloHitCounterHits.</description></item><item><title>Test the hit counter</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/700-test.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/40-dotnet/40-hit-counter/700-test.html</guid><description>Issue a few test requests Let&amp;rsquo;s issue a few requests and see if our hit counter works. You can also use your web browser to do that:
curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world Open DynamoDB console Go to the DynamoDB console.
Make sure you are in the region where you created the table.
Select Tables in the navigation pane and select the table that starts with CdkWorkShopStack-HelloHitCounterHits.</description></item><item><title>Test the hit counter</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/40-hit-counter/700-test.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/50-java/40-hit-counter/700-test.html</guid><description>Issue a few test requests Let&amp;rsquo;s issue a few requests and see if our hit counter works. You can also use your web browser to do that:
curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world Open DynamoDB console Go to the DynamoDB console.
Make sure you are in the region where you created the table.
Select Tables in the navigation pane and select the table that starts with CdkWorkdShopStack-HelloHitCounterHits.</description></item></channel></rss>