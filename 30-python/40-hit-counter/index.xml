<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Writing constructs on AWS Cloud Development Kit (AWS CDK) Workshop</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter.html</link><description>Recent content in Writing constructs on AWS Cloud Development Kit (AWS CDK) Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/index.xml" rel="self" type="application/rss+xml"/><item><title>Define the HitCounter API</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/100-api.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/100-api.html</guid><description>Create a new file for our hit counter construct Create a new file under cdk_workshop called hitcounter.py with the following content:
from constructs import Construct from aws_cdk import ( aws_lambda as _lambda, ) class HitCounter(Construct): def __init__(self, scope: Construct, id: str, downstream: _lambda.IFunction, **kwargs): super().__init__(scope, id, **kwargs) # TODO Save the file.
What&amp;rsquo;s going on here? We declared a new construct class called HitCounter. As usual, constructor arguments are scope, id and kwargs, and we propagate them to the cdk.</description></item><item><title>Hit counter handler</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/200-handler.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/200-handler.html</guid><description>Hit counter Lambda handler Okay, now let&amp;rsquo;s write the Lambda handler code for our hit counter.
Create the file lambda/hitcount.py:
import json import os import boto3 ddb = boto3.resource(&amp;#39;dynamodb&amp;#39;) table = ddb.Table(os.environ[&amp;#39;HITS_TABLE_NAME&amp;#39;]) _lambda = boto3.client(&amp;#39;lambda&amp;#39;) def handler(event, context): print(&amp;#39;request: {}&amp;#39;.format(json.dumps(event))) table.update_item( Key={&amp;#39;path&amp;#39;: event[&amp;#39;path&amp;#39;]}, UpdateExpression=&amp;#39;ADD hits :incr&amp;#39;, ExpressionAttributeValues={&amp;#39;:incr&amp;#39;: 1} ) resp = _lambda.invoke( FunctionName=os.environ[&amp;#39;DOWNSTREAM_FUNCTION_NAME&amp;#39;], Payload=json.dumps(event), ) body = resp[&amp;#39;Payload&amp;#39;].read() print(&amp;#39;downstream response: {}&amp;#39;.format(body)) return json.loads(body) Discovering resources at runtime You&amp;rsquo;ll notice that this code relies on two environment variables:</description></item><item><title>Define resources</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/300-resources.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/300-resources.html</guid><description>Add resources to the hit counter construct Now, let&amp;rsquo;s define the AWS Lambda function and the DynamoDB table in our HitCounter construct. Go back to cdkworkshop/hitcounter.py and add the following highlighted code:
from constructs import Construct from aws_cdk import ( aws_lambda as _lambda, aws_dynamodb as ddb, ) class HitCounter(Construct): @property def handler(self): return self._handler def __init__(self, scope: Construct, id: str, downstream: _lambda.IFunction, **kwargs): super().__init__(scope, id, **kwargs) table = ddb.Table( self, &amp;#39;Hits&amp;#39;, partition_key={&amp;#39;name&amp;#39;: &amp;#39;path&amp;#39;, &amp;#39;type&amp;#39;: ddb.</description></item><item><title>Use the hit counter</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/400-use.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/400-use.html</guid><description>Add a hit counter to our stack Okay, our hit counter is ready. Let&amp;rsquo;s use it in our app. Open cdk_workshop_stack.py and add the following highlighted code:
from constructs import Construct from aws_cdk import ( Stack, aws_lambda as _lambda, aws_apigateway as apigw, ) from .hitcounter import HitCounter class CdkWorkshopStack(Stack): def __init__(self, scope: Construct, id: str, **kwargs) -&amp;gt; None: super().__init__(scope, id, **kwargs) # Defines an AWS Lambda resource my_lambda = _lambda.Function( self, &amp;#39;HelloHandler&amp;#39;, runtime=_lambda.</description></item><item><title>CloudWatch Logs</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/500-logs.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/500-logs.html</guid><description>Viewing CloudWatch logs for our Lambda function The first thing to do is to go and look at the logs of our hit counter AWS Lambda function.
There are many tools that help you do that like SAM CLI and awslogs. In this workshop, we&amp;rsquo;ll show you how to find your logs through the AWS console.
Open the AWS Lambda console (make sure you are connected to the correct region).</description></item><item><title>Granting permissions</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/600-permissions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/600-permissions.html</guid><description>Allow Lambda to read/write our DynamoDB table Let&amp;rsquo;s give our Lambda&amp;rsquo;s execution role permissions to read/write from our table.
Go back to hitcounter.py and add the following highlighted line:
from constructs import Construct from aws_cdk import ( aws_lambda as _lambda, aws_dynamodb as ddb, ) class HitCounter(Construct): @property def handler(self): return self._handler def __init__(self, scope: Construct, id: str, downstream: _lambda.IFunction, **kwargs): super().__init__(scope, id, **kwargs) table = ddb.Table( self, &amp;#39;Hits&amp;#39;, partition_key={&amp;#39;name&amp;#39;: &amp;#39;path&amp;#39;, &amp;#39;type&amp;#39;: ddb.</description></item><item><title>Test the hit counter</title><link>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/700-test.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaws-ug-cdk.github.io/aws-cdk-intro-workshop/30-python/40-hit-counter/700-test.html</guid><description>Issue a few test requests Let&amp;rsquo;s issue a few requests and see if our hit counter works. You can also use your web browser to do that:
curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/ curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world curl https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod/hello/world Open DynamoDB console Go to the DynamoDB console.
Make sure you are in the region where you created the table.
Select Tables in the navigation pane and select the table that starts with cdkworkshop-HelloHitCounterHits.</description></item></channel></rss>