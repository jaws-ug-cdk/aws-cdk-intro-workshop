<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CDK Pipelines on AWS Cloud Development Kit (AWS CDK) Workshop</title><link>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines.html</link><description>Recent content in CDK Pipelines on AWS Cloud Development Kit (AWS CDK) Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Started with Pipelines</title><link>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/1000-setting-up.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/1000-setting-up.html</guid><description>Note: This segment of the workshop assumes you have completed the previous sections of the workshop. If you have not, and just want to follow this segment, or you are returning to try this workshop, you can use the code here that represents the last state of the project after adding the tests.
Create Pipeline Stack The first step is to create the stack that will contain our pipeline. Since this is separate from our actual &amp;ldquo;production&amp;rdquo; application, we want this to be entirely self-contained.</description></item><item><title>Create Repository</title><link>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/2000-create-repo.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/2000-create-repo.html</guid><description>Create Repo in Pipeline Stack The first step in any good CD pipeline is source control. Here we will create a CodeCommit repository to contain our project code.
Edit the file cdk_workshop/pipeline_stack.py as follows.
from constructs import Construct from aws_cdk import ( Stack, aws_codecommit as codecommit, ) class WorkshopPipelineStack(Stack): def __init__(self, scope: Construct, id: str, **kwargs) -&amp;gt; None: super().__init__(scope, id, **kwargs) # Creates a CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; repo = codecommit.</description></item><item><title>Create New Pipeline</title><link>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/3000-new-pipeline.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/3000-new-pipeline.html</guid><description>Define an Empty Pipeline Now we are ready to define the basics of the pipeline.
Return to the file pipeline_stack.py and edit as follows:
from constructs import Construct from aws_cdk import ( Stack, aws_codecommit as codecommit, pipelines as pipelines, ) class WorkshopPipelineStack(Stack): def __init__(self, scope: Construct, id: str, **kwargs) -&amp;gt; None: super().__init__(scope, id, **kwargs) # Creates a CodeCommit repository called &amp;#39;WorkshopRepo&amp;#39; repo = codecommit.Repository( self, &amp;#34;WorkshopRepo&amp;#34;, repository_name=&amp;#34;WorkshopRepo&amp;#34; ) pipeline = pipelines.</description></item><item><title>Add Application to Pipeline</title><link>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/4000-build-stage.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/4000-build-stage.html</guid><description>Create Stage At this point, you have a fully operating CDK pipeline that will automatically update itself on every commit, BUT at the moment, that is all it does. We need to add a stage to the pipeline that will deploy our application.
Create a new file in cdk_workshop called pipeline_stage.py with the code below:
from constructs import Construct from aws_cdk import ( Stage ) from .cdk_workshop_stack import CdkWorkshopStack class WorkshopPipelineStage(Stage): def __init__(self, scope: Construct, id: str, **kwargs): super().</description></item><item><title>Polish Pipeline</title><link>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/5000-test-actions.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/5000-test-actions.html</guid><description>Get Endpoints Stepping back, we can see a problem now that our app is being deployed by our pipeline. There is no easy way to find the endpoints of our application (the TableViewer and LambdaRestApi endpoints), so we can&amp;rsquo;t call it! Let&amp;rsquo;s add a little bit of code to expose these more obviously.
First edit cdk_workshop/cdk_workshop_stack.py to get these values and expose them as properties of our stack:
from constructs import Construct from aws_cdk import ( Stack, CfnOutput, aws_lambda as _lambda, aws_apigateway as apigw, ) from cdk_dynamo_table_view import TableViewer from .</description></item><item><title>Cleanup</title><link>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/6000-cleanup.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cdkworkshop.com/30-python/70-advanced-topics/200-pipelines/6000-cleanup.html</guid><description>To clean up the stacks from this workshop, navigate to the Cloudformation Console, select your stacks, and hit &amp;ldquo;Delete&amp;rdquo;. This may take some time.</description></item></channel></rss>